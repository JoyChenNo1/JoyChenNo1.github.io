<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>拆书系列之《C++ Templates 2nd》</title>
    <url>/2021/05/05/C++%20Template/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8AC++%20Templates%202nd%E3%80%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>C++ Templates</tag>
      </tags>
  </entry>
  <entry>
    <title>C++20 新特性</title>
    <url>/2021/05/08/C++%20%E6%96%B0%E7%89%B9%E6%80%A7/C++20%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++20</tag>
        <tag>Modern C++</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《深度探索 C++ 对象模型》</title>
    <url>/2021/10/08/C++%20%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8A%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2%20C++%20%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E3%80%8B/</url>
    <content><![CDATA[<h1 id="拆书系列之《深度探索-C-对象模型》"><a href="#拆书系列之《深度探索-C-对象模型》" class="headerlink" title="拆书系列之《深度探索 C++ 对象模型》"></a>拆书系列之《深度探索 C++ 对象模型》</h1><p><code>参考自《深度探索 C++ 对象模型》--Stanley B.Lippman 著，侯捷译</code>， 以及 <a href="https://isocpp.org/wiki/faq/virtual-functions#virtual-by-default%E3%80%82">https://isocpp.org/wiki/faq/virtual-functions#virtual-by-default。</a></p>
<br/>

<h2 id="关于对象（Object-Lessons）"><a href="#关于对象（Object-Lessons）" class="headerlink" title="关于对象（Object Lessons）"></a>关于对象（Object Lessons）</h2><p><code>本章主要泛讲 C++的对象模型、struct 和 class 关键字的差异、多态下的内存布局分析等。</code></p>
<h3 id="加上封装后的布局成本"><a href="#加上封装后的布局成本" class="headerlink" title="加上封装后的布局成本"></a>加上封装后的布局成本</h3><p>C++ 在布局以及存取时间上的主要的额外负担由 <strong>virtual</strong> 引起，包括：</p>
<p><code>virtual function 机制， 用来支持 执行期绑定。</code></p>
<p><code>virtual base class， 用来实现单一共享在继承体系中。</code></p>
<p>此外，还有一些额外负担，发生在 <code>一个 derived class 和之上的 base class 转换之间。</code></p>
<br/>

<h2 id="C-对象模式（The-C-Object-Model）"><a href="#C-对象模式（The-C-Object-Model）" class="headerlink" title="C++ 对象模式（The C++ Object Model）"></a>C++ 对象模式（The C++ Object Model）</h2><p>Stroustrup 当初设计的 C++ 对象模型中， <strong>非静态数据成员（nonstatic data members）</strong> 被配置于每一个 <strong>类实例化对象（class object）</strong> 之内，<strong>静态数据成员（static data members）</strong> 、<strong>静态和非静态成员函数（static and nonstatic function members）</strong> 被存放在类实例化对象（class object）之外。</p>
<p>虚函数通过两个步骤来支持：</p>
<p>1、每一个 <strong>类</strong> 产生一堆指向 <strong>virtual functions</strong> 的指针，放在 <strong>表格（virtual table，缩写 vtbl）</strong> 中。</p>
<p>2、每一个 <strong>类实例化对象</strong> 被天际一个 <strong>指针（vptr）</strong>，指向 <strong>virtual table</strong>，<strong>vptr</strong> 的设定和重置都有类的 <strong>constructor、destructor 和 copy assignment 运算符</strong> 自动完成。 每个 <strong>类</strong>所关联的 <strong>type_info object （用以支持 runtime type identification， RTTI）</strong>也通过 <strong>virtual table</strong> 被指出来，通常放在 <strong>virtual table</strong> 的第一个 slot 处。</p>
<br/>





<h3 id="C-对象模型（The-C-Object-Model）"><a href="#C-对象模型（The-C-Object-Model）" class="headerlink" title="C++ 对象模型（The C++ Object Model）"></a>C++ 对象模型（The C++ Object Model）</h3><p>比如一个类 <strong>Point</strong>：</p>
<div class="tabs" id="point"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#point-1">class Point</button></li><li class="tab"><button type="button" data-href="#point-2">class Point 对象模型</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="point-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">float</span> xval<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">PointCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> ostream<span class="token operator">&amp;</span> <span class="token function">Print</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

  <span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">float</span> x_<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> point_count_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="point-2"><p>优点：<code>空间及存取时间的效率。</code></p>
<p>缺点：<code>如果用到的 class object 的 nonstatic data members 有修改（增/删/改），应用程序代码需要重新编译。</code></p>
<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/Object%20Model/Point%E7%B1%BB%E6%A8%A1%E5%9E%8B%E5%9B%BE.png"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h3 id="加上继承的-C-对象模型"><a href="#加上继承的-C-对象模型" class="headerlink" title="加上继承的 C++ 对象模型"></a>加上继承的 C++ 对象模型</h3><div class="tabs" id="继承的-c++-对象模型"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#继承的-c++-对象模型-1">单一继承</button></li><li class="tab"><button type="button" data-href="#继承的-c++-对象模型-2">多重继承</button></li><li class="tab"><button type="button" data-href="#继承的-c++-对象模型-3">虚拟继承</button></li><li class="tab"><button type="button" data-href="#继承的-c++-对象模型-4">派生类如何在本质上模塑其基类实体？</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="继承的-c++-对象模型-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Library_materials</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Library_materials</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Rental_book</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">Book</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="继承的-c++-对象模型-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 一种 iostream 实现方式</span>
<span class="token keyword">class</span> <span class="token class-name">iostream</span><span class="token operator">:</span> 
    <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">istream</span><span class="token punctuation">,</span> 
    <span class="token keyword">public</span> <span class="token class-name">ostream</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="继承的-c++-对象模型-3"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// virtual -> 共享的意思</span>
<span class="token keyword">class</span> <span class="token class-name">istream</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">ios</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">ostream</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">ios</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>在虚拟继承的情况下， base class 不管在继承串链中被派生（derived）多少次，永远只会存在一份实体（subject）。</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/Object%20Model/iostream-class.png"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="继承的-c++-对象模型-4"><p>每一个 <code>base class</code> 可以被 <code>derived class object</code> 内的一个 <code>slot</code> 指出，该 <code>slot</code> 内含 <code>base class subobject</code> 的地址。</p>
<p>这种体制的主要缺点：因为间接性导致空间和存取时间上的额外负担。</p>
<p>这种体制的主要优点：class object 的大小不会因为其 base classes 的改变而受到影响。</p>
<br/>

<p>另一种所谓的 base table 模型：base class table 被产生出来时，表格中的每一个 slot 内包含一个相关的 base class 地址，这个很想 virtual table 内包含一个 virtual function 的地址一样。每一个 class object 内含一个 bptr，它会被初始化，指向其 base class table。</p>
<p>缺点：因为间接性导致空间和存取时间上的额外负担。</p>
<p>优点：每一个 class object 都应该在某个固定位置安放一个 base table 指针，与 base classes 的大小和数目无关；无需改变 class objects 本身就可以放大、缩小、或者更改 base class table。</p>
<p>base class table 模型在虚拟多继承中的应用</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/Object%20Model/base-class-table-model.png"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<p>不管哪一种体制，<code>间接性</code> 的级数都将因为继承的深度增加（如 Rental_book 需要两次简介存取才能够探取到继承自 Library_metarials 的 members），而 Book 只需要一次。所以，<code>在 derived 内复制一个指针，指向继承串链中的每一个 base class，可以得到一个永恒不变的存取时间</code>，需要的额外空间来放置额外的指针这个代价是必然的。</p>
<br/>



<h3 id="对象模型如何影响程序"><a href="#对象模型如何影响程序" class="headerlink" title="对象模型如何影响程序"></a>对象模型如何影响程序</h3><p>这里先引入了对象模型下一个类可能被转化的一个过程。</p>
<div class="tabs" id="对象模型下的函数转换"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#对象模型下的函数转换-1">假设定义一个类</button></li><li class="tab"><button type="button" data-href="#对象模型下的函数转换-2">可能在内部的转化</button></li><li class="tab"><button type="button" data-href="#对象模型下的函数转换-3">转化图示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="对象模型下的函数转换-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
  	<span class="token comment">// copy constructor</span>
  	<span class="token function">X</span><span class="token punctuation">(</span><span class="token keyword">const</span> X<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>
  	<span class="token comment">// virtual destructor</span>
  	<span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// virtual function</span>
  	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


X <span class="token function">foobar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  X xx<span class="token punctuation">;</span>
  X <span class="token operator">*</span>px <span class="token operator">=</span> <span class="token keyword">new</span> X<span class="token punctuation">;</span>
  <span class="token comment">// foo 是一个 virtual function</span>
  xx<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  px<span class="token operator">-></span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	
  <span class="token keyword">delete</span> px<span class="token punctuation">;</span>
  retun xx<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="对象模型下的函数转换-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">foobar</span><span class="token punctuation">(</span>X <span class="token operator">&amp;</span>_result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 构造 _result</span>
  <span class="token comment">// _result 用来取代 local xx ...</span>
  _result<span class="token punctuation">.</span><span class="token class-name">X</span><span class="token double-colon punctuation">::</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 扩展 X *px = new X;</span>
  px <span class="token operator">=</span> <span class="token function">_new</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> px <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    px<span class="token operator">-></span><span class="token class-name">X</span><span class="token double-colon punctuation">::</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 扩展 xx.foo() 但不使用 virtual 机制</span>
  <span class="token comment">// 以 _result 取代 xx</span>
  <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>_result <span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 使用 virtual 机制扩展 px->foo()</span>
  <span class="token punctuation">(</span> <span class="token operator">*</span>px<span class="token operator">-></span>vtbl<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">(</span> px <span class="token punctuation">)</span>
  
  <span class="token comment">// 扩展 delete px;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>px <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">(</span> <span class="token operator">*</span>px<span class="token operator">-></span>vtbl<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">(</span> px <span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// destructor</span>
    <span class="token function">_delete</span><span class="token punctuation">(</span> px <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token comment">// 不需要使用 named return statement</span>
  <span class="token comment">// 不需要销毁 local object xx</span>
  <span class="token keyword">return</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="对象模型下的函数转换-3"><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/Object%20Model/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E5%A6%82%E4%BD%95%E5%BD%B1%E5%93%8D%E7%A8%8B%E5%BA%8F.png"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h3 id="关键词所带来的差异"><a href="#关键词所带来的差异" class="headerlink" title="关键词所带来的差异"></a>关键词所带来的差异</h3><p>举例说明了关键字带来的差异，以及 C++ 为了兼容 C 变得复杂的原因。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token punctuation">(</span> <span class="token operator">*</span>p1 <span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不知道是个声明（declaration）还是 函数调用（invocation）</span>
<span class="token keyword">int</span> <span class="token punctuation">(</span> <span class="token operator">*</span>p2 <span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无法确定？</span>
<span class="token comment">// 当语言无法区分那是一个声明还是一个表达式的时候，我们需要一个超越语言范围的规则，</span>
<span class="token comment">// 该规则会将上述的式子判定为一个『声明』</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h4 id="struct-和-class-的区别"><a href="#struct-和-class-的区别" class="headerlink" title="struct 和 class 的区别"></a>struct 和 class 的区别</h4><p>C++ 引入 class 的重要性（非必要）：class 代表了一种所支持的<code>封装和继承的哲学</code>。</p>
<p>如果 C++ 需要<code>支持现存的 C 程序代码</code>，就不能不支持 struct。</p>
<p>真正的问题不在于我们的声明是否使用了相同的关键词 struct&#x2F;class，而是对于类声明的某种承诺：</p>
<p><code>struct</code> 实现 C 的数据萃取观念。</p>
<p><code>class</code> 实现的是 C++ 的 ADT (Abstract Data Type) 观念。</p>
<p>class 真正特性是由声明的本身来决定的。</p>
<p><strong>如果我们迫切需要一个相当复杂的 C++ class 的某些部分的数据，使它像 C 声明的样子，那么那一部分最好是 抽离出来形成一个独立的 struct 声明，然后让 C++ 与 C 组合（composition）:</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">c_point</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span><span class="token operator">:</span> 
    <span class="token keyword">operator</span> <span class="token function">C_Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _c_point<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token comment">// ...</span>
  <span class="token keyword">private</span><span class="token operator">:</span>
    c_point c_point_<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="对象的差异"><a href="#对象的差异" class="headerlink" title="对象的差异"></a>对象的差异</h3><p>需要多少内存才能变现一个 class object ? 一般而言：</p>
<p>1、非静态数据成员的总和大小。</p>
<p>2、加上任何由于 <strong>alignment</strong> 需求而填补上去的空间。（<strong>alignment</strong> 就是字节对齐，在 32 位计算机上，alignment 通常为 4 bytes（32位），以使 bus 的 运输量达到最大效率。）</p>
<p>3、加上为了支持 <strong>virtual</strong> 而由内部产生的任何额外负担（overload）。 </p>
<br/>

<h4 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h4><p>一个指针，不管它指向那种数据类型，指针本身所需的内存大小是固定的（32 位机器上是 4 bytes，64 位机器上是 8 bytes），指针类型只会教导编译器如何解释某个特定地址中的内存内容及其大小。</p>
<div class="tabs" id="zooanimal"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#zooanimal-1">class ZooAnimal</button></li><li class="tab"><button type="button" data-href="#zooanimal-2">ZooAnimal object 内存布局</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="zooanimal-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">ZooAnimal</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">ZooAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">ZooAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Rotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">int</span> location_<span class="token punctuation">;</span>
    String name_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

ZooAnimal <span class="token function">za</span><span class="token punctuation">(</span><span class="token string">"Zoey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ZooAnimal<span class="token operator">*</span> pza <span class="token operator">=</span> <span class="token operator">&amp;</span>za<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="zooanimal-2"><p>如果 String 是传统的 8-bytes（包括一个 4 bytes 的 char* 和表示长度的 int ），一个 ZooAnimal 指针将横跨地址空间 1000~1015（4+8+4）,如图：</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/Object%20Model/%E7%8B%AC%E7%AB%8Bclass%E7%9A%84object%E5%B8%83%E5%B1%80%E5%92%8Cpointer%E5%B8%83%E5%B1%80.png"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<p>对于一个指向某个地址的 <code>void*</code> 指针，我们并不知道他将涵盖怎样的地址，所以 <strong>不能通过它操作所指的 object</strong>。</p>
<p>对于<strong>转型（cast）</strong>，其实是一种编译器指令，它并不改变一个指针所含的真正地址，<strong>它只影响被指明的内存的大小和内容的解释方式。</strong></p>
<br/>

<h4 id="加上多态之后"><a href="#加上多态之后" class="headerlink" title="加上多态之后"></a>加上多态之后</h4><div class="tabs" id="adding-polymorphism"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#adding-polymorphism-1">class Bear</button></li><li class="tab"><button type="button" data-href="#adding-polymorphism-2">Bear object 内存布局</button></li><li class="tab"><button type="button" data-href="#adding-polymorphism-3">Bear* 与 ZooAnimal*</button></li><li class="tab"><button type="button" data-href="#adding-polymorphism-4">指针支持多态的本质</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="adding-polymorphism-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Bear</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">ZooAnimal</span></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Bear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">Bear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>

  <span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">enum</span> <span class="token class-name">Dances</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    Dances dances_known<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cell_block<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

Bear <span class="token function">b</span><span class="token punctuation">(</span><span class="token string">"Yogi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Bear <span class="token operator">*</span>pb <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
Bear <span class="token operator">&amp;</span>rb <span class="token operator">=</span> <span class="token operator">*</span>pb<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="adding-polymorphism-2"><p>对于 Bear 的实例 b, 在 32 位机器上，需要 24 bytes [ZooAnimal 的 16 bytes + Bear 所带来的 8 bytes ]，指针 pb 和 引用 rb 需要 4 bytes。</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/Object%20Model/Derived%20class%20%E7%9A%84%20object%20%E5%92%8C%20pointer%20%E5%B8%83%E5%B1%80.png"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="adding-polymorphism-3"><p>思考：一个派生类指针 Bear *pb 和 一个父类指针 ZooAnimal *pz 有何不同？</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Bear b<span class="token punctuation">;</span>
ZooAnimal <span class="token operator">*</span>pz <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
Bear <span class="token operator">*</span>pb <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
<span class="token comment">// 它们都指向了 Bear object 的第一个 byte，但是：</span>

<span class="token comment">// pb 所涵盖的地址包含整个 Bear object !!!</span>
<span class="token comment">// pz 只包含 Bear object 中的 ZooAnimal subobject !!!</span>

<span class="token comment">// error: 不合法操作！！!</span>
pz<span class="token operator">-></span>cell_block<span class="token punctuation">;</span>

<span class="token comment">// 可以进行下行转换，[运行时操作,成本较高]</span>
<span class="token comment">// ok</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> Bear <span class="token operator">*</span>pb2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Bear<span class="token operator">*</span> <span class="token operator">></span></span></span><span class="token punctuation">(</span>pz<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  	pb2<span class="token operator">-></span>cell_block<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="adding-polymorphism-4"><p>一个指针或引用之所以支持多态，是因为<strong>它们并不会引发内存中任何 『与类型有关的内存委托操作（type-dependent commitment）』，受到改变的是它们所指向内存的『大小和内容的解释方式』而已。</strong></p>
<p>例如，对于父类指针调用 <code>pz-&gt;Rotate()</code> 时，<code>pz</code> 的类型将决定一下两点：</p>
<ul>
<li>pz 只能调用 ZooAnimal 的 public 接口。</li>
<li>该接口的 access level （Rotate() 是 ZooAnimal 的一个 public member）。</li>
</ul>
<p><code>pz</code> 所指的 <code>object</code> 类型可以决定 <code>Rotate()</code> 所调用的实体，但是调用的是父类（<code>ZooAnimal</code>）的 <code>Rotate()</code> 还是派生类（<code>Bear</code>）的 <code>Rotate()</code> 由 <code>vtpr</code> 指向的 <code>virtual table</code> 决定，且看后续讨论。</p>
<p>再看这么一种情况：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Bear b<span class="token punctuation">;</span>
ZooAnimal za <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment">// 会引起切割</span>

<span class="token comment">// 调用 ZooAnimal::rotate()</span>
za<span class="token punctuation">.</span><span class="token function">Rotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>思考：</p>
<p>1、将 <code>Bear</code> 实体完整拷贝给 <code>ZooAnimal</code> 实体去，为什么 <code>za</code> 实体的 <code>vptr</code> 不指向 <code>Bear</code> 的 <code>virtual table</code>?</p>
<p>  编译器确保了如果某一个 <code>object</code> 含有一个或者一个以上的 <code>vptrs</code>，那么 <code>vptrs</code> 的内容不会被 <code>base class object</code> 初始化或改变。</p>
<p>2、为什么 <code>Rotate()</code> 是被 <code>ZooAnimal</code> 实体调用而不是 <code>Bear</code> 实体？</p>
<p>  <code>za</code> 并不是一个 <code>Bear</code> 实体，它只能是 ZooAnimal 实体，面向对象设计不支持对 <code>object</code> 的直接处理，多态不能够实际发挥在 <strong>直接存取 objects</strong> 这件事情上。例如：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Panda</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Bear</span></span> <span class="token punctuation">&#123;</span> 
  <span class="token comment">//... </span>
<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#123;</span>
  ZooAnimal za<span class="token punctuation">;</span>
  ZooAnimal <span class="token operator">*</span>pza<span class="token punctuation">;</span>
  
  Bear b<span class="token punctuation">;</span>
  pza <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
  
  Panda <span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token keyword">new</span> Panda<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其可能的布局如下：</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/Object%20Model/ZooAnimal-Bear-Panda.png">

<p>当一个基类对象实例被用来初始化一个派生类对象时，派生类对象会被切割，以塞入较小的 base type 内存中， 编译时期通过这个实例触发 virtual function 调用操作。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h2 id="构造语义学（The-Semantics-of-constructors）"><a href="#构造语义学（The-Semantics-of-constructors）" class="headerlink" title="构造语义学（The Semantics of constructors）"></a>构造语义学（The Semantics of constructors）</h2><p><code>本章主要讲：编译器在哪些情况下，必须为没有声明构造函数的类生成必要的默认构造函数和拷贝构造函数，以及编译器为参数初始化、返回值初始化等做了哪些优化操作。</code></p>
<br/>

<h3 id="Default-Constructor-的建构操作"><a href="#Default-Constructor-的建构操作" class="headerlink" title="Default Constructor 的建构操作"></a>Default Constructor 的建构操作</h3><p><code>对于 C++ 新手常见的误解：</code></p>
<ul>
<li><p>任何 class 如果没有定义默认构造函数（default constructor），就会被合成一个出来？</p>
</li>
<li><p>编译器合成出来的默认构造函数（default constructor） 会明确设定类内每一个类数据成员的默认值？</p>
</li>
</ul>
<p><strong>以上两个观点都不是真的！！！</strong></p>
<br/>

<p>有四种情况会导致一个类的构造函数是 <strong>non-trivial</strong>，使得编译器必须为没有声明构造函数（constructor）的类合成一个 默认构造函数（default constructor），C++ 规范称之为 <strong>隐式必要默认构造函数（implict nontrivial default constructors）</strong>。合成出来只为了满足编译器需要。</p>
<p>在 <strong>合成的默认构造函数（default constructor）</strong> 中，编译器认为 <strong>基类子对象（base class subobjects） 和 成员类对象（member class objects） 是重要的，会初始化它们</strong>。其它 非静态数据成员等初始化操作应该有编码者自行初始化。</p>
<h3 id="编译器必须合成默认构造函数的4种情形"><a href="#编译器必须合成默认构造函数的4种情形" class="headerlink" title="编译器必须合成默认构造函数的4种情形"></a>编译器必须合成默认构造函数的4种情形</h3><div class="tabs" id="必须合成默认构造函数的4种情形"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#必须合成默认构造函数的4种情形-1">A</button></li><li class="tab"><button type="button" data-href="#必须合成默认构造函数的4种情形-2">B</button></li><li class="tab"><button type="button" data-href="#必须合成默认构造函数的4种情形-3">C</button></li><li class="tab"><button type="button" data-href="#必须合成默认构造函数的4种情形-4">D</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="必须合成默认构造函数的4种情形-1"><p><strong>1、该类中的成员对象（Member Class Object），带有默认构造函数（Default Constructor）</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
  	<span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
  	Foo foo<span class="token punctuation">;</span>	<span class="token comment">// 内含</span>
  	<span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 编译器的行动是：如果 class A 内含一个及以上的 member class</span>
<span class="token comment">// objects， 那么 class A 的每一个 constructor 必须调用每一个</span>
<span class="token comment">// member classes 的 default constructor.</span>
<span class="token comment">// 扩张后的 dafault constructor</span>
<span class="token class-name">Bar</span><span class="token double-colon punctuation">::</span><span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  foo<span class="token punctuation">.</span><span class="token class-name">Foo</span><span class="token double-colon punctuation">::</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 附加上的compiler code</span>
  str <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>				<span class="token comment">// 显式的用户代码</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果存在多个 class member objects要求 constructor 初始化操作，C++ 要求以 { member objects 在 class 中的声明次序 }来调用各个 constructors。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Dopey</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">Dopey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Sneezy</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">Sneezy</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Sneezy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Bashful</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">Bashful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">SnowWhite</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
  	Dopey dopey<span class="token punctuation">;</span>
  	Sneezy sneezy<span class="token punctuation">;</span>
  	Bashful bashful<span class="token punctuation">;</span>
  	<span class="token comment">// ...</span>
  <span class="token keyword">private</span><span class="token operator">:</span>
  	<span class="token keyword">int</span> mumble<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="必须合成默认构造函数的4种情形-2"><p><strong>2、该类派生自带有默认构造函数（Default Constructor）的基类（Base Class）</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="必须合成默认构造函数的4种情形-3"><p><strong>3、该类中存在虚函数（Virtual Function）</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="必须合成默认构造函数的4种情形-4"><p><strong>4、该类的继承链中，存在虚继承，即该类的基类是虚基类（Virtual Base Class）</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h3 id="Copy-Constructor-的建构操作"><a href="#Copy-Constructor-的建构操作" class="headerlink" title="Copy Constructor 的建构操作"></a>Copy Constructor 的建构操作</h3><p>在此，之前，我们需要知道 <strong>Bitwise Copy</strong> 和 <strong>Memberwise Copy</strong> 的区别（参考自 <a href="https://stackoverflow.com/questions/42749439/what-is-the-difference-between-memberwise-copy-bitwise-copy-shallow-copy-and-d%EF%BC%89%EF%BC%9A">https://stackoverflow.com/questions/42749439/what-is-the-difference-between-memberwise-copy-bitwise-copy-shallow-copy-and-d）：</a></p>
<table>
<thead>
<tr>
<th align="center">Bitwise Copy</th>
<th align="center">Memberwise Copy</th>
</tr>
</thead>
<tbody><tr>
<td align="center">浅拷贝的一种形式，通过 <strong>memcopy</strong> 类似的操作实现 <strong>源对象-&gt;目标对象</strong> 的 <strong>按位拷贝</strong>，<strong>不关联类对象的 构造函数（Constructor）调用。</strong></td>
<td align="center">深拷贝的一种形式，<strong>走访每一个对象成员并且显式地拷贝它们，关联调用它们的构造函数（Constructor）</strong>。</td>
</tr>
<tr>
<td align="center">如果类对象被认为是 <strong>trivial</strong>（具备 bitwise copy semantics），没有自定义 拷贝构造函数或者赋值拷贝操作符，执行的是 Bitwise Copy</td>
<td align="center"></td>
</tr>
</tbody></table>
<br/>

<p>一个 class 在下面四种情况会表现出 <u><strong>非 bitwise copy  semantics</strong></u>：</p>
<div class="tabs" id="应该-memberwise-copy-4种情形"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#应该-memberwise-copy-4种情形-1">成员对象含拷贝构造</button></li><li class="tab"><button type="button" data-href="#应该-memberwise-copy-4种情形-2">基类存在拷贝构造</button></li><li class="tab"><button type="button" data-href="#应该-memberwise-copy-4种情形-3">声明了一个或多个虚函数</button></li><li class="tab"><button type="button" data-href="#应该-memberwise-copy-4种情形-4">继承链上有一个或多个虚基类</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="应该-memberwise-copy-4种情形-1"><p>编译器必须将成员对象的拷贝构造调用操作安插在合成的 copy constructor 中。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="应该-memberwise-copy-4种情形-2"><p>编译器必须将基类拷贝构造调用操作安插在合成的 copy constructor 中。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="应该-memberwise-copy-4种情形-3"><p>拷贝操作中，目标对象的 虚函数指针（vptr）必须设定为源对象的 vptr。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="应该-memberwise-copy-4种情形-4"><p>拷贝操作中，目标对象的 虚基类指针（vbptr）必须设定为源对象的 vbptr。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h2 id="Data-语义学（The-Semantics-of-Data）"><a href="#Data-语义学（The-Semantics-of-Data）" class="headerlink" title="Data 语义学（The Semantics of Data）"></a>Data 语义学（The Semantics of Data）</h2><p><code>本章主要讲一般的继承和虚拟继承下类成员变量的内存布局情况、编译器如何对类内成员进行存取等。</code></p>
<h3 id="字节对齐"><a href="#字节对齐" class="headerlink" title="字节对齐"></a>字节对齐</h3><p><code>内存地址 a 被称为 n 字节对齐，a 是 n 的倍数（ n 应是2的幂），也可以理解为当被访问的数据长度为 n 字节时，数据地址为 n 字节对齐。如果内存未对齐，称作 misaligned。</code></p>
<p><code>内存指针是对齐的，如果它所指的数据是对齐的。指向聚合数据（aggregate data，如struct或数组）是对齐的，当且仅当它的每个组成数据是对齐的。</code></p>
<div class="tabs" id="字节对齐"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#字节对齐-1">问题引入</button></li><li class="tab"><button type="button" data-href="#字节对齐-2">为什么要字节对齐</button></li><li class="tab"><button type="button" data-href="#字节对齐-3">字节对齐原则</button></li><li class="tab"><button type="button" data-href="#字节对齐-4">继承下的字节对齐</button></li><li class="tab"><button type="button" data-href="#字节对齐-5">强制字节对齐</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="字节对齐-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> id_<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name_<span class="token punctuation">;</span>
    <span class="token keyword">float</span> salary_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

A a<span class="token punctuation">;</span>
<span class="token comment">// sizeof (a) = ?;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="字节对齐-2"><p>《Windows核心编程》里这样说：当CPU访问正确对齐的数据时，它的运行效率最高，当数据大小的数据模数的内存地址是0时，数据是对齐的。例如：WORD值应该是总是从被2除尽的地址开始，而DWORD值应该总是从被4除尽的地址开始，数据对齐不是内存结构的一部分，而是CPU结构的一部分。当CPU试图读取的数值没有正确的对齐时，CPU可以执行两种操作之一：产生一个异常条件；执行多次对齐的内存访问，以便读取完整的未对齐数据，若多次执行内存访问，应用程序的运行速度就会慢。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="字节对齐-3"><p>在系统默认的对齐方式下，每个成员相对于这个结构体变量地址的偏移量正好是该成员类型所占字节的整数倍，且最终占用字节数为成员类型中最大占用字节数的整数倍。例子中，id_ 的偏移量为 0（0 * 4），name_ 的偏移量为4（1 * 4），salary_ 的偏移量为（2 * 4），总共占用12字节，满足成员中最大占用字节数（ float ）的整数倍（3 * 4）。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="字节对齐-4"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="字节对齐-5"><p>#pragma directive指定对齐的包入（packing）</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>push<span class="token punctuation">)</span>  </span><span class="token comment">/* push current alignment to stack */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     </span><span class="token comment">/* set alignment to 1 byte boundary */</span></span>

<span class="token keyword">struct</span> <span class="token class-name">MyPackedData</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> Data1<span class="token punctuation">;</span>
    <span class="token keyword">long</span> Data2<span class="token punctuation">;</span>
    <span class="token keyword">char</span> Data3<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span>   </span><span class="token comment">/* restore original alignment from stack */</span></span>

<span class="token comment">// 这个结构在32位系统的大小为6字节。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h2 id="Function-语义学（The-Semantics-of-Function）"><a href="#Function-语义学（The-Semantics-of-Function）" class="headerlink" title="Function 语义学（The Semantics of Function）"></a>Function 语义学（The Semantics of Function）</h2><p><code>本章主要讲编译器如何让类成员函数和普通函数一样具有相同的使用效率、编译器为类成员函数做了哪些优化、编译器如何针对单一继承、多重继承和虚继承下的虚函数的区分处理、讨论指向一个类成员函数指针和一个类成员虚函数指针以及多重继承下的类成员函数指针的多态性。</code></p>
<br/>

<h2 id="构造、析构、拷贝语义学（Semantics-of-Construction-Destruction-Copy）"><a href="#构造、析构、拷贝语义学（Semantics-of-Construction-Destruction-Copy）" class="headerlink" title="构造、析构、拷贝语义学（Semantics of Construction, Destruction, Copy）"></a>构造、析构、拷贝语义学（Semantics of Construction, Destruction, Copy）</h2><p><code>本章主要介绍一般无继承情况下，初始化列表在构造函数的扩展方式。介绍多继承、虚继承下，继承链的构造顺序、析构顺序，虚函数表指针 vptr 的设定时机。讨论何时应该设计一个拷贝赋值操作（copy assignment operator）</code></p>
<h3 id="构造语义学"><a href="#构造语义学" class="headerlink" title="构造语义学"></a>构造语义学</h3><p>无继承关系下，C++ 的构造情况：</p>
<div class="tabs" id="无继承关系下的构造情况"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#无继承关系下的构造情况-1">POD 类型</button></li><li class="tab"><button type="button" data-href="#无继承关系下的构造情况-2">抽象数据类型</button></li><li class="tab"><button type="button" data-href="#无继承关系下的构造情况-3">虚析构定义视情况而定</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="无继承关系下的构造情况-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 会被贴上 POD 的标签</span>
<span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">float</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 行为如同 C 一样, global 被视为 临时性定义，</span>
<span class="token comment">// 没有明确定义，这些全局示例会被连接器折叠起来，只留下单独一个实体，</span>
<span class="token comment">// 被放在程序（data segment 中一个特别保留给未初始化的 global 对象使用）</span>
<span class="token comment">// 这个空间叫 BSS (Block Started by Symbol)</span>
Point p<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="无继承关系下的构造情况-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 显式初始化列表</span>
<span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token keyword">float</span> z <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> 
        <span class="token operator">:</span> <span class="token function">x_</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>
    	  <span class="token function">y_</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">float</span> x_<span class="token punctuation">,</span> y_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 可以定义实话为 local object </span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
    Point local<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 编译器层面会有一个优化机制来识别 inline constructors, 提供一个 member-by-member 的常量指定操作</span>
<span class="token comment">// 被附加上 Point 的默认构造函数内联扩展</span>
<span class="token punctuation">&#123;</span>
    Point local<span class="token punctuation">;</span>
    local<span class="token punctuation">.</span>x_ <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
    local<span class="token punctuation">.</span>y_ <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 如果在堆上分配一个 Point 实例对象</span>
<span class="token punctuation">&#123;</span>
    Point <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token keyword">new</span> Point<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//  C++ 伪代码</span>
<span class="token punctuation">&#123;</span>
    Point <span class="token operator">*</span> heap <span class="token operator">=</span> <span class="token function">__new</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>Point<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>heap <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        heap<span class="token operator">-></span><span class="token class-name">Point</span><span class="token double-colon punctuation">::</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 因为没有明确地提供一个 析构 函数实体</span>
<span class="token comment">// 不会调用析构</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> heap<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="无继承关系下的构造情况-3"><p>因为一个类如果定义了虚函数，则每个实例化对象就会要多拥有 一个指向 虚函数表的 vptr，产生膨胀，例子中 Point 的构造函数也会被编译器处理成：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Point<span class="token operator">*</span> <span class="token class-name">Point</span><span class="token double-colon punctuation">::</span><span class="token function">Point</span> <span class="token punctuation">(</span>Point <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 设定 object 的 virtual table pointer （vptr）</span>
    <span class="token keyword">this</span><span class="token operator">-></span>__vptr_Point <span class="token operator">=</span> __vtpr_point<span class="token punctuation">;</span>
    
    <span class="token keyword">this</span><span class="token operator">-></span>x_ <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>y_ <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<p>继承体系下，构造的顺序是先从继承链上的最上层的基类依次往下调用派生类的构造函数来完成。</p>
<br/>

<h3 id="复制语义学"><a href="#复制语义学" class="headerlink" title="复制语义学"></a>复制语义学</h3><p>当我们设计一个 class，我们可以指定种关于复制构造的选择：</p>
<p><code>1、什么都不做，使用默认复制构造。</code></p>
<p><code>2、提供一个显式的 拷贝赋值 operator。</code></p>
<p><code>3、明确拒绝对象给另一个对象的复制构造行为。</code></p>
<p>如果一个类已经有了浅拷贝（bitwise copy）语意，隐式拷贝赋值操作符（copy assignment operator）被视为无效，所以一个类会在如下四种情况表现出深拷贝（memberwise copy）语意：</p>
<p><code>1、当一个 class 内带一个 成员对象，成员对象所属类本身有一个拷贝赋值操作符时。</code></p>
<p><code>2、当一个 class 的基类有一个拷贝赋值操作符时。</code></p>
<p><code>3、当一个 class 声明了任何的 virtual functions（一定不能拷贝右端 class 对象的 vptr 地址，因为可能是一个 继承类对象）。</code></p>
<p><code>4、当一个 class 继承自一个虚基类时（不论 虚基类有没有 copy operator）。</code></p>
<p><strong>尽量不要允许一个虚基类的拷贝操作！！！</strong></p>
<br/>

<h3 id="析构语义学"><a href="#析构语义学" class="headerlink" title="析构语义学"></a>析构语义学</h3><p>析构函数的执行顺序和构造函数的相反：</p>
<p><code>1、当前 class 实例化对象的析构首先被执行。</code></p>
<p><code>2、如果 class 中拥有多个成员对象，成员对象们拥有析构函数，那么它们会以其声明顺序的相反顺序被调用。</code></p>
<p><code>3、如果 class 实例化对象内带一个 vptr，则会被重新设定，指向适当的基类 虚函数表。</code></p>
<p><code>读者注：3说明了为什么基类定义了虚析构函数，在形如 Base* p = new Derived() 时， delete p； 后可以调用到派生类的析构函数，因为 vptr 会被依次调整，找到虚函数表中，各个继承链中虚析构函数来调用。只要基类定义了虚析构函数，继承类的析构函数不管加不加 virtual 关键字，都是虚函数，都会出现在 vtable 中。</code></p>
<br/>

<h2 id="执行期语义学（Runtime-Semantics）"><a href="#执行期语义学（Runtime-Semantics）" class="headerlink" title="执行期语义学（Runtime Semantics）"></a>执行期语义学（Runtime Semantics）</h2><p><code>本章主要讨论程序执行期发生的转换、</code></p>
<br/>

<h2 id="站在对象模型的类端（On-the-Cusp-of-the-Object-Model）"><a href="#站在对象模型的类端（On-the-Cusp-of-the-Object-Model）" class="headerlink" title="站在对象模型的类端（On the Cusp of the Object Model）"></a>站在对象模型的类端（On the Cusp of the Object Model）</h2>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++ 对象模型</tag>
        <tag>拆书系列</tag>
      </tags>
  </entry>
  <entry>
    <title>C++1x 新特性（一）语言可用性的强化</title>
    <url>/2021/04/08/C++%20%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88%E4%B8%80%EF%BC%89%E8%AF%AD%E8%A8%80%E5%8F%AF%E7%94%A8%E6%80%A7%E7%9A%84%E5%BC%BA%E5%8C%96/</url>
    <content><![CDATA[<h1 id="C-1x-新特性（一）语言可用性的强化"><a href="#C-1x-新特性（一）语言可用性的强化" class="headerlink" title="C++1x 新特性（一）语言可用性的强化"></a>C++1x 新特性（一）语言可用性的强化</h1><p><code>本系列主要阐述依据：</code></p>
<p>[<a href="https://github.com/changkun/modern-cpp-tutorial]">https://github.com/changkun/modern-cpp-tutorial]</a>: 《Modern C++ Tutorial: C++11&#x2F;14&#x2F;17&#x2F;20 On the Fly》</p>
<br/>

<h2 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a><strong>nullptr</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>

<span class="token keyword">class</span> <span class="token class-name">MyTestClass</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
   <span class="token function">MyTestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
   <span class="token operator">~</span><span class="token function">MyTestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>MyTestClass<span class="token operator">></span> test_c <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>MyTestClass<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>test_c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> 
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>test_c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>nullptr_t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./test_nullptr 
<span class="token number">8</span>
<span class="token number">16</span>
St10shared_ptrI11MyTestClassE
Dn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a><strong>auto</strong></h2><p>​	<strong><code>注： 不能推导数组类型。</code></strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">auto</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token comment">// 'auto' type cannot appear in top-level array typeC/C++</span>
  <span class="token comment">// auto auto_arr_2[10] = arr;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="constexpr"><a href="#constexpr" class="headerlink" title="constexpr"></a><strong>constexpr</strong></h2><p><code>(1) 拓宽「常量表达式」的范围。</code></p>
<p><code>(2)「显式『要求』表达式编译时求值」。告诉编译器 [我认为我是编译器常量]， 让编译器在需要编译器常量的语义处 [核实我说的是不是真的]。把它放到变量定义前，那么用来初始化这个变量的表达式「必须」是常量表达式，否则报错。</code></p>
<p>参考：<a href="https://www.zhihu.com/question/274323507">https://www.zhihu.com/question/274323507</a></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEN</span> <span class="token expression"><span class="token number">10</span></span></span>

<span class="token keyword">const</span> <span class="token keyword">int</span> kLengh <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

size_t <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 修饰常函数</span>
<span class="token keyword">constexpr</span> size_t <span class="token function">constexpr_length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">constexpr</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token function">arr_1</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token char">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token function">arr_2</span><span class="token punctuation">(</span>LEN<span class="token punctuation">,</span> <span class="token char">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token function">arr_3</span><span class="token punctuation">(</span>kLengh<span class="token punctuation">,</span> <span class="token char">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// expression must have a constant value -- cannot call non-constexpr</span>
    <span class="token comment">// std::array&lt;int, length()> arr_4;</span>

    std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token function">constexpr_length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> arr_5<span class="token punctuation">&#123;</span> <span class="token char">'Y'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 比如用来简化元函数template&lt;class U, class V></span>
<span class="token keyword">constexpr</span> <span class="token keyword">bool</span> is_same_v <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>is_same<span class="token operator">&lt;</span>U<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">;</span>
<span class="token comment">// 调用的时候可以直接</span>
<span class="token keyword">auto</span> x <span class="token operator">=</span> is_same_v<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 用于元编程的常成员：template&lt;class U, class V></span>
<span class="token keyword">struct</span> <span class="token class-name">is_same</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">is_same</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 这样就可以通过</span>
is_same<span class="token operator">&lt;</span>X<span class="token punctuation">,</span> X<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a><strong>decltype</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token comment">// 传统C++ 模板的错误写法</span>
<span class="token comment">// template &lt;typename R, typename T, typename U></span>
<span class="token comment">// R add(T t, U u) &#123;</span>
<span class="token comment">//     return t + u;</span>
<span class="token comment">// &#125;</span>

<span class="token comment">// C++11 称之为尾返回类型（trailing return type）,利用 auto 关键字将返回值后置</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">U</span><span class="token operator">></span>
<span class="token keyword">auto</span> <span class="token function">add</span> <span class="token punctuation">(</span>T t<span class="token punctuation">,</span> U u<span class="token punctuation">)</span> <span class="token comment">/*-> decltype(t + u) //C++14开始自动推导*/</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> t <span class="token operator">+</span> u<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 	<span class="token keyword">auto</span> result <span class="token operator">=</span> <span class="token generic-function"><span class="token function">add</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">5.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
 	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./decltype 
d
<span class="token number">10.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="默认参数模板"><a href="#默认参数模板" class="headerlink" title="默认参数模板"></a><strong>默认参数模板</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">U</span> <span class="token operator">=</span> <span class="token keyword">float</span><span class="token operator">></span>
<span class="token keyword">auto</span> <span class="token function">Add</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> U u<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 	<span class="token keyword">return</span> t <span class="token operator">+</span> u<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="委托构造"><a href="#委托构造" class="headerlink" title="委托构造"></a><strong>委托构造</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token comment">// 委托构造</span>
<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     v1_ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     v2_ <span class="token operator">=</span> value<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">void</span> <span class="token function">tell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1: "</span> <span class="token operator">&lt;&lt;</span> v1_ <span class="token operator">&lt;&lt;</span> <span class="token string">"    v2: "</span><span class="token operator">&lt;&lt;</span> v2_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
     <span class="token keyword">int</span> v1_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token keyword">int</span> v2_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     Base <span class="token function">base</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     base<span class="token punctuation">.</span><span class="token function">tell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./delegating_constructor 
v1: <span class="token number">1</span>    v2: <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p><br/><br/></p>
<h2 id="显示禁用默认函数"><a href="#显示禁用默认函数" class="headerlink" title="显示禁用默认函数"></a><strong>显示禁用默认函数</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 显示禁用默认函数</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">class</span> <span class="token class-name">Magic</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
   <span class="token function">Magic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span> <span class="token comment">// 禁用编译器生成的构造</span>
   Magic<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Magic<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
   <span class="token function">Magic</span><span class="token punctuation">(</span><span class="token keyword">const</span> Magic<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

   <span class="token function">Magic</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Not default constructor."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
         e_ <span class="token operator">=</span> a<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">void</span> <span class="token function">tell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> e_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
   <span class="token keyword">int</span> e_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// the default constructor of "Inequality" </span>
 <span class="token comment">// cannot be referenced</span>
 <span class="token comment">// -- it is a deleted function</span>
 <span class="token comment">//   Inequality m1;</span>
 <span class="token comment">//   m1.tell();</span>

   Magic <span class="token function">m2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   m2<span class="token punctuation">.</span><span class="token function">tell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// function "Magic::Magic(const Magic &amp;other)" </span>
 <span class="token comment">// cannot be referenced</span>
 <span class="token comment">//  -- it is a deleted function</span>
 <span class="token comment">//   Magic m3 = m2;</span>
 <span class="token comment">//   m3.tell();</span>

 <span class="token comment">// function "Magic::operator=(const Magic &amp;)" </span>
 <span class="token comment">// cannot be referenced </span>
 <span class="token comment">// -- it is a deleted function</span>
 <span class="token comment">//   Magic m4(4);</span>
 <span class="token comment">//   m4 = m2;</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./delete_default 
Not default constructor.
<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p><br/><br/></p>
<h2 id="继承构造"><a href="#继承构造" class="headerlink" title="继承构造"></a><strong>继承构造</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//继承构造</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
     <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         v1_ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
     <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         v2_ <span class="token operator">=</span> value<span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>

     <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">tell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1: "</span> <span class="token operator">&lt;&lt;</span> v1_ <span class="token operator">&lt;&lt;</span> <span class="token string">"    v2: "</span><span class="token operator">&lt;&lt;</span> v2_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> 
     <span class="token punctuation">&#125;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
     <span class="token keyword">int</span> v1_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token keyword">int</span> v2_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 构造函数如果需要继承是需要将参数一一传递的，这样会效率低下</span>
<span class="token comment">// using 引入继承构造</span>
<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 	<span class="token keyword">using</span> Base<span class="token double-colon punctuation">::</span>Base<span class="token punctuation">;</span> <span class="token comment">// 继承构造</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Derived <span class="token function">derived</span><span class="token punctuation">(</span><span class="token number">2222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    derived<span class="token punctuation">.</span><span class="token function">tell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./derive_constructor 
v1: <span class="token number">1</span>    v2: <span class="token number">2222</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="显式虚函数重载"><a href="#显式虚函数重载" class="headerlink" title="显式虚函数重载"></a><strong>显式虚函数重载</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">struct</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">final</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Derived_1</span> <span class="token keyword">final</span> <span class="token operator">:</span> <span class="token keyword">public</span> Base <span class="token punctuation">&#123;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 合法</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"override foo: "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// a 'final' class type cannot be used as a base class</span>
<span class="token comment">// struct Derived_2 : Derived_1&#123;</span>

<span class="token comment">// &#125;;</span>

<span class="token keyword">struct</span> <span class="token class-name">Derived_3</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 非法</span>
 <span class="token comment">// virtual void fool() override &#123;</span>

 <span class="token comment">// &#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="std-initializer-list"><a href="#std-initializer-list" class="headerlink" title="std::initializer_list"></a><strong>std::initializer_list<T></strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;initializer_list></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>

<span class="token keyword">class</span> <span class="token class-name">Magic</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Magic</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">list_</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>list_<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list_<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> item  <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> list_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     Magic magic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
     magic<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./initializer_list 
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span>
<span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="enum-class（强枚举类型）"><a href="#enum-class（强枚举类型）" class="headerlink" title="enum class（强枚举类型）"></a><strong>enum class（强枚举类型）</strong></h2><p>​		<code>参考 https://en.cppreference.com/w/cpp/language/enum</code><br>​		<code>参考 https://en.cppreference.com/w/cpp/types/underlying_type</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token comment">// 重载 operator&lt;&lt; 用来输出强类型枚举</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>enable_if<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>is_enum<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span> 
std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">></span><span class="token double-colon punctuation">::</span>type<span class="token operator">&amp;</span> stream<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> stream <span class="token operator">&lt;&lt;</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>underlying_type<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span>type<span class="token operator">></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">Param</span> <span class="token punctuation">&#123;</span>
     kValue1<span class="token punctuation">,</span> 
     kValue2<span class="token punctuation">,</span>
     kValue3 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>
     kValue4 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// no match for ‘operator==’ (operand types are ‘Param’ and ‘int’)</span>
    <span class="token comment">// if(Param::kValue1 == 0) &#123;</span>
    <span class="token comment">//     std::cout &lt;&lt; (int)Param::kValue1 &lt;&lt; std::endl;</span>
    <span class="token comment">// &#125;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>Param<span class="token double-colon punctuation">::</span>kValue3 <span class="token operator">==</span> Param<span class="token double-colon punctuation">::</span>kValue4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Param::kValue3 : "</span> <span class="token operator">&lt;&lt;</span> Param<span class="token double-colon punctuation">::</span>kValue3 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Param::kValue4 : "</span> <span class="token operator">&lt;&lt;</span> Param<span class="token double-colon punctuation">::</span>kValue4 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"It's really fucking Strong!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$./strong_enum 
Param::kValue3 <span class="token builtin class-name">:</span> <span class="token number">100</span>
Param::kValue4 <span class="token builtin class-name">:</span> <span class="token number">100</span>
It's really fucking Strong<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="模板增强"><a href="#模板增强" class="headerlink" title="模板增强"></a><strong>模板增强</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// template_out_file.hpp</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">U</span><span class="token operator">></span>
<span class="token keyword">auto</span> <span class="token function">ImOutsideTemplateAdd</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> U u<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">return</span> t <span class="token operator">+</span> u<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// template_emhance.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"template_out_file.hpp"</span></span>
<span class="token keyword">extern</span> <span class="token keyword">template</span> <span class="token keyword">auto</span> <span class="token generic-function"><span class="token function">ImOutsideTemplateAdd</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">ImOutsideTemplateAdd</span><span class="token punctuation">(</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">5.6</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="Variadic-Template（可变长模板）"><a href="#Variadic-Template（可变长模板）" class="headerlink" title="Variadic Template（可变长模板）"></a><strong>Variadic Template（可变长模板）</strong></h2><p>标准库中的应用示例：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;

&#x2F;&#x2F; 递归终止类模板
template&lt;typename... Args&gt;
struct Tuple;

&#x2F;&#x2F; 递归终止特化
template&lt;&gt;
struct Tuple&lt;&gt; &#123;&#125;;

&#x2F;&#x2F; 递归定义
&#x2F;&#x2F; Tuple&lt;T, Args...&gt; 继承自 Tuple&lt;Args...&gt;，
&#x2F;&#x2F; 并包含一个类型为 T 的成员变量 value。
&#x2F;&#x2F; 构造函数接受一个类型为 T 的参数 v 和一个参数包 args，
&#x2F;&#x2F; 并递归调用 Tuple&lt;Args...&gt; 的构造函数来处理剩余的参数。
template&lt;typename T, typename... Args&gt;
struct Tuple&lt;T, Args...&gt; : private Tuple&lt;Args...&gt; &#123;
    T val_;
    Tuple(T v, Args... args) 
      : Tuple&lt;Args...&gt;(args...), val_(v) &#123;&#125;
&#125;;

int main() &#123;
    Tuple&lt;int, double, char&gt; myTuple(1, 2.5, &#39;a&#39;);
    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>

<span class="token comment">// 参数可以为0</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">Magic</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 参数至少为1</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Required</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span> 
<span class="token keyword">class</span> <span class="token class-name">Magic_1</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>T info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> info <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">magic</span><span class="token punctuation">(</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>



<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">printf</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  	<span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 递归方式 解包</span>
<span class="token comment">// 至少有2个参数时会调用此模板，当只有2个参数时，最终会调用printf&lt;typename T>模板函数</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">printf</span><span class="token punctuation">(</span>T value<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 初始化列表展开 解包</span>
<span class="token comment">// C++14 tricky</span>
<span class="token comment">// 没有C++17之前都是这么干的：(void)std::initializer_list&lt;int>&#123; (func(u), 0)... &#125;;</span>
<span class="token comment">// 包展开语法：模式…，这里的模式是小括号中的部分。一个lambda表达式和value组成的逗号表达式</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">intializer_list_print</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// (1)</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">intializer_list_print</span><span class="token punctuation">(</span>T value<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
     <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span> <span class="token punctuation">(</span><span class="token function">intializer_list_print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// (2) Brace-enclosed initializers</span>
<span class="token comment">// 参考 https://en.cppreference.com/w/cpp/language/parameter_pack</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">intializer_list_print_2</span><span class="token punctuation">(</span>T value<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

 	<span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> args <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">// C++17 fold expression</span>
<span class="token comment">// 参照libcxx的</span>

<span class="token comment">// template &lt;class ..._Tp></span>
<span class="token comment">// _LIBCPP_INLINE_VISIBILITY</span>
<span class="token comment">// void __swallow(_Tp&amp;&amp;...) _NOEXCEPT &#123;&#125; </span>

<span class="token comment">// template &lt;class _Tuple></span>
<span class="token comment">//         _LIBCPP_INLINE_VISIBILITY</span>
<span class="token comment">//         typename enable_if</span>
<span class="token comment">//         &lt;</span>
<span class="token comment">//             __tuple_assignable&lt;_Tuple, tuple&lt;_Tp...> >::value,</span>
<span class="token comment">//             __tuple_impl&amp;</span>
<span class="token comment">//         >::type</span>
<span class="token comment">//         operator=(_Tuple&amp;&amp; __t) _NOEXCEPT_((__all&lt;is_nothrow_assignable&lt;_Tp&amp;, typename tuple_element&lt;_Indx,</span>
<span class="token comment">//                                        typename __make_tuple_types&lt;_Tuple>::type>::type>::value...>::value))</span>
<span class="token comment">//         &#123;</span>
<span class="token comment">//             __swallow(__tuple_leaf&lt;_Indx, _Tp>::operator=(_VSTD::forward&lt;typename tuple_element&lt;_Indx,</span>
<span class="token comment">//                                        typename __make_tuple_types&lt;_Tuple>::type>::type>(_VSTD::get&lt;_Indx>(__t)))...);</span>
<span class="token comment">//             return *this;</span>
<span class="token comment">//         &#125;</span>


<span class="token comment">// 所以可以类似：</span>
<span class="token comment">// C++17 fold exprssion 参考 https://en.cppreference.com/w/cpp/language/fold</span>
<span class="token comment">// __swallow(func(u)...);</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">cxx17_print</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">cxx17_print</span><span class="token punctuation">(</span>T value<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
 	<span class="token function">cxx17_print</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"递归方式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"初始化列表展开方式1："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">intializer_list_print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">1.1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"初始化列表展开方式2："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">intializer_list_print_2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">1.1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"C++17 fold expression:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">cxx17_print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">1.1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./variadic_template 
递归方式：
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">123</span>
<span class="token number">1.1</span>
初始化列表展开方式1：
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">123</span>
<span class="token number">1.1</span>
初始化列表展开方式2：
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">123</span>
<span class="token number">1.1</span>
C++17 <span class="token function">fold</span> expression:
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">123</span>
<span class="token number">1.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Modern C++</tag>
        <tag>C++11</tag>
        <tag>C++14</tag>
        <tag>C++17</tag>
      </tags>
  </entry>
  <entry>
    <title>C++1x 新特性（二）语言运行时的强化</title>
    <url>/2021/04/09/C++%20%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AF%AD%E8%A8%80%E8%BF%90%E8%A1%8C%E6%97%B6%E7%9A%84%E5%BC%BA%E5%8C%96/</url>
    <content><![CDATA[<h1 id="C-1x-新特性（二）语言运行时的强化"><a href="#C-1x-新特性（二）语言运行时的强化" class="headerlink" title="C++1x 新特性（二）语言运行时的强化"></a>C++1x 新特性（二）语言运行时的强化</h1><p><code>本系列主要阐述依据：</code></p>
<p>[<a href="https://github.com/changkun/modern-cpp-tutorial]">https://github.com/changkun/modern-cpp-tutorial]</a>: 《Modern C++ Tutorial: C++11&#x2F;14&#x2F;17&#x2F;20 On the Fly》</p>
<br/>

<h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a><strong>lambda</strong></h2><p><code>[捕获列表] (参数列表) mutable(可选) 异常属性 -&gt; 返回类型 &#123;       // 函数体 &#125;</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

<span class="token keyword">void</span> <span class="token function">TestReferenceCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">bool</span> change <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token keyword">auto</span> value_capture <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"改变？"</span> <span class="token operator">+</span> change <span class="token operator">+</span> <span class="token string">" 值捕获： "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> reference_capture <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"改变？"</span> <span class="token operator">+</span> change <span class="token operator">+</span> <span class="token string">" 引用捕获： "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token comment">// 改变kvalue的值</span>
  value <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
  change <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

  <span class="token function">value_capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">reference_capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// C++14 表达式捕获</span>
<span class="token comment">// 允许捕获的成员用任意的表达式进行初始化，允许右值捕获</span>
<span class="token keyword">void</span> <span class="token function">TestRvalueCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> important <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 泛型lambda since C++14, auto关键字产生意义上的泛型， 不需要 -> 返回类型</span>
  <span class="token keyword">auto</span> add <span class="token operator">=</span> <span class="token punctuation">[</span>v1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> v2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>important<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token comment">/*-> int*/</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>v2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">+</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">TestReferenceCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">TestRvalueCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./lambda 
改变？0 值捕获： <span class="token number">1</span>
改变？1 引用捕获： <span class="token number">10000</span>
<span class="token number">10008</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="move-semantics（移动语义）"><a href="#move-semantics（移动语义）" class="headerlink" title="move semantics（移动语义）"></a><strong>move semantics（移动语义）</strong></h2><p><code>移动语义的出现解决了传统C++没有区分移动和拷贝而导致造成大量数据复制的问题。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token keyword">int</span><span class="token operator">*</span> ptr_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

 <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ptr_</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"默认构造"</span>  <span class="token operator">+</span> ptr_ <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token comment">// 存在无意义的对象拷贝</span>
 <span class="token function">A</span><span class="token punctuation">(</span>A<span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ptr_</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">.</span>ptr_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"拷贝构造"</span>  <span class="token operator">+</span> ptr_<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token function">A</span><span class="token punctuation">(</span>A<span class="token operator">&amp;&amp;</span> a<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ptr_</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>ptr_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        a<span class="token punctuation">.</span>ptr_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"移动构造"</span> <span class="token operator">+</span> ptr_<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"析构"</span> <span class="token operator">+</span> ptr_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> ptr_<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 这样定义能防止编译器优化</span>
<span class="token comment">// 函数返回后会产生一个将亡值，被A的移动构造 A(A&amp;&amp;) 引用，从而延长生命周期，</span>
<span class="token comment">// 并将这个右值中的指针拿到，保存到 A obj 中， 之后将亡值的指针会被置为 nullptr， </span>
<span class="token comment">// 防止了这块内存域被销毁，</span>
<span class="token comment">// 从而别免了无意义的拷贝构造，增强性能。 </span>
A <span class="token function">Get_A</span><span class="token punctuation">(</span><span class="token keyword">bool</span> test<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   A a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
   <span class="token keyword">return</span> test <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

   A obj <span class="token operator">=</span> <span class="token function">Get_A</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">LOG</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>ptr_<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token operator">*</span>obj<span class="token punctuation">.</span>ptr_<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// std::vector 例子</span>
   std<span class="token double-colon punctuation">::</span>string str <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>
   std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>

   v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// str 为 "xxx"</span>
   <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"拷贝传参后的str: "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 如果使用如下，str将被置为空。</span>
   v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// str 为 ""</span>
   <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"移动传参后的str: "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./move_semantics 
默认构造0x5578c3559eb0
默认构造0x5578c355a2e0
拷贝构造0x5578c355a300
析构0x5578c355a2e0
析构0x5578c3559eb0
0x5578c355a300
<span class="token number">1</span>
拷贝传参后的str: xxx
移动传参后的str: 
析构0x5578c355a300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="std-bind"><a href="#std-bind" class="headerlink" title="std::bind"></a><strong>std::bind</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span>

<span class="token keyword">int</span> <span class="token function">Calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_add<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 	<span class="token keyword">return</span> is_add <span class="token operator">?</span> x <span class="token operator">+</span> y <span class="token operator">:</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 将部分调用参数提前提前绑定到函数身上，成为一个新的对象，</span>
<span class="token comment">// 然后在参数齐全后完成调用、</span>
<span class="token comment">// 使用std::placeholders::_1对第3位参数进行占位，如果多个占位，依次为_1, _2, _3, ...</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">auto</span> bind_calculate <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span>Calculate<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>placeholders<span class="token double-colon punctuation">::</span>_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">bind_calculate</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="std-forward"><a href="#std-forward" class="headerlink" title="std::forward"></a><strong>std::forward</strong></h2><p><code>完美转发, 为了在传递参数的时候保持原来的参数类型（左引用保持左引用，右引用保持右引用）</code></p>
<br/>

<p><em><strong>坍缩规则：</strong></em></p>
<table>
<thead>
<tr>
<th align="center">数形参类型</th>
<th align="center">实参参数类型</th>
<th align="center">推导后的函数形参类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">T&amp;</td>
<td align="center">左引用</td>
<td align="center">T&amp;</td>
</tr>
<tr>
<td align="center">T&amp;</td>
<td align="center">右引用</td>
<td align="center">T&amp;</td>
</tr>
<tr>
<td align="center">T&amp;&amp;</td>
<td align="center">左引用</td>
<td align="center">T&amp;</td>
</tr>
<tr>
<td align="center">T&amp;&amp;</td>
<td align="center">右引用</td>
<td align="center">T&amp;&amp;</td>
</tr>
</tbody></table>
<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 前面提到，声明一个右值引用其实是一个左值 std::string&amp;&amp; rs = "xx" + "yy";</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

<span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"      左值引用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"      右值引用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">pass</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"    --普通传参"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">forward_pass</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"    --普通传参"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 单纯的将左值转化为右值。</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"    --move 传参。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">log</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 单纯将参数做了类型转换, 由std::forward的实现得知。</span>
    <span class="token comment">/* 
  template&lt;typename _Tp>
      constexpr _Tp&amp;&amp;
      forward(typename std::remove_reference&lt;_Tp>::type&amp; __t) noexcept
      &#123; return static_cast&lt;_Tp&amp;&amp;>(__t); &#125;
  */</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"    --forward 传参。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">log</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">></span></span></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"传递右值:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pass</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 虽然传递右值1，但是对于pass(v)的参数v来说，v是一个（右值）引用，同时也是左值</span>

    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"传递左值:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token function">pass</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// value是左引用，为什么能调用到pass(T&amp;&amp; v) ？ 如上表格坍缩规则。</span>

    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 无论传递 左值（2）, 还是右值（f_value），普通传参都会将参数作为左值进行转发。</span>
    <span class="token comment">// 所以std::move总会接到一个左值，从而转发调用 log(int&amp;&amp; )输出右值引用。</span>
    <span class="token comment">// std::forward 没有造成多余的拷贝， 同时完美转发（传递）了函数实参给了内部调用的其他函数。</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"传递右值:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">forward_pass</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"传递左值:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> f_value <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
    <span class="token function">forward_pass</span><span class="token punctuation">(</span>f_value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./std_forward 
传递右值:
 --普通传参
   左值引用
传递左值:
 --普通传参
   左值引用
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
传递右值:
 --普通传参
   左值引用
 <span class="token parameter variable">--move</span> 传参。
   右值引用
 <span class="token parameter variable">--forward</span> 传参。
   右值引用
传递左值:
 --普通传参
   左值引用
 <span class="token parameter variable">--move</span> 传参。
   右值引用
 <span class="token parameter variable">--forward</span> 传参。
   左值引用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="std-function"><a href="#std-function" class="headerlink" title="std::function"></a><strong>std::function</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

<span class="token comment">// old</span>
<span class="token keyword">using</span> foo <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 函数指针的调用是非类型安全的</span>
<span class="token keyword">void</span> <span class="token function">excecute_f</span><span class="token punctuation">(</span>foo f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">Oldman</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">LOG</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">excecute_f</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//new</span>
<span class="token keyword">int</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> para<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> para<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 函数容器 将函数、函数指针作为对象处理，是一种通用、多态的函数封装，类型安全</span>
<span class="token keyword">void</span> <span class="token function">Coolman</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> func_1 <span class="token operator">=</span> print<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> func_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">func_1</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token function">func_2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Oldman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Coolman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./std_function 
<span class="token number">3</span>
<span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="std-move"><a href="#std-move" class="headerlink" title="std::move"></a><strong>std::move</strong></h2><p><code>左值: 符号左边的值，是表达式（不一定是赋值表达式）后依然存在的持久对象。</code></p>
<p><code>右值: 表达式结束后就不存在的临时对象。</code></p>
<p><code>纯右值: 纯粹的字面量，如 10, true, 1+2, ..</code></p>
<p><code>将亡值: 即将被销毁、却能够被移动的值。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> tmp <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

  <span class="token comment">// v是左值， foo()就是右值，也是纯右值</span>
  <span class="token comment">// 对于foo()产生的返回值作为一个临时值，一旦被v复制后，就无法获取和修改</span>
  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// std::move() 将左值参数无条件的转换成右值</span>
<span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"左值： "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;&amp;</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"右值： "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>string ls1 <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>
    <span class="token comment">// an rvalue reference cannot be bound to an lvalue</span>
    <span class="token comment">// std::string&amp;&amp; rs2 = ls1;</span>

    std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;&amp;</span> rs2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>ls1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 常量左值引用延长临时变量的生命周期， 但是ls3不可修改</span>
    <span class="token comment">// initial value of reference to non-const must be an lvalue</span>
    <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> ls3 <span class="token operator">=</span> ls1 <span class="token operator">+</span> ls1<span class="token punctuation">;</span> 
    <span class="token comment">// ls3 += "yyy";</span>

    <span class="token comment">// 右值引用延长生命周期，可以定义为非常量引用，可修改。</span>
    std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;&amp;</span> rs4 <span class="token operator">=</span> ls1 <span class="token operator">+</span> rs2<span class="token punctuation">;</span>
    rs4 <span class="token operator">+=</span> <span class="token string">"yyy"</span><span class="token punctuation">;</span>

    <span class="token comment">// rs4虽然引用了一个右值，但是由于它是一个引用，所以它依然是一个左值。</span>
    <span class="token function">log</span><span class="token punctuation">(</span>rs4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./std_move 
左值： xxxxxxyyy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Modern C++</tag>
        <tag>C++11</tag>
        <tag>C++14</tag>
        <tag>C++17</tag>
      </tags>
  </entry>
  <entry>
    <title>C++1x 新特性（三）对标准库的扩充</title>
    <url>/2021/04/10/C++%20%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E6%89%A9%E5%85%85/</url>
    <content><![CDATA[<h1 id="C-1x-新特性（三）对标准库的扩充"><a href="#C-1x-新特性（三）对标准库的扩充" class="headerlink" title="C++1x 新特性（三）对标准库的扩充"></a>C++1x 新特性（三）对标准库的扩充</h1><p><code>本系列主要阐述依据：</code></p>
<p>[<a href="https://github.com/changkun/modern-cpp-tutorial]">https://github.com/changkun/modern-cpp-tutorial]</a>: 《Modern C++ Tutorial: C++11&#x2F;14&#x2F;17&#x2F;20 On the Fly》</p>
<br/>

<h2 id="std-array"><a href="#std-array" class="headerlink" title="std::array"></a><strong>std::array</strong></h2><br/>

<p><em><strong>std::array 和 std::vector 的区别</strong></em></p>
<table>
<thead>
<tr>
<th align="center">std::array</th>
<th align="center">std::vector</th>
</tr>
</thead>
<tbody><tr>
<td align="center">栈内存</td>
<td align="center">堆内存</td>
</tr>
<tr>
<td align="center">灵活访问，更高性能</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">更现代</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">编译时会创建一个固定的数组</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">不能够隐式转成指针（注意！！！）</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>​                                                                  </p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>

<span class="token comment">// C风格的接口</span>
<span class="token keyword">void</span> <span class="token function">c_test</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">></span> arr_1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token comment">// 无法转换成 C 风格指针传递！</span>
  <span class="token comment">// no suitable conversion function from "std::array&lt;int, 5UL>" to "int *" exists</span>
  <span class="token comment">// c_test(arr_1, arr_1.size());</span>

  <span class="token comment">// struct std::array&lt;int, &lt;error-constant>></span>
  <span class="token comment">// int len = 5;</span>
  <span class="token keyword">constexpr</span> <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> len<span class="token operator">></span> arr_2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>arr_2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr_2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="std-forward-list"><a href="#std-forward-list" class="headerlink" title="std::forward_list"></a><strong>std::forward_list</strong></h2><table>
<thead>
<tr>
<th align="center">std::list</th>
<th align="center">std::forward_list</th>
</tr>
</thead>
<tbody><tr>
<td align="center">双向链表</td>
<td align="center">单链表</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">不支持随机访问， O(1)复杂度插入</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">唯一一个不提供size()的容器</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">不需要双向迭代时，更高的空间利用率</td>
</tr>
</tbody></table>
<br/>

<br/>                                                                                                                                                   

<h2 id="std-tuple"><a href="#std-tuple" class="headerlink" title="std::tuple"></a><strong>std::tuple</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/variant.hpp></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;variant></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

<span class="token comment">// 用于求取 tuple size</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">auto</span> <span class="token function">tuple_size</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> tpl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>tuple_size<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 借助 boost::variant 实现 </span>
<span class="token comment">// 参考 https://www.boost.org/doc/libs/1_75_0/doc/html/variant.html</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span>size_t n<span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
boost<span class="token double-colon punctuation">::</span>variant<span class="token operator">&lt;</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span> <span class="token function">_tuple_index</span><span class="token punctuation">(</span>size_t i<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>tuple<span class="token operator">&lt;</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span><span class="token operator">&amp;</span> tpl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>n<span class="token operator">></span></span></span><span class="token punctuation">(</span>tpl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>Args<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span><span class="token string">"越界！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> _tuple_index<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">n</span> <span class="token generic class-name"><span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>Args<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> tpl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 用于获取指定索引的 tuple 元素值</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
boost<span class="token double-colon punctuation">::</span>variant<span class="token operator">&lt;</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span> <span class="token function">tuple_index</span><span class="token punctuation">(</span>size_t i<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>tuple<span class="token operator">&lt;</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span><span class="token operator">&amp;</span> tpl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">return</span> <span class="token generic-function"><span class="token function">_tuple_index</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> tpl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token keyword">auto</span> student <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">make_tuple</span><span class="token punctuation">(</span><span class="token string">"Liming"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token char">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">constexpr</span> <span class="token keyword">int</span> i_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i_1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> i_2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">// std::get&lt;> 依赖的是编译期的常量</span>
<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"姓名： "</span> <span class="token operator">+</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>i_0<span class="token operator">></span></span></span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"年龄： "</span> <span class="token operator">+</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>i_1<span class="token operator">></span></span></span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"成绩： "</span> <span class="token operator">+</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>i_2<span class="token operator">></span></span></span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>
<span class="token keyword">char</span> grade<span class="token punctuation">;</span>

<span class="token comment">// 利用std::tie 进行元组拆包， std::ignore忽略某个元素</span>
std<span class="token double-colon punctuation">::</span><span class="token function">tie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>ignore<span class="token punctuation">,</span> grade<span class="token punctuation">)</span> <span class="token operator">=</span> student<span class="token punctuation">;</span>
<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"姓名： "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"成绩： "</span> <span class="token operator">+</span> grade<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 元组合并</span>
<span class="token keyword">auto</span> teacher <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">make_tuple</span><span class="token punctuation">(</span><span class="token string">"Miss Li"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> concat <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">tuple_cat</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 元组遍历</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token function">tuple_size</span><span class="token punctuation">(</span>concat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token function">tuple_index</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> concat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./std_tuple 
姓名： Liming
年龄： <span class="token number">18</span>
成绩： B
姓名： Liming
成绩： B
Liming
<span class="token number">18</span>
B
Miss Li
<span class="token number">25</span>
A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="std-unordered-map"><a href="#std-unordered-map" class="headerlink" title="std::unordered_map"></a><strong>std::unordered_map</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"容器类型： "</span> <span class="token operator">+</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"Key: "</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>first <span class="token operator">+</span> <span class="token string">"  Value: "</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 无序</span>
std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> unordered <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 
  <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 有序</span>
std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> ordered <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 
  <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token function">log</span><span class="token punctuation">(</span>unordered<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>ordered<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./std_unordered_map 
容器类型： St13unordered_mapIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4hashIiESt8equal_toIiESaISt4pairIKiS5_EEE
Key: <span class="token number">2</span>  Value: two
Key: <span class="token number">3</span>  Value: three
Key: <span class="token number">4</span>  Value: four
Key: <span class="token number">1</span>  Value: one
容器类型： St3mapIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIiESaISt4pairIKiS5_EEE
Key: <span class="token number">1</span>  Value: one
Key: <span class="token number">2</span>  Value: two
Key: <span class="token number">3</span>  Value: three
Key: <span class="token number">4</span>  Value: four<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="std-unordered-set"><a href="#std-unordered-set" class="headerlink" title="std::unordered_set"></a><strong>std::unordered_set</strong></h2><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">set</th>
<th align="center">unordered_set</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center">升序（默认）</td>
<td align="center">无序</td>
</tr>
<tr>
<td align="center">实现</td>
<td align="center">RB Tree</td>
<td align="center">Hash Table</td>
</tr>
<tr>
<td align="center">查找时间复杂度</td>
<td align="center">log(n)</td>
<td align="center">best O(1) -&gt; O(n)  worst</td>
</tr>
<tr>
<td align="center">插入时间复杂度</td>
<td align="center">log(n) + Rebalance</td>
<td align="center">同上</td>
</tr>
<tr>
<td align="center">删除时间复杂度</td>
<td align="center">log(n) + Rebalance</td>
<td align="center">同上</td>
</tr>
</tbody></table>
<h1 id=""><a href="#" class="headerlink" title=""></a><strong><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/C++新特性/unordered_set.png"/></strong></h1>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Modern C++</tag>
        <tag>C++11</tag>
        <tag>C++14</tag>
        <tag>C++17</tag>
      </tags>
  </entry>
  <entry>
    <title>C++17 新特性</title>
    <url>/2021/05/08/C++%20%E6%96%B0%E7%89%B9%E6%80%A7/C++17%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="C-17-新特性"><a href="#C-17-新特性" class="headerlink" title="C++17 新特性"></a>C++17 新特性</h1><p><code>本篇章主要是根据:</code></p>
<p>《C++17 STL Cookbook》以及 <a href="https://dl.acm.org/doi/10.1145/3386320">https://dl.acm.org/doi/10.1145/3386320</a> 中，Bjarne Stroustrup 对 C++ 特性文章 《Thriving in a crowded and changing world: C++ 2006–2020》 的阐述。</p>
<br/>

<h2 id="Class-template-argument-deduction（类模板参数推导）"><a href="#Class-template-argument-deduction（类模板参数推导）" class="headerlink" title="Class template argument deduction（类模板参数推导）"></a><strong>Class template argument deduction（类模板参数推导）</strong></h2><p><code>C++17 能让 [编译器] 自动的从所调用的构造函数，推导出模板类型。</code></p>
<p><code>std::make_shared 、std::make_unique、std::make_pair、std::make_tuple 这些工厂函数在 C++17中过时了。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// C++17 之前</span>
std<span class="token double-colon punctuation">::</span>pair <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">></span> <span class="token function">my_pair</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span> <span class="token function">my_tuple</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">12.3</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// C++17</span>
std<span class="token double-colon punctuation">::</span>pair <span class="token function">my_pair</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>tuple <span class="token function">my_tuple</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">12.3</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>当然，还存在一些不能依赖类型推导的情况，在此例子开始之前，先引入模板中推导指引的概念。</code></p>
<p><strong><code>[注]：下面涉及到的 推导指引（Deduction Guides）的内容，详情可参考《C++ Template snd Edition》--David Vandevoorde, Nocolai M, Josuttis, Douglas Gregor.第二章模板类型推到关于 Deduction Guides 的介绍。</code></strong></p>
<p><code>推导指引：提供额外的模板参数推断规则，或者修正已有的模板参数推断规则。</code></p>
<p><code>比如，你可以定义，当传入一个 C 风格字符串时，用 std::string 实例化 Stack 模板类：</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> pdfCore <span class="token punctuation">&#123;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>vecotr<span class="token operator">&lt;</span>T<span class="token operator">></span> elements_<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Stack</span><span class="token punctuation">(</span>T es<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">elements_</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 指引语句必须出现在和模板类定义的同一个作用域或者 namespace 里</span>
<span class="token function">Stack</span><span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token operator">-></span> Stack<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// ->后面的类型被称为 "guided type"</span>

<span class="token punctuation">&#125;</span> <span class="token comment">// namespace pdfCore</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>不能依赖类型推导的情况：</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span></span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>

<span class="token keyword">class</span> <span class="token class-name">Sum</span> <span class="token punctuation">&#123;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// 实例化模板的时候，不显式指定，由编译器推导</span>
    T value_<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数接受任意数量参数，并想加起来赋给 成员 value_</span>
    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span>
    <span class="token function">Sum</span><span class="token punctuation">(</span>Ts<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token operator">:</span> value_ <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>values <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 推导指引（Deduction Guides），告诉编译器用 std::common_type_t 的特性，</span>
<span class="token comment">// 能找到适合所有值的共同类型</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span>
<span class="token function">Sum</span><span class="token punctuation">(</span>Ts<span class="token operator">&amp;&amp;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ts<span class="token punctuation">)</span> <span class="token operator">-></span> Sum<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>common_type_t<span class="token operator">&lt;</span>Ts<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 不同类型参数</span>
    Sum value <span class="token punctuation">&#123;</span> <span class="token number">1u</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4.0f</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>value_<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// std::string 和C 风格字符串</span>
    Sum str <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"World!"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>value_<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./default_deduction 
<span class="token number">10</span>
Hello World<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<br/>

<br/>

<h2 id="Fold-expressions-（折叠表达式）"><a href="#Fold-expressions-（折叠表达式）" class="headerlink" title="Fold expressions （折叠表达式）"></a><strong>Fold expressions （折叠表达式）</strong></h2><table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left"><strong>语法</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">一元右折叠</td>
<td align="left">( <em><code>形参包 op ...</code></em> )</td>
</tr>
<tr>
<td align="left">一元左折叠</td>
<td align="left">( <em><code>... op 形参包</code></em> )</td>
</tr>
<tr>
<td align="left">二元右折叠</td>
<td align="left">( <em><code>形参包 op ... op 初值</code></em> )</td>
</tr>
<tr>
<td align="left">二元左折叠</td>
<td align="left">( <em><code>初值 op ... op 形参包</code></em> )</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><em>op</em></th>
<th>-</th>
<th>任何下列 32 个<em>二元</em>运算符之一：+ - * &#x2F; % ^ &amp; | &#x3D; &lt; &gt; &lt;&lt; &gt;&gt; +&#x3D; -&#x3D; <em>&#x3D; &#x2F;&#x3D; %&#x3D; ^&#x3D; &amp;&#x3D; |&#x3D; &lt;&lt;&#x3D; &gt;&gt;&#x3D; &#x3D;&#x3D; !&#x3D; &lt;&#x3D; &gt;&#x3D; &amp;&amp; || , .</em> -&gt;*。在二元折叠中，两个 <em>op</em> 必须相同。</th>
</tr>
</thead>
<tbody><tr>
<td><em>形参包</em></td>
<td>-</td>
<td>含未展开的<a href="https://zh.cppreference.com/w/cpp/language/parameter_pack">形参包</a>且其顶层不含有<a href="https://zh.cppreference.com/w/cpp/language/operator_precedence">优先级</a>低于转型（正式而言，是 <em>转型表达式</em>）的运算符的表达式</td>
</tr>
<tr>
<td><em>初值</em></td>
<td>-</td>
<td>不含未展开的<a href="https://zh.cppreference.com/w/cpp/language/parameter_pack">形参包</a>且其顶层不含有<a href="https://zh.cppreference.com/w/cpp/language/operator_precedence">优先级</a>低于转型（正式而言，是 <em>转型表达式</em>）的运算符的表达式</td>
</tr>
</tbody></table>
<p><strong><code>注意开与闭括号是折叠表达式的一部分。</code></strong></p>
<p><code>参数包的位置即代表左折叠 (ts + ...) 还是右折叠 (... + ts)。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">STR</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>string <span class="token punctuation">&#123;</span>str<span class="token punctuation">&#125;</span></span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span>
<span class="token keyword">auto</span> <span class="token function">Add</span><span class="token punctuation">(</span>Ts <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> <span class="token punctuation">(</span>ts <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">int</span> add_int <span class="token operator">=</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">LOG</span><span class="token punctuation">(</span>add_int<span class="token punctuation">)</span><span class="token punctuation">;</span>
 std<span class="token double-colon punctuation">::</span>string result <span class="token operator">=</span> <span class="token function">Add</span><span class="token punctuation">(</span> <span class="token function">STR</span><span class="token punctuation">(</span><span class="token string">"how "</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">STR</span><span class="token punctuation">(</span><span class="token string">"are "</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">STR</span><span class="token punctuation">(</span><span class="token string">"you "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./fold_add 
<span class="token number">15</span>
how  are you <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p><code>有了折叠表达式，类型如下的例子功能实现变得简洁许多：</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>


<span class="token comment">// 统计 string / vector / set / list array 等容器中，</span>
<span class="token comment">// 包含某些元素的个数情况</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span>
<span class="token keyword">auto</span> <span class="token function">CountContains</span><span class="token punctuation">(</span><span class="token keyword">const</span> R<span class="token operator">&amp;</span> container<span class="token punctuation">,</span> Ts <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">count</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">end</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">,</span> ts<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 对 set 实现批量插入功能</span>
<span class="token comment">// 当参数包的某个元素插入失败，根据 &amp;&amp; 远算符的短路特性，</span>
<span class="token comment">// 会总之插入剩余元素</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span>
<span class="token keyword">bool</span> <span class="token function">InsertAll</span><span class="token punctuation">(</span>R <span class="token operator">&amp;</span>set<span class="token punctuation">,</span> Ts <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">.</span>second <span class="token operator">&amp;&amp;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 检查给定的多个变量是否在某个范围内</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span>
<span class="token keyword">bool</span> <span class="token function">IsAllWithin</span><span class="token punctuation">(</span>R min<span class="token punctuation">,</span> R max<span class="token punctuation">,</span> Ts <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>min <span class="token operator">&lt;=</span> ts <span class="token operator">&amp;&amp;</span> ts <span class="token operator">&lt;=</span> max<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 std<span class="token double-colon punctuation">::</span>string str <span class="token punctuation">&#123;</span><span class="token string">"aabbccddeeffgg"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count_abc <span class="token operator">=</span> <span class="token function">CountContains</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span>count_abc<span class="token punctuation">)</span><span class="token punctuation">;</span>

 std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> my_set <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">InsertAll</span><span class="token punctuation">(</span>my_set<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"set 批量插入元素后 ： "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>my_set<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> my_set<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">LOG</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./fold_expressions 
<span class="token number">6</span>
<span class="token builtin class-name">set</span> 批量插入元素后 ： 
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span>
<span class="token number">5</span>
<span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<br/>

<br/>

 

<br/>

<br/>

<h2 id="Structured-bindings-（结构化绑定）"><a href="#Structured-bindings-（结构化绑定）" class="headerlink" title="Structured bindings （结构化绑定）"></a><strong>Structured bindings （结构化绑定）</strong></h2><p><code>auto [var1, var2, ...] = &lt; pair, tuple, struct, 固定长度数组&gt;</code></p>
<p><strong><code>注意个数要匹配。</code></strong></p>
<p><code>和 std::tie 相比，std::tie 进行赋值的时候，所有变量需要提前定义，但是可以使用 std::ignore 作为虚拟变量。所以，要根据实际需求选择使用。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token function">Float2Int</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

std<span class="token double-colon punctuation">::</span>tuple <span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">></span> <span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_tuple</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"李丽"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token char">'S'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//打印信息</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
 <span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token punctuation">&#123;</span>
 std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>
 <span class="token keyword">int</span> age<span class="token punctuation">;</span>
 <span class="token keyword">char</span> grade<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">const</span> <span class="token keyword">auto</span> result <span class="token operator">=</span> <span class="token function">Float2Int</span><span class="token punctuation">(</span><span class="token number">1.2f</span><span class="token punctuation">,</span> <span class="token number">2.3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pair 形式: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>first<span class="token punctuation">,</span> result<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">auto</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Float2Int</span><span class="token punctuation">(</span><span class="token number">13.0f</span><span class="token punctuation">,</span> <span class="token number">16.05f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pair 结构化绑定: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"tuple 结构化绑定: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// 初始化一个结构体列表</span>
 std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>student<span class="token operator">></span> class_one <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
     <span class="token punctuation">&#123;</span><span class="token string">"Xiaoming"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
     <span class="token punctuation">&#123;</span><span class="token string">"Xiaohong"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token char">'S'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
     <span class="token punctuation">&#123;</span><span class="token string">"DaWei"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token char">'B'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"结构化绑定的方式遍历列表: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// 可以是 auto, const auto, const auto&amp;, auto&amp;&amp;，适当使用引用，减少不必要的拷贝。 </span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade<span class="token punctuation">]</span> <span class="token operator">:</span> class_one<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token function">log</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./structure_bind 
pair 形式: 
<span class="token number">1</span>
<span class="token number">2</span>
pair 结构化绑定: 
<span class="token number">13</span>
<span class="token number">16</span>
tuple 结构化绑定: 
李丽
<span class="token number">18</span>
S
结构化绑定的方式遍历列表: 
Xiaoming
<span class="token number">21</span>
A
Xiaohong
<span class="token number">20</span>
S
DaWei
<span class="token number">22</span>
B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="将变量作用于限制在-if-和-switch-内"><a href="#将变量作用于限制在-if-和-switch-内" class="headerlink" title="将变量作用于限制在 if 和 switch 内"></a><strong>将变量作用于限制在 if 和 switch 内</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">></span> mapper <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
     <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'1'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
     <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token char">'2'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
     <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token char">'3'</span><span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token function">result</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> result <span class="token operator">!=</span> mapper<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"map 存在 key (3)."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>


 <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">case</span> <span class="token char">'a'</span><span class="token operator">:</span> 
         std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"左转"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
         <span class="token keyword">break</span><span class="token punctuation">;</span>
     <span class="token keyword">case</span> <span class="token char">'d'</span><span class="token operator">:</span> 
         std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"右转"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
         <span class="token keyword">break</span><span class="token punctuation">;</span>
     <span class="token keyword">case</span> <span class="token char">'w'</span><span class="token operator">:</span> 
         std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"前进"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
         <span class="token keyword">break</span><span class="token punctuation">;</span>
     <span class="token keyword">case</span> <span class="token char">'s'</span><span class="token operator">:</span> 
         std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"后退"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
         <span class="token keyword">break</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./condition_in_if 
map 存在 key <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>.
w
前进<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p><code>平时还可以这么用：</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>lock_guard <span class="token function">locker</span><span class="token punctuation">(</span>my_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">"符合条件"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// do ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token function">share_p</span> <span class="token punctuation">(</span>weak_p<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>share_p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// share 对象依然存在， do...</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 对象不存在，share_p 为 nullptr</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="variant"><a href="#variant" class="headerlink" title="variant"></a><strong>variant</strong></h2><p><strong><code>variant&lt;T, U&gt; :  holds a T or a U</code></strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;variant></span></span>

<span class="token comment">// 定义具有3个重载operator() 的 functor</span>
<span class="token keyword">struct</span> <span class="token class-name">SOutput</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span><span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

 <span class="token comment">// 第一可以是int/double/string的 vriant y</span>
 std<span class="token double-colon punctuation">::</span>variant<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> y<span class="token punctuation">;</span>

    <span class="token comment">// 赋值为 int</span>
    y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
     std<span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token function">SOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 赋值为 double</span>
    y <span class="token operator">=</span> <span class="token number">23.0</span><span class="token punctuation">;</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token function">SOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 赋值为 string</span>
    y <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token function">SOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 可以使用 std::get获取值，但是要对应上，比如现在y是string</span>
    <span class="token comment">// 类型不对会抛出异常 std::bad_variant_access e</span>
 std<span class="token double-colon punctuation">::</span>string str <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span></span></span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

 <span class="token comment">// 也可以用 std::get_if</span>
    <span class="token keyword">int</span><span class="token operator">*</span> value <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get_if</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"类型不匹配！"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"正确取值："</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./2_variant 
<span class="token number">1</span>
<span class="token number">23</span>
hello
hello
类型不匹配！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;variant></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span> 
<span class="token keyword">struct</span> <span class="token class-name">CustomOutput</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">Ts</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">using</span> <span class="token class-name">Ts</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span> 
<span class="token function">CustomOutput</span><span class="token punctuation">(</span> Ts <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">-></span> CustomOutput <span class="token operator">&lt;</span> Ts <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">></span><span class="token punctuation">;</span>


<span class="token keyword">void</span> <span class="token function">Use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//  定义 variant 类型的 vector</span>
    <span class="token keyword">using</span> var_t <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>variant <span class="token operator">&lt;</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">></span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>var_t<span class="token operator">></span> vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20L</span><span class="token punctuation">,</span> <span class="token number">30.40</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    CustomOutput out_put <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 输出 int, long</span>
        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">auto</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> arg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token comment">// 输出 double</span>
        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">double</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> arg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token comment">// 输出 string</span>
        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> arg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">// 遍历</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span> var <span class="token operator">:</span> vec <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std <span class="token double-colon punctuation">::</span> <span class="token function">visit</span><span class="token punctuation">(</span>out_put<span class="token punctuation">,</span> var <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./variant 
<span class="token number">10</span>
<span class="token number">20</span>
<span class="token number">30.4</span>
hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="optional"><a href="#optional" class="headerlink" title="optional"></a><strong>optional</strong></h2><p><strong><code>optional&lt;T&gt; : holds a T or nothing</code></strong></p>
<blockquote>
<pre class="line-numbers language-Cpp" data-language="Cpp"><code class="language-Cpp">optional &lt; int &gt; var1 &#x3D; 7;
auto x1 &#x3D; * var1 ;       &#x2F;&#x2F; 取值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</blockquote>
<br/>

<br/>

<h2 id="any"><a href="#any" class="headerlink" title="any"></a><strong>any</strong></h2><p><strong><code>any : holds any type</code></strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">any var3 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> x3 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">any_cast</span> <span class="token generic class-name"><span class="token operator">&lt;</span> <span class="token keyword">int</span> <span class="token operator">></span></span></span><span class="token punctuation">(</span> var3 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="的初始化规则"><a href="#的初始化规则" class="headerlink" title="{} 的初始化规则"></a><strong>{} 的初始化规则</strong></h2><p><strong><code>不允许使用：auto var &#123;v1, v2, v3, ...&#125;</code></strong></p>
<p><strong><code>相比另一种合法使用的方式：auto var = &#123;v1, v2, v3, ...&#125; 因为这会调用std::initializer_list&lt;T&gt;进行初始化。</code></strong></p>
<p><strong><code>其中，v1, v2, v3, ... 必须是同等类型 T。</code></strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 对于初始化，&#123;&#125; 与 () 调用构造函数初始化的方式，</span>
<span class="token comment">// 不同点在于 &#123;&#125; 没有类型的隐式转换</span>
<span class="token keyword">auto</span> <span class="token function">var1</span><span class="token punctuation">(</span><span class="token number">3.00f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> var2<span class="token punctuation">&#123;</span><span class="token number">3.0f</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span>  <span class="token keyword">typeid</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>enndl<span class="token punctuation">;</span> <span class="token comment">// i</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>enndl<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment">// f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>对于只支持 C++11、C++14 的编译器，auto x&#123; 123 &#125; 的类型可能会推导成整型，也可能会推导成std::initializer_list&lt;int&gt;.</code></p>
<p><code>所以会存在可移植性的问题。</code></p>
<br/>

<br/>

<h2 id="inline-variables-（内联变量）"><a href="#inline-variables-（内联变量）" class="headerlink" title="inline variables （内联变量）"></a><strong>inline variables （内联变量）</strong></h2><p><code>解决对于库文件 .hpp 中 定义了一个静态变量，这个头文件被多个 .cpp包含后链接阶段报错问题。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// xxx.hpp</span>
<span class="token keyword">class</span> <span class="token class-name">Rect</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// yyy.cpp </span>
include <span class="token string">"xxx.hpp"</span>

<span class="token comment">// zzz.cpp</span>
include <span class="token string">"xxx.hpp"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>C++17 之前为了修复类似的问题， 会这么做：</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// xxx.hpp</span>
<span class="token keyword">class</span> <span class="token class-name">Rect</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">GetX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> x<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>为了修复这个问题，添加 inline 关键字，从而避免符号重定义问题：</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// xxx.hpp</span>
<span class="token keyword">class</span> <span class="token class-name">Rect</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="constexpr-if"><a href="#constexpr-if" class="headerlink" title="constexpr-if"></a><strong>constexpr-if</strong></h2><p><code>constexpr-if 的工作机制与传统的 if-else 类似。不同点在于，constexpr-if 是编译时进行判断，if-else 是运行时判断。</code></p>
<p><code>使用 constexpr-if 的代码编译完成后，程序的这一部分代码不会有分支存在，这种方式其实类似于 #if-#else的预编译方式进行宏替换，但是，constexpr-if 更优雅。</code></p>
<p><strong><code>正如 《C++17 in Detail》里所说，All the complicated syntax of std::enable_if went away..., if constexpr evaluates the condition and only one block will be compiled.</code></strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> std <span class="token double-colon punctuation">::</span> cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span></span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">Addable</span> <span class="token punctuation">&#123;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    T val_<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Addable</span><span class="token punctuation">(</span>T v<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val_</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>

    <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> val_<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">U</span><span class="token operator">></span>
    T <span class="token function">add</span><span class="token punctuation">(</span>U x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span>  <span class="token keyword">constexpr</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>U<span class="token operator">>></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
            <span class="token keyword">auto</span> copy <span class="token punctuation">&#123;</span>val_<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> item <span class="token operator">:</span> copy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                item <span class="token operator">+=</span> x<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> copy<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> val_ <span class="token operator">+</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 实例化不同类型的 Addable 对象，调用加法函数。</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span>Addable<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">add</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Addable<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> iv <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    iv<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">add</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> item <span class="token operator">:</span> iv<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">LOG</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./constexpr_if 
<span class="token number">3</span>
<span class="token number">1</span>
<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Modern C++</tag>
        <tag>C++17</tag>
      </tags>
  </entry>
  <entry>
    <title>C++1x 新特性（四）智能指针</title>
    <url>/2021/04/18/C++%20%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88%E5%9B%9B%20%EF%BC%89%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h1 id="C-1x-新特性（四）智能指针"><a href="#C-1x-新特性（四）智能指针" class="headerlink" title="C++1x 新特性（四）智能指针"></a>C++1x 新特性（四）智能指针</h1><p><code>本系列主要阐述依据：</code></p>
<p><a href="https://github.com/changkun/modern-cpp-tutorial">《Modern C++ Tutorial: C++11&#x2F;14&#x2F;17&#x2F;20 On the Fly》</a></p>
<p>关于智能指针的源码剖析：<a href="https://blog.csdn.net/weixin_43798887/article/details/116464334">https://blog.csdn.net/weixin_43798887/article/details/116464334</a>  </p>
<p>​											<a href="https://www.jianshu.com/p/b6ac02d406a0">https://www.jianshu.com/p/b6ac02d406a0</a></p>
<br/>

<h2 id="RAII-（资源获取即初始化）"><a href="#RAII-（资源获取即初始化）" class="headerlink" title="RAII （资源获取即初始化）"></a><strong>RAII （资源获取即初始化）</strong></h2><p><code>存在中途抛出异常等情况导致 new 和 delete 带来的的内存泄露问题。 </code></p>
<br/>

<br/>

<h2 id="auto-ptr"><a href="#auto-ptr" class="headerlink" title="auto_ptr"></a>auto_ptr</h2><p><code>C++98提供的智能指针，现在废弃，用具有基本相同效果、更高安全性的 unique_ptr 替代。</code></p>
<table>
<thead>
<tr>
<th>auto_ptr</th>
<th>unique_ptr</th>
</tr>
</thead>
<tbody><tr>
<td>对于数组类型只会调用 delete 释放</td>
<td>可以正确处理数组类型，会调用 delete[] 释放</td>
</tr>
<tr>
<td>std::auto_ptr<int> p(new int);                                            std::auto_ptr<int> p2 &#x3D; p;  &#x2F;&#x2F; 隐式移交所有权</td>
<td>std::unique_ptr<int> p(new int); std::unique_ptr<int> p2 &#x3D; std::move(p);  &#x2F;&#x2F; 显式移交所有权</td>
</tr>
</tbody></table>
<br/>

<br/>

<h2 id="std-shared-ptr"><a href="#std-shared-ptr" class="headerlink" title="std::shared_ptr"></a><strong>std::shared_ptr</strong></h2><table>
<thead>
<tr>
<th>操作</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>make_shared<T>(args)</td>
<td>工厂构造函数</td>
</tr>
<tr>
<td>p &#x3D; q</td>
<td>p 和 q 可以互相转换的智能指针，该操作会减少 p 的引用计数， 增加 q 的引用计数，如果 p 的引用计数为 0，会释放当前 p 指向的对象。</td>
</tr>
<tr>
<td>shared_ptr<T> p(q)</td>
<td>q 可以转换成 T* 类型，智能指针 p 是 q 的拷贝，这会增加 q 的引用计数。</td>
</tr>
<tr>
<td>p.unique()</td>
<td>如果p.use_count &#x3D;&#x3D; 1, 返回 <code>true</code> （C++17 deprecated, C++20 removed）</td>
</tr>
<tr>
<td>p.use_count()</td>
<td>查看对象当前的引用计数</td>
</tr>
</tbody></table>
<br/>

<h3 id="简单实现-一个-shared-ptr"><a href="#简单实现-一个-shared-ptr" class="headerlink" title="简单实现 一个 shared_ptr"></a>简单实现 一个 shared_ptr</h3><div class="tabs" id="shared_ptr-的简单实现"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#shared_ptr-的简单实现-1">代码实现</button></li><li class="tab"><button type="button" data-href="#shared_ptr-的简单实现-2">示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="shared_ptr-的简单实现-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 简单实现一个 shared_ptr</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">class</span> <span class="token class-name">RefCount</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">RefCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">use_count_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">RefCount</span><span class="token punctuation">(</span><span class="token keyword">const</span> RefCount<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

    RefCount<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> RefCount<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

    <span class="token operator">~</span><span class="token function">RefCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        use_count_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> use_count_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 重载前置/后置自增</span>
    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token operator">++</span>use_count_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
 
    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      use_count_<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
 
    <span class="token comment">// 重载前置/后置自减</span>
    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token operator">--</span>use_count_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      use_count_<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 重载 &lt;&lt; 操作</span>
    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> RefCount<span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        os <span class="token operator">&lt;&lt;</span> <span class="token string">"当前引用值为: "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>use_count_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> os<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> use_count_ <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token comment">// usinged int weak_count_ &#123;&#125;;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">SharedPtr</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// 显式构造</span>
    <span class="token keyword">explicit</span> <span class="token function">SharedPtr</span><span class="token punctuation">(</span>T<span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        raw_ptr_ <span class="token operator">=</span> ptr<span class="token punctuation">;</span>
        ref_count_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">RefCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token punctuation">(</span><span class="token operator">*</span>ref_count_<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 拷贝构造</span>
    <span class="token function">SharedPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> SharedPtr<span class="token operator">&amp;</span> sp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        raw_ptr_ <span class="token operator">=</span> sp<span class="token punctuation">.</span>raw_ptr_<span class="token punctuation">;</span>
        ref_count_ <span class="token operator">=</span> sp<span class="token punctuation">.</span>ref_count_<span class="token punctuation">;</span>
        <span class="token operator">++</span><span class="token punctuation">(</span><span class="token operator">*</span>ref_count_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    T<span class="token operator">*</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> raw_ptr_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> ref_count_<span class="token operator">-></span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token operator">~</span><span class="token function">SharedPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">--</span><span class="token punctuation">(</span><span class="token operator">*</span>ref_count_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ref_count_<span class="token operator">-></span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">delete</span> ref_count_<span class="token punctuation">;</span>
            <span class="token keyword">delete</span> raw_ptr_<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">*</span>raw_ptr_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    T<span class="token operator">*</span> <span class="token keyword">operator</span><span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> raw_ptr_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> SharedPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> sp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        os <span class="token operator">&lt;&lt;</span> <span class="token string">"所指对象地址： "</span> <span class="token operator">&lt;&lt;</span> sp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        os <span class="token operator">&lt;&lt;</span> <span class="token string">"引用计数： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>sp<span class="token punctuation">.</span>ref_count_<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> os<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    T<span class="token operator">*</span>              raw_ptr_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    RefCount<span class="token operator">*</span>       ref_count_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="shared_ptr-的简单实现-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"SharedPtr.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    SharedPtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sp1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sp1<span class="token punctuation">;</span>
    <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"进入局部作用域...\r\n\n"</span><span class="token punctuation">;</span>
        SharedPtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sp2</span><span class="token punctuation">(</span>sp1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sp1<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sp2<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"离开局部作用域...\r\n\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sp1<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./TestSmartPointer 
所指对象地址： 0x557de5ef9eb0
引用计数： 当前引用值为: <span class="token number">1</span>

进入局部作用域<span class="token punctuation">..</span>.
所指对象地址： 0x557de5ef9eb0
引用计数： 当前引用值为: <span class="token number">2</span>

所指对象地址： 0x557de5ef9eb0
引用计数： 当前引用值为: <span class="token number">2</span>

离开局部作用域<span class="token punctuation">..</span>.
所指对象地址： 0x557de5ef9eb0
引用计数： 当前引用值为: <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<p><strong>shared_ptr 引用计数参考：</strong> <a href="https://blog.csdn.net/weixin_43798887/article/details/116464334">https://blog.csdn.net/weixin_43798887/article/details/116464334</a> </p>
<br/>

<p><code>std::shared_ptr 通过 get() 获取原始指针， reset() 减少一个引用计数， get_count()查看一个对象当前的引用计数。 </code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 记录有多少个share_ptr共同指向一个对象</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">print_use_count</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> p<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LOG</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">".use_count() = "</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token keyword">auto</span> p1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>
<span class="token keyword">auto</span> p3 <span class="token operator">=</span> p1<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>q <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不会增加引用计数</span>

<span class="token keyword">auto</span> print_all <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
  <span class="token function">print_use_count</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print_use_count</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> <span class="token string">"p2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print_use_count</span><span class="token punctuation">(</span>p3<span class="token punctuation">,</span> <span class="token string">"p3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token function">print_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"reset p2 之后:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p2<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"reset p3 之后:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p3<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./share_ptr 
p1.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span>
p2.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span>
p3.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span>
reset p2 之后： 
p1.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>
p2.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
p3.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>
reset p3 之后： 
p1.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
p2.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
p3.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="shared-ptr-new-T-args…-和-std-make-shared-args…"><a href="#shared-ptr-new-T-args…-和-std-make-shared-args…" class="headerlink" title="shared_ptr(new T(args…)) 和 std::make_shared(args…)"></a>shared_ptr(new T(args…)) 和 std::make_shared<T>(args…)</h3><p><a href="https://devblogs.microsoft.com/oldnewthing/20230815-00/?p=108602">https://devblogs.microsoft.com/oldnewthing/20230815-00/?p=108602</a></p>
<p><a href="https://www.quora.com/What-is-the-scenario-where-C-make_shared-is-better-than-shared_ptr-constructor">https://www.quora.com/What-is-the-scenario-where-C-make_shared-is-better-than-shared_ptr-constructor</a></p>
<br/>

<h2 id="std-unique-ptr"><a href="#std-unique-ptr" class="headerlink" title="std::unique_ptr"></a><strong>std::unique_ptr</strong></h2><table>
<thead>
<tr>
<th>操作</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>unique_ptr&lt;T, D&gt;u</td>
<td>D 为指定的释放方法用于替代 delete</td>
</tr>
<tr>
<td>u.release()</td>
<td>u 让出 对所持对象的控制权，返回出来，并置 u 为 nullptr</td>
</tr>
<tr>
<td>u.reset()</td>
<td>删除 u 指向对象</td>
</tr>
<tr>
<td>u.reset(q)</td>
<td>如果 q 有效 令 u 指向 q</td>
</tr>
</tbody></table>
<br/>

<p><strong>简单实现 unique_ptr</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// TODO</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>

<p><code>是一种独占指针，禁止其他智能指针与其共享同一个对象，从而保证代码安全。</code></p>
<p><code>独占，意味着，不可复制。但是，我们可以利用 std::move() 移交给其他 unique_ptr。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// Move constructor.</span>
<span class="token function">unique_ptr</span><span class="token punctuation">(</span>unique_ptr<span class="token operator">&amp;&amp;</span> __u<span class="token punctuation">)</span> <span class="token keyword">noexcept</span>
 <span class="token operator">:</span> <span class="token function">_M_t</span><span class="token punctuation">(</span>__u<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>deleter_type<span class="token operator">></span></span></span><span class="token punctuation">(</span>__u<span class="token punctuation">.</span><span class="token function">get_deleter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Assignment.</span>

<span class="token comment">/** @brief Move assignment operator.
*
* @param __u  The object to transfer ownership from.
*
* Invokes the deleter first if this object owns a pointer.
*/</span>
unique_ptr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>unique_ptr<span class="token operator">&amp;&amp;</span> __u<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">&#123;</span>
    <span class="token function">reset</span><span class="token punctuation">(</span>__u<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">get_deleter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>deleter_type<span class="token operator">></span></span></span><span class="token punctuation">(</span>__u<span class="token punctuation">.</span><span class="token function">get_deleter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><strong>使用示例</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

 std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// auto p2 = p1; // 非法</span>

 <span class="token comment">// 利用std::move转移独占权</span>
 <span class="token keyword">auto</span> p3 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1 移交独占权后，为空！"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./unique_ptr 
p1移交独占权后，为空！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="std-weak-ptr"><a href="#std-weak-ptr" class="headerlink" title="std::weak_ptr"></a><strong>std::weak_ptr</strong></h2><table>
<thead>
<tr>
<th>操作</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>weak_ptr<T> w(sp)</td>
<td>sp 为可以和 T 互转的 shared_ptr</td>
</tr>
<tr>
<td>w.reset()</td>
<td>让 w 为空</td>
</tr>
<tr>
<td>w.expired()</td>
<td>如果 w.use_count() &#x3D;&#x3D; 0， 返回 <code>true</code></td>
</tr>
<tr>
<td>w.lock()</td>
<td>如果 expired() 为 <code>true</code>,返回 nullptr， 否则返回 w 所指向对象的 shared_ptr</td>
</tr>
</tbody></table>
<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">shared_ptr<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">shared_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>nothrow<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token function">sp</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 cout <span class="token operator">&lt;&lt;</span> <span class="token string">"对象不为空"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 cout <span class="token operator">&lt;&lt;</span> <span class="token string">"nullptr"</span>；
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><code>std::weak_ptr 要解决的是 std::shared_ptr存在的强引用带来的的资源无法释放的问题。 </code></p>
<p><code>没有 * 和 -&gt; 运算符，所以不能够对资源进行操作，expired() 在资源未被释放时返回 true。</code></p>
<br/>

<p><strong>循环引用例子</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~A()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  shared_ptr<span class="token operator">&lt;</span>B<span class="token operator">></span> b<span class="token punctuation">;</span> <span class="token comment">// 指向 B 对象的智能指针</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token operator">~</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~B()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  shared_ptr<span class="token operator">&lt;</span>A<span class="token operator">></span> a<span class="token punctuation">;</span> <span class="token comment">// 指向 A 对象的智能指针</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  shared_ptr<span class="token operator">&lt;</span>A<span class="token operator">></span> <span class="token function">ptra</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// a 指向 A 对象，A 的引用计数为 1</span>
  shared_ptr<span class="token operator">&lt;</span>B<span class="token operator">></span> <span class="token function">ptrb</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// b 指向 B 对象，B 的引用计数为 1</span>
  ptra<span class="token operator">-></span>b <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token comment">// A 对象的成员变量_ptrb也指向 B 对象，B 的引用计数为 2</span>
  ptrb<span class="token operator">-></span>a <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">// B 对象的成员变量_ptra也指向 A 对象，A 的引用计数为 2</span>

  cout <span class="token operator">&lt;&lt;</span> ptra<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 打印A的引用计数结果:2</span>
  cout <span class="token operator">&lt;&lt;</span> ptrb<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 打印B的引用计数结果:2</span>

  <span class="token comment">/*
  离开 main 函数作用域，ptra 和 ptrb 两个局部对象析构，分别给 A 对象和
   B 对象的引用计数从 2 减到 1，达不到释放 A 和 B 的条件（释放的条件是
  A 和 B 的引用计数为 0，因此造成两个new出来的A和B对象无法释放，导致内存泄露
  */</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>a 、b 被销毁后，A，B依然被强引用无法释放</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/C%2B%2B%E6%96%B0%E7%89%B9%E6%80%A7/pointers1_en.png">

<br/>

<p><strong>使用弱引用指针 std::weak_ptr， 不会引起引用计数的增加。</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/C%2B%2B%E6%96%B0%E7%89%B9%E6%80%A7/pointers2.png">

<br/>

<p><strong>weak_ptr 是怎么解决 循环引用的问题？</strong></p>
<p><code>当 use_count() == 0 或者 weak_count() == 0 时，释放资源。具体参考：</code><a href="https://blog.csdn.net/weixin_43798887/article/details/116464334">https://blog.csdn.net/weixin_43798887/article/details/116464334</a>  </p>
<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 解决 std::share_ptr带来的强引用无法释放的问题。</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>B<span class="token operator">></span> ptr_b<span class="token punctuation">;</span>
<span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"A 被销毁。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>A<span class="token operator">></span> ptr_a<span class="token punctuation">;</span>
<span class="token operator">~</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"B 被销毁。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">strong_referrence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">auto</span> a <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>A<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> b <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>B<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 存在循环引用</span>
<span class="token comment">// use_count() 永远不会等于 0, 不会调用各自的析构函数</span>
a<span class="token operator">-></span>ptr_b <span class="token operator">=</span> b<span class="token punctuation">;</span>
b<span class="token operator">-></span>ptr_a <span class="token operator">=</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">strong_referrence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 强引用存在的情况</span>

std<span class="token double-colon punctuation">::</span>weak_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> weak_p<span class="token punctuation">;</span>

<span class="token comment">// std::weak_ptr 没有 * 运算符 和 -> 运算符，不能够对资源进行操作</span>
<span class="token comment">// expired() 方法 用于判断资源是否被释放</span>
<span class="token keyword">auto</span> observer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">=</span> weak_p<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
         <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"资源被释放!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token punctuation">&#123;</span>
     <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"进入某个作用域赋值。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">auto</span> p1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     weak_p <span class="token operator">=</span> p1<span class="token punctuation">;</span>
     <span class="token function">observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"离开某个作用域。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./weak_ptr 
进入某个作用域赋值。
<span class="token number">100</span>
离开某个作用域。
资源被释放<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h2 id="std-enable-shared-from-this"><a href="#std-enable-shared-from-this" class="headerlink" title="std::enable_shared_from_this"></a>std::enable_shared_from_this</h2><ul>
<li><code>shared_from_this()</code> 返回 一个指向 <code>this</code> 的  <code>shared_ptr</code>。</li>
<li><code>weak_from_this()</code> 返回一个指向 <code>this</code> 的 <code>weak_ptr</code>。</li>
<li><code>A class T can inherit from enable_shared_from_this&lt;T&gt; to inherit the shared_from_this member functions that obtain a shared_ptr instance pointing to *this.</code></li>
</ul>
<br/>

<p><strong>要解决的问题</strong></p>
<p>1、当类 A 被 <code>shared_ptr</code> 管理，且在类 A 的成员函数里需要把当前类对象作为参数传给其他函数时，就需要传递一个指向自身的 <code>share_ptr</code>。为了防止智能指针的语义被破坏，不直接传递 <code>this</code> 指针。</p>
<p>2、不直接传递 <code>shared_ptr&lt;this&gt;</code>，因为这样会造成多个非共享的 <code>shared_ptr</code> 指向同一个对象，未增加引用计数导对象被析构多次，如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">class</span> <span class="token class-name">Bad</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Bad<span class="token operator">></span> <span class="token function">getptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">shared_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>Bad<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token operator">~</span><span class="token function">Bad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bad::~Bad() called"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 错误点：每个 shared_ptr 都认为自己是对象仅有的所有者</span>
  std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Bad<span class="token operator">></span> <span class="token function">bp1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Bad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Bad<span class="token operator">></span> bp2 <span class="token operator">=</span> bp1<span class="token operator">-></span><span class="token function">getptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 打印bp1和bp2的引用计数</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"bp1.use_count() = "</span> <span class="token operator">&lt;&lt;</span> bp1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"bp2.use_count() = "</span> <span class="token operator">&lt;&lt;</span> bp2<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br/>

<p><strong>使用方式</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyObject</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> std<span class="token double-colon punctuation">::</span><span class="token class-name">enable_shared_from_this</span><span class="token operator">&lt;</span><span class="token class-name">MyObject</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>MyObject<span class="token operator">></span> <span class="token function">pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">shared_from_this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">auto</span> p1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>MyObject<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">auto</span> p2 <span class="token operator">=</span> p1<span class="token operator">-></span><span class="token function">pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">auto</span> p3 <span class="token operator">=</span> p1<span class="token operator">-></span><span class="token function">shared_from_this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 MyObject unshared<span class="token punctuation">;</span>
 <span class="token keyword">auto</span> p4 <span class="token operator">=</span> unshared<span class="token punctuation">.</span><span class="token function">shared_from_this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Throws std::bad_weak_ptr</span>
 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong>对动态数组使用只能指针</strong></p>
<table>
<thead>
<tr>
<th>unique_ptr&lt;int[]&gt; up(new int[10]);</th>
<th>shared_ptr<int> sp(new int[10], [](int *p) { delete[] p; });</th>
</tr>
</thead>
<tbody><tr>
<td>可以 up[i] 索引访问</td>
<td></td>
</tr>
<tr>
<td>up.release() 会自动使用 delete[] 删除</td>
<td>sp.reset(), 调用自定义的 deleter.</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Modern C++</tag>
        <tag>C++11</tag>
        <tag>C++14</tag>
        <tag>C++17</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《STL源码剖析》关联式容器（associative containers）</title>
    <url>/2021/06/19/C++%20STL/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8%EF%BC%88associative%20containers%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《STL源码剖析》序列式容器（sequence-containers）"><a href="#《STL源码剖析》序列式容器（sequence-containers）" class="headerlink" title="《STL源码剖析》序列式容器（sequence containers）"></a>《STL源码剖析》序列式容器（sequence containers）</h1><p><code>参考自《STL 源码剖析》-侯捷著。</code></p>
<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8.png">



<h2 id="RB-Tree"><a href="#RB-Tree" class="headerlink" title="RB-Tree"></a>RB-Tree</h2><p><code>RB-Tree 性质</code></p>
<p><code>1、每个节点不是红色就是黑色。</code></p>
<p><code>2、根节点为黑色。</code></p>
<p><code>3、如果节点为红色，其子节点必须为黑色。</code></p>
<p><code>4、任一节点到 NULL（树尾端）的任何路径所含黑色节点必须相同。</code></p>
<p><code>5、根据上述规则，新增节点必须为红色，新增节点的父节点必须为黑色。</code></p>
<p><code>ps：为了方便处理，视 NULL 节点为黑色节点。</code></p>
<br/>

<br/>

<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><br/>

<br/>

<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><br/>

<br/> 

<h2 id="hashtable"><a href="#hashtable" class="headerlink" title="hashtable"></a>hashtable</h2><br/>

<br/>

<h2 id="unordered-set（hash-set）"><a href="#unordered-set（hash-set）" class="headerlink" title="unordered_set（hash_set）"></a>unordered_set（hash_set）</h2><br/>

<br/>

<h2 id="unordered-map（hash-map）"><a href="#unordered-map（hash-map）" class="headerlink" title="unordered_map（hash_map）"></a>unordered_map（hash_map）</h2><br/>

<br/>

<h2 id="unordered-multiset（hash-multiset）"><a href="#unordered-multiset（hash-multiset）" class="headerlink" title="unordered_multiset（hash_multiset）"></a>unordered_multiset（hash_multiset）</h2><br/>

<br/>

<h2 id="unordered-multimap（hash-multimap）"><a href="#unordered-multimap（hash-multimap）" class="headerlink" title="unordered_multimap（hash_multimap）"></a>unordered_multimap（hash_multimap）</h2><br/>

<br/>]]></content>
      <categories>
        <category>C++ STL</category>
      </categories>
      <tags>
        <tag>拆书系列</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《STL 源码剖析》仿函数（functors）</title>
    <url>/2021/07/08/C++%20STL/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E4%BB%BF%E5%87%BD%E6%95%B0%EF%BC%88functors%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《STL源码剖析》仿函数（functors）"><a href="#《STL源码剖析》仿函数（functors）" class="headerlink" title="《STL源码剖析》仿函数（functors）"></a>《STL源码剖析》仿函数（functors）</h1><p><code>参考自《STL 源码剖析》-侯捷著。</code></p>
<br/>]]></content>
      <categories>
        <category>C++ STL</category>
      </categories>
      <tags>
        <tag>拆书系列</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《STL 源码剖析》概述</title>
    <url>/2021/06/08/C++%20STL/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="拆书系列之《STL源码剖析》概述"><a href="#拆书系列之《STL源码剖析》概述" class="headerlink" title="拆书系列之《STL源码剖析》概述"></a>拆书系列之《STL源码剖析》概述</h1><p><code>参考自《STL 源码剖析》-侯捷著。</code></p>
<br/>

<h2 id="1、容器（container）"><a href="#1、容器（container）" class="headerlink" title="1、容器（container）"></a>1、容器（container）</h2><p>各种数据结构，如 <code>vector， list，deque，set，map</code>等。</p>
<p>从实现角度看，<strong>STL容器是一种 class template</strong>。</p>
<br/>

<h2 id="2、算法（algorithms）"><a href="#2、算法（algorithms）" class="headerlink" title="2、算法（algorithms）"></a>2、算法（algorithms）</h2><p>如<code> sort，search，copy，erase</code>等。</p>
<p>从实现角度看，<strong>STL 算法是一种 function template</strong>。</p>
<h2 id="3、迭代器（iterators）"><a href="#3、迭代器（iterators）" class="headerlink" title="3、迭代器（iterators）"></a>3、迭代器（iterators）</h2><p>容器域算法之间的胶水，所谓的“泛型指针”。</p>
<p>从实现角度看，<strong>是一种将 <code>operator*，operator-&gt;，operator++， operator-- </code>等指针操作给予重载的 calss template</strong>。</p>
<br/>

<h2 id="4、仿函数（functors）"><a href="#4、仿函数（functors）" class="headerlink" title="4、仿函数（functors）"></a>4、仿函数（functors）</h2><p>行为类似函数，可以作为算法的<code>某种策略（policy）</code>。</p>
<p>从实现角度来看，<strong>仿函数是一种重载了 <code>operator()</code> 的 class 或者 class template</strong>。</p>
<br/>

<h2 id="5、配接器（adapters）"><a href="#5、配接器（adapters）" class="headerlink" title="5、配接器（adapters）"></a>5、配接器（adapters）</h2><p>一种用来修饰容器（containers）或者仿函数（functors）或者迭代器（iterators）接口的东西。</p>
<br/>

<h2 id="6、配置器（allocators）"><a href="#6、配置器（allocators）" class="headerlink" title="6、配置器（allocators）"></a>6、配置器（allocators）</h2><p>负责空间配置与管理。</p>
<p>从实现角度来看，<strong>配置器是一个实现了动态空间配置，空间管理、空间释放的 class template</strong>。</p>
<br/>

<h2 id="STL六大组件的交互关系"><a href="#STL六大组件的交互关系" class="headerlink" title="STL六大组件的交互关系"></a>STL六大组件的交互关系</h2><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/STL%E5%85%AD%E5%A4%A7%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BA%A4%E4%BA%92%E5%85%B3%E7%B3%BB.png">

<br/>

<h2 id="STL-各种容器"><a href="#STL-各种容器" class="headerlink" title="STL 各种容器"></a>STL 各种容器</h2><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/%E5%90%84%E7%A7%8D%E5%AE%B9%E5%99%A8%E6%A6%82%E8%A7%88.png">
]]></content>
      <categories>
        <category>C++ STL</category>
      </categories>
      <tags>
        <tag>拆书系列</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《STL源码剖析》序列式容器（sequence containers）</title>
    <url>/2021/06/18/C++%20STL/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E5%BA%8F%E5%88%97%E5%BC%8F%E5%AE%B9%E5%99%A8%EF%BC%88sequence%20containers%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《STL源码剖析》序列式容器（sequence-containers）"><a href="#《STL源码剖析》序列式容器（sequence-containers）" class="headerlink" title="《STL源码剖析》序列式容器（sequence containers）"></a>《STL源码剖析》序列式容器（sequence containers）</h1><p><code>参考自《STL 源码剖析》-侯捷著。</code></p>
<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/%E5%BA%8F%E5%88%97%E5%BC%8F%E5%AE%B9%E5%99%A8.png">

<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p><code>vector 的实现技术，关键在于其对大小的控制和重新配置时到的数据移动效率。</code></p>
<br/>

<h3 id="vector-代码摘要（GCC-版本）"><a href="#vector-代码摘要（GCC-版本）" class="headerlink" title="vector 代码摘要（GCC 版本）"></a>vector 代码摘要（GCC 版本）</h3><p><code>stl_vector.h 定义的 vector 会调用到 vector.tcc 里的模板方法，基本以如 _M_xxx_xxx_xxx() 命名。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> <span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">vector</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">protected</span> <span class="token class-name">_Vector_base</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token class-name">_Alloc</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token keyword">typedef</span> _Tp      value_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Base</span><span class="token double-colon punctuation">::</span>pointer                 pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc_traits</span><span class="token double-colon punctuation">::</span>const_pointer  const_pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc_traits</span><span class="token double-colon punctuation">::</span>reference       eference<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc_traits</span><span class="token double-colon punctuation">::</span>const_reference    const_reference<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> __gnu_cxx<span class="token double-colon punctuation">::</span>__normal_iterator<span class="token operator">&lt;</span>pointer<span class="token punctuation">,</span> vector<span class="token operator">></span> iterator<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> __gnu_cxx<span class="token double-colon punctuation">::</span>__normal_iterator<span class="token operator">&lt;</span>const_pointer<span class="token punctuation">,</span> vector<span class="token operator">></span> const_iterator<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>reverse_iterator<span class="token operator">&lt;</span>const_iterator<span class="token operator">></span>  const_reverse_iterator<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>reverse_iterator<span class="token operator">&lt;</span>iterator<span class="token operator">></span>        reverse_iterator<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> size_t  						size_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> ptrdiff_t      		difference_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Alloc             allocator_type<span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h3 id="vector-的迭代器"><a href="#vector-的迭代器" class="headerlink" title="vector 的迭代器"></a>vector 的迭代器</h3><p>普通指针<strong>具备随机存取</strong>的能力。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Base</span><span class="token double-colon punctuation">::</span>pointer                       pointer<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> __gnu_cxx<span class="token double-colon punctuation">::</span>__normal_iterator<span class="token operator">&lt;</span>pointer<span class="token punctuation">,</span> vector<span class="token operator">></span> iterator<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br/>

<h3 id="vector-的数据结构"><a href="#vector-的数据结构" class="headerlink" title="vector 的数据结构"></a>vector 的数据结构</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">_Vector_base</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//...</span>
<span class="token keyword">struct</span> <span class="token class-name">_Vector_impl_data</span> <span class="token punctuation">&#123;</span>
 pointer _M_start<span class="token punctuation">;</span>     <span class="token comment">// 表示目前使用空间的头</span>
 pointer _M_finish<span class="token punctuation">;</span>    <span class="token comment">// 表示目前使用空间的尾</span>
 pointer _M_end_of_storage<span class="token punctuation">;</span>    <span class="token comment">// 表示目前可用空间的尾</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">_Vector_impl</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_Tp_alloc_type</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">_Vector_impl_data</span></span> <span class="token punctuation">&#123;</span>
<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
 _Vector_impl _M_impl<span class="token punctuation">;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
 <span class="token keyword">void</span> <span class="token function">_M_create_storage</span><span class="token punctuation">(</span>size_t __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">+</span> __n<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有了<code>_M_start</code> <code>_M_finish</code> <code>_M_end_of_storage</code>这三个迭代器，可以轻松提供 <code>begin()</code>、 <code>end()</code> 、<code>size()</code> 、<code>capacity()</code>、 <code>empty()</code>、 <code>operator[]</code> 、<code>front()</code>、<code>back()</code>接口。</p>
<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/vector.png">

<br/>

<p><code>关于 STL 中 vector 的成长为什么按两倍成长，可参</code><a href="https://www.zhihu.com/question/36538542"> 知乎的讨论.</a></p>
<p><code>以及</code><a href="https://www.drdobbs.com/c-made-easier-how-vectors-grow/184401375">设计者Andrew Koenig 的文章介绍.</a></p>
<br/>

<h3 id="vector-初始化"><a href="#vector-初始化" class="headerlink" title="vector 初始化"></a>vector 初始化</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Called by the first initialize_dispatch above and by the</span>
<span class="token comment">// vector(n,value,a) constructor.</span>
<span class="token comment">// 填充并予以初始化</span>
<span class="token keyword">void</span> <span class="token function">_M_fill_initialize</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">=</span>
   std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_fill_n_a</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> __value<span class="token punctuation">,</span>
                                 <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Size</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">inline</span> _ForwardIterator
<span class="token function">uninitialized_fill_n</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _Size __n<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>value_type
    _ValueType<span class="token punctuation">;</span>
    <span class="token comment">// Trivial types can have deleted assignment, so using std::fill</span>
   <span class="token comment">// would be ill-formed. Require assignability before using std::fill:</span>
   <span class="token keyword">const</span> <span class="token keyword">bool</span> __assignable <span class="token operator">=</span> is_copy_assignable<span class="token operator">&lt;</span>_ValueType<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">;</span>
   <span class="token comment">// 配置后填充</span>
   <span class="token keyword">return</span> <span class="token class-name">__uninitialized_fill_n</span><span class="token operator">&lt;</span><span class="token function">__is_trivial</span><span class="token punctuation">(</span>_ValueType<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> __assignable<span class="token operator">></span><span class="token double-colon punctuation">::</span>
   <span class="token function">__uninit_fill_n</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//针对 trivial constructor 的特化版本，调用 std::fill_n</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__uninitialized_fill_n</span><span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Size</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
 <span class="token keyword">static</span> _ForwardIterator
 <span class="token function">__uninit_fill_n</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _Size __n<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
   <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">fill_n</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//针对 non trivial constructor 的特化版本，调用 ::new</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">bool</span> _TrivialValueType<span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__uninitialized_fill_n</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Size</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">static</span> _ForwardIterator
 <span class="token function">__uninit_fill_n</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _Size __n<span class="token punctuation">,</span>
                <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    _ForwardIterator __cur <span class="token operator">=</span> __first<span class="token punctuation">;</span>
     __try <span class="token punctuation">&#123;</span>
       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> __n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>__n<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">++</span>__cur<span class="token punctuation">)</span>
         std<span class="token double-colon punctuation">::</span><span class="token function">_Construct</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">__addressof</span><span class="token punctuation">(</span><span class="token operator">*</span>__cur<span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> __cur<span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
     <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
       __throw_exception_again<span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h3 id="vector-之-insert"><a href="#vector-之-insert" class="headerlink" title="vector 之 insert()"></a>vector 之 insert()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 还有备用空间</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GROW</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                           __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">++</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">;</span>
  <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GREW</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 无备用空间</span>
<span class="token keyword">else</span>
    <span class="token function">_M_realloc_insert</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// _M_realloc_insert</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span> <span class="token function">_M_realloc_insert</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> _Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
   <span class="token keyword">const</span> size_type __len <span class="token operator">=</span> <span class="token function">_M_check_len</span><span class="token punctuation">(</span><span class="token function">size_type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"vector::_M_realloc_insert"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   pointer __old_start <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">;</span>
   pointer __old_finish <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">;</span>
   <span class="token keyword">const</span> size_type __elems_before <span class="token operator">=</span> __position <span class="token operator">-</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   pointer <span class="token function">__new_start</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate</span><span class="token punctuation">(</span>__len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   pointer <span class="token function">__new_finish</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">)</span><span class="token punctuation">;</span>
   __try <span class="token punctuation">&#123;</span>
     <span class="token comment">// 配置大小为原来的2倍</span>
     _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span>
                              __new_start <span class="token operator">+</span> __elems_before<span class="token punctuation">,</span>
                              std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     __new_finish <span class="token operator">=</span> <span class="token function">pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token keyword">if</span> <span class="token function">_GLIBCXX17_CONSTEXPR</span> <span class="token punctuation">(</span><span class="token function">_S_use_relocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       __new_finish <span class="token operator">=</span> <span class="token function">_S_relocate</span><span class="token punctuation">(</span>__old_start<span class="token punctuation">,</span> __position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  __new_start<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token operator">++</span>__new_finish<span class="token punctuation">;</span>

       __new_finish <span class="token operator">=</span> <span class="token function">_S_relocate</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __old_finish<span class="token punctuation">,</span>
                                  __new_finish<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
       <span class="token comment">// 将原来 vector 的内容拷到新的 vector</span>
       <span class="token comment">// std::__uninitialized_move_if_noexcept_a() 最终会调用到</span>
       <span class="token comment">// std::uninitialized_copy()</span>
       __new_finish <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_if_noexcept_a</span> <span class="token punctuation">(</span>__old_start<span class="token punctuation">,</span>                                                        __position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __new_start<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token operator">++</span>__new_finish<span class="token punctuation">;</span>

       __new_finish <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_if_noexcept_a</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                     __old_finish<span class="token punctuation">,</span>  __new_finish<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__new_finish<span class="token punctuation">)</span>
       _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span>  __new_start <span class="token operator">+</span> __elems_before<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">else</span>
       std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">,</span> __new_finish<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">_M_deallocate</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">,</span> __len<span class="token punctuation">)</span><span class="token punctuation">;</span>
     __throw_exception_again<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token comment">// 析构并释放原 vector</span>
   <span class="token keyword">if</span> <span class="token function">_GLIBCXX17_CONSTEXPR</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">_S_use_relocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__old_start<span class="token punctuation">,</span> __old_finish<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   _GLIBCXX_ASAN_ANNOTATE_REINIT<span class="token punctuation">;</span>
   <span class="token function">_M_deallocate</span><span class="token punctuation">(</span>__old_start<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage <span class="token operator">-</span> __old_start<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 调整迭代器，指向新的 vector</span>
   <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">=</span> __new_start<span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">=</span> __new_finish<span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage <span class="token operator">=</span> __new_start <span class="token operator">+</span> __len<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
*  @brief  Inserts given rvalue into %vector before specified iterator.
*  @param  __position  A const_iterator into the %vector.
*  @param  __x  Data to be inserted.
*  @return  An iterator that points to the inserted data.
*
*  This function will insert a copy of the given rvalue before
*  the specified location.  Note that this kind of operation
*  could be expensive for a %vector and if it is frequently
*  used the user should consider using std::list.
*/</span>
iterator <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator __position<span class="token punctuation">,</span> value_type<span class="token operator">&amp;&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
  <span class="token keyword">return</span> <span class="token function">_M_insert_rval</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">auto</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
    <span class="token function">_M_insert_rval</span><span class="token punctuation">(</span>const_iterator __position<span class="token punctuation">,</span> value_type<span class="token operator">&amp;&amp;</span> __v<span class="token punctuation">)</span> <span class="token operator">-></span> iterator <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token keyword">auto</span> __n <span class="token operator">=</span> __position <span class="token operator">-</span> <span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>__position <span class="token operator">==</span> <span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GROW</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                   std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>__v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">++</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">;</span>
            <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GREW</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
          <span class="token function">_M_insert_aux</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __n<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>__v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span>
        <span class="token function">_M_realloc_insert</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __n<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>__v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">+</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>


<span class="token comment">/** @file bits/vector.tcc
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername&#123;vector&#125;
 */</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_M_insert_aux</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> <span class="token keyword">bool</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_p <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span><span class="token function">_M_end_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">copy_backward</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span> 
                       <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>__position <span class="token operator">=</span> __x<span class="token punctuation">;</span>
    <span class="token operator">++</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> size_type __len <span class="token operator">=</span>
      <span class="token function">_M_check_len</span><span class="token punctuation">(</span><span class="token function">size_type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"vector&lt;bool>::_M_insert_aux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _Bit_pointer __q <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate</span><span class="token punctuation">(</span>__len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    iterator <span class="token function">__start</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">__addressof</span><span class="token punctuation">(</span><span class="token operator">*</span>__q<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    iterator __i <span class="token operator">=</span> <span class="token function">_M_copy_aligned</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __position<span class="token punctuation">,</span> __start<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>__i<span class="token operator">++</span> <span class="token operator">=</span> __x<span class="token punctuation">;</span>
    iterator __finish <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_deallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage <span class="token operator">=</span> __q <span class="token operator">+</span> <span class="token function">_S_nword</span><span class="token punctuation">(</span>__len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">=</span> __start<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">=</span> __finish<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator __position<span class="token punctuation">,</span> initializer_list<span class="token operator">&lt;</span>value_type<span class="token operator">></span> __l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">auto</span> __offset <span class="token operator">=</span> __position <span class="token operator">-</span> <span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">_M_range_insert</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __offset<span class="token punctuation">,</span> __l<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __l<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   std<span class="token double-colon punctuation">::</span><span class="token function">random_access_iterator_tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __offset<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_M_range_insert</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> 
  _ForwardIterator __first<span class="token punctuation">,</span>                                                           _ForwardIterator __last<span class="token punctuation">,</span>  std<span class="token double-colon punctuation">::</span>forward_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">const</span> size_type __n <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">distance</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 备用空间 >= 新增元素个数</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size_type</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage
                     <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">)</span> <span class="token operator">>=</span> __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         <span class="token comment">// 计算插入点之后的现有元素个数</span>
      <span class="token keyword">const</span> size_type __elems_after <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> __position<span class="token punctuation">;</span>
      pointer <span class="token function">__old_finish</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 插入点之后现有的元素个数 > 新增元素个数</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>__elems_after <span class="token operator">></span> __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GROW</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_a</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">-</span> __n<span class="token punctuation">,</span>
                                    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                                    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                                    <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">+=</span> __n<span class="token punctuation">;</span> <span class="token comment">// 将 vector 尾端标记后移</span>
        <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GREW</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_GLIBCXX_MOVE_BACKWARD3</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                __old_finish <span class="token operator">-</span> __n<span class="token punctuation">,</span> __old_finish<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __position<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入点开始插入新值</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 插入点之后现有的元素个数 &lt;= 新增元素个数</span>
        _ForwardIterator __mid <span class="token operator">=</span> __first<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">advance</span><span class="token punctuation">(</span>__mid<span class="token punctuation">,</span> __elems_after<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GROW</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_copy_a</span><span class="token punctuation">(</span>__mid<span class="token punctuation">,</span> __last<span class="token punctuation">,</span>
                                    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                                    <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">+=</span> __n <span class="token operator">-</span> __elems_after<span class="token punctuation">;</span>
        <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GREW</span><span class="token punctuation">(</span>__n <span class="token operator">-</span> __elems_after<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_a</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    __old_finish<span class="token punctuation">,</span>
                                    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                                    <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">+=</span> __elems_after<span class="token punctuation">;</span>
        <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GREW</span><span class="token punctuation">(</span>__elems_after<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __mid<span class="token punctuation">,</span> __position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 配置新的 vector 空间</span>
      <span class="token keyword">const</span> size_type __len <span class="token operator">=</span> <span class="token function">_M_check_len</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> <span class="token string">"vector::_M_range_insert"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      pointer <span class="token function">__new_start</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate</span><span class="token punctuation">(</span>__len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      pointer <span class="token function">__new_finish</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">)</span><span class="token punctuation">;</span>
      __try <span class="token punctuation">&#123;</span>
          <span class="token comment">// 1、先将旧 vector 的插入点之前的元素 copy 到新空间</span>
          __new_finish <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_if_noexcept_a</span>
            <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">,</span> __position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             __new_start<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 2、将新增元素 copy 到新空间</span>
          __new_finish <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_copy_a</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span>
                  __new_finish<span class="token punctuation">,</span>
                  <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 3、将旧 vector 的插入点之后的元素 copy 到新空间</span>
          __new_finish <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_if_noexcept_a</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                                                             <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                                              __new_finish<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">,</span> __new_finish<span class="token punctuation">,</span>
            <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">_M_deallocate</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">,</span> __len<span class="token punctuation">)</span><span class="token punctuation">;</span>
          __throw_exception_again<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">// 清除释放旧的 vector</span>
      std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
              <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      _GLIBCXX_ASAN_ANNOTATE_REINIT<span class="token punctuation">;</span>
      <span class="token function">_M_deallocate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">,</span>
              <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage
              <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 调整迭代器，指向新的 vector</span>
      <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">=</span> __new_start<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">=</span> __new_finish<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage <span class="token operator">=</span> __new_start <span class="token operator">+</span> __len<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
 <span class="token function">_M_fill_insert</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>__n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 备用空间 >= 新增元素个数</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size_type</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">)</span> 
     <span class="token operator">>=</span> __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   _Temporary_value <span class="token function">__tmp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
   value_type<span class="token operator">&amp;</span> __x_copy <span class="token operator">=</span> __tmp<span class="token punctuation">.</span><span class="token function">_M_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">const</span> size_type __elems_after <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> __position<span class="token punctuation">;</span>
   pointer <span class="token function">__old_finish</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>__elems_after <span class="token operator">></span> __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token comment">// 插入点之后现有的元素个数 > 新增元素个数</span>
     <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GROW</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
     std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_a</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">-</span> __n<span class="token punctuation">,</span>
                                 <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                                 <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                                 <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">+=</span> __n<span class="token punctuation">;</span>
     <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GREW</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">_GLIBCXX_MOVE_BACKWARD3</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                             __old_finish <span class="token operator">-</span> __n<span class="token punctuation">,</span> __old_finish<span class="token punctuation">)</span><span class="token punctuation">;</span>
     std<span class="token double-colon punctuation">::</span><span class="token function">fill</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __n<span class="token punctuation">,</span> __x_copy<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
     <span class="token comment">// 插入点之后现有的元素个数 &lt;= 新增元素个数</span>
       <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GROW</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">=</span>
         std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_fill_n_a</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
               __n <span class="token operator">-</span> __elems_after<span class="token punctuation">,</span>
               __x_copy<span class="token punctuation">,</span>
               <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GREW</span><span class="token punctuation">(</span>__n <span class="token operator">-</span> __elems_after<span class="token punctuation">)</span><span class="token punctuation">;</span>
       std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_a</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __old_finish<span class="token punctuation">,</span>
                 <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                 <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">+=</span> __elems_after<span class="token punctuation">;</span>
       <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GREW</span><span class="token punctuation">(</span>__elems_after<span class="token punctuation">)</span><span class="token punctuation">;</span>
       std<span class="token double-colon punctuation">::</span><span class="token function">fill</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __old_finish<span class="token punctuation">,</span> __x_copy<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// 配置新的 vector 空间</span>
       <span class="token keyword">const</span> size_type __len <span class="token operator">=</span>
             <span class="token function">_M_check_len</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> <span class="token string">"vector::_M_fill_insert"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">const</span> size_type __elems_before <span class="token operator">=</span> __position <span class="token operator">-</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       pointer <span class="token function">__new_start</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate</span><span class="token punctuation">(</span>__len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       pointer <span class="token function">__new_finish</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">)</span><span class="token punctuation">;</span>
       __try <span class="token punctuation">&#123;</span>
       <span class="token comment">// 1、将新增元素以初值为__n, fill 到新空间</span>
       std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_fill_n_a</span><span class="token punctuation">(</span>__new_start <span class="token operator">+</span> __elems_before<span class="token punctuation">,</span>
             __n<span class="token punctuation">,</span> __x<span class="token punctuation">,</span>
             <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       __new_finish <span class="token operator">=</span> <span class="token function">pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token comment">// 2、将旧 vector 的插入点之前的元素 copy 到新空间</span>
       __new_finish
         <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_if_noexcept_a</span>
         <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">,</span> __position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          __new_start<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       __new_finish <span class="token operator">+=</span> __n<span class="token punctuation">;</span>
                 <span class="token comment">// 3、将旧 vector 的插入点之后的元素 copy 到新空间</span>
       __new_finish <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_if_noexcept_a</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                                              <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                                              __new_finish<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">&#125;</span>
       <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__new_finish<span class="token punctuation">)</span>
         std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__new_start <span class="token operator">+</span> __elems_before<span class="token punctuation">,</span>
           __new_start <span class="token operator">+</span> __elems_before <span class="token operator">+</span> __n<span class="token punctuation">,</span>
           <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">else</span>
         std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">,</span> __new_finish<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">_M_deallocate</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">,</span> __len<span class="token punctuation">)</span><span class="token punctuation">;</span>
       __throw_exception_again<span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>

     <span class="token comment">// 清除释放旧的 vector</span>
       std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
             <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       _GLIBCXX_ASAN_ANNOTATE_REINIT<span class="token punctuation">;</span>
       <span class="token function">_M_deallocate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">,</span>
             <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token comment">// 调整迭代器，指向新的 vector</span>
       <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">=</span> __new_start<span class="token punctuation">;</span>
       <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">=</span> __new_finish<span class="token punctuation">;</span>
       <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage <span class="token operator">=</span> __new_start <span class="token operator">+</span> __len<span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/vector-insert.png">

<br/>

<br/>

<h3 id="vector-之-erase"><a href="#vector-之-erase" class="headerlink" title="vector 之 erase()"></a>vector 之 erase()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 清除某个位置的元素</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator
<span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_M_erase</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>__position <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token function">_GLIBCXX_MOVE3</span><span class="token punctuation">(</span>__position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __position<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token operator">--</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">;</span>
   _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">_GLIBCXX_ASAN_ANNOTATE_SHRINK</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> __position<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 清除 [first, last) 中的所有元素</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator
<span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_M_erase</span><span class="token punctuation">(</span>iterator __first<span class="token punctuation">,</span> iterator __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>__last <span class="token operator">!=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token function">_GLIBCXX_MOVE3</span><span class="token punctuation">(</span>__last<span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __first<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">_M_erase_at_end</span><span class="token punctuation">(</span>__first<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> __last<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">return</span> __first<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    <br/></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/vector-erase.png">

<br/>

<br/>

<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><h3 id="list-节点"><a href="#list-节点" class="headerlink" title="list 节点"></a>list 节点</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 双向链表</span>
<span class="token comment">/// Common part of a node in the %list.</span>
<span class="token keyword">struct</span> <span class="token class-name">_List_node_base</span> <span class="token punctuation">&#123;</span>
_List_node_base<span class="token operator">*</span> _M_next<span class="token punctuation">;</span>
_List_node_base<span class="token operator">*</span> _M_prev<span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span>
 <span class="token function">swap</span><span class="token punctuation">(</span>_List_node_base<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> _List_node_base<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT<span class="token punctuation">;</span>

<span class="token keyword">void</span>
 <span class="token function">_M_transfer</span><span class="token punctuation">(</span>_List_node_base<span class="token operator">*</span> <span class="token keyword">const</span> __first<span class="token punctuation">,</span>
             _List_node_base<span class="token operator">*</span> <span class="token keyword">const</span> __last<span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT<span class="token punctuation">;</span>

<span class="token keyword">void</span>
 <span class="token function">_M_reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT<span class="token punctuation">;</span>

<span class="token keyword">void</span>
 <span class="token function">_M_hook</span><span class="token punctuation">(</span>_List_node_base<span class="token operator">*</span> <span class="token keyword">const</span> __position<span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT<span class="token punctuation">;</span>

<span class="token keyword">void</span>
 <span class="token function">_M_unhook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h3 id="list-迭代器"><a href="#list-迭代器" class="headerlink" title="list 迭代器"></a>list 迭代器</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">_List_iterator</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">typedef</span> _List_iterator<span class="token operator">&lt;</span>_Tp<span class="token operator">></span>        _Self<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _List_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span>            _Node<span class="token punctuation">;</span>

 <span class="token keyword">typedef</span> ptrdiff_t                difference_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>bidirectional_iterator_tag    iterator_category<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp                value_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp<span class="token operator">*</span>                pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp<span class="token operator">&amp;</span>                reference<span class="token punctuation">;</span>

<span class="token function">_List_iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT
<span class="token operator">:</span> <span class="token function">_M_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">explicit</span>
<span class="token function">_List_iterator</span><span class="token punctuation">(</span>__detail<span class="token double-colon punctuation">::</span>_List_node_base<span class="token operator">*</span> __x<span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT
<span class="token operator">:</span> <span class="token function">_M_node</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>

 _Self <span class="token function">_M_const_cast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

 <span class="token comment">// Must downcast from _List_node_base to _List_node to get to value.</span>
 reference <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Node<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>_M_node<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">_M_valptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

 pointer <span class="token keyword">operator</span><span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Node<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>_M_node<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">_M_valptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

 _Self<span class="token operator">&amp;</span>  <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
    _M_node <span class="token operator">=</span> _M_node<span class="token operator">-></span>_M_next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 _Self <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
    _Self __tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    _M_node <span class="token operator">=</span> _M_node<span class="token operator">-></span>_M_next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 _Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
    _M_node <span class="token operator">=</span> _M_node<span class="token operator">-></span>_M_prev<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 _Self <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
    _Self __tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    _M_node <span class="token operator">=</span> _M_node<span class="token operator">-></span>_M_prev<span class="token punctuation">;</span>
    <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">friend</span> <span class="token keyword">bool</span>
  <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Self<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Self<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> __x<span class="token punctuation">.</span>_M_node <span class="token operator">==</span> __y<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">friend</span> <span class="token keyword">bool</span>
  <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Self<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Self<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> __x<span class="token punctuation">.</span>_M_node <span class="token operator">!=</span> __y<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

 <span class="token comment">// The only member points to the %list element.</span>
 __detail<span class="token double-colon punctuation">::</span>_List_node_base<span class="token operator">*</span> _M_node<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="list-数据结构"><a href="#list-数据结构" class="headerlink" title="list 数据结构"></a>list 数据结构</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> <span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">list</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">protected</span> <span class="token class-name">_List_base</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token class-name">_Alloc</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_GLIBCXX_CONCEPT_CHECKS</span></span>
  <span class="token comment">// concept requirements</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token double-colon punctuation">::</span>value_type        _Alloc_value_type<span class="token punctuation">;</span>
 <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">&lt;</span> <span class="token number">201103L</span></span></span>
  <span class="token function">__glibcxx_class_requires</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _SGIAssignableConcept<span class="token punctuation">)</span>
 <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">endif</span></span>
    <span class="token function">__glibcxx_class_requires2</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _Alloc_value_type<span class="token punctuation">,</span> _SameTypeConcept<span class="token punctuation">)</span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">201103L</span></span></span>
    <span class="token keyword">static_assert</span><span class="token punctuation">(</span>is_same<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">remove_cv</span><span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token double-colon punctuation">::</span>type<span class="token punctuation">,</span> _Tp<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span>
                  <span class="token string">"std::list must have a non-const, non-volatile value_type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">ifdef</span> <span class="token expression">__STRICT_ANSI__</span></span>
  <span class="token keyword">static_assert</span><span class="token punctuation">(</span>is_same<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span> _Tp<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span>
                <span class="token string">"std::list must have the same value_type as its allocator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">endif</span></span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

  <span class="token keyword">typedef</span> _List_base<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span>            _Base<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Base</span><span class="token double-colon punctuation">::</span>_Tp_alloc_type        _Tp_alloc_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Base</span><span class="token double-colon punctuation">::</span>_Tp_alloc_traits        _Tp_alloc_traits<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Base</span><span class="token double-colon punctuation">::</span>_Node_alloc_type        _Node_alloc_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Base</span><span class="token double-colon punctuation">::</span>_Node_alloc_traits    _Node_alloc_traits<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">typedef</span> _Tp                     value_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp_alloc_traits</span><span class="token double-colon punctuation">::</span>pointer     pointer<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp_alloc_traits</span><span class="token double-colon punctuation">::</span>const_pointer     const_pointer<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp_alloc_traits</span><span class="token double-colon punctuation">::</span>reference     reference<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp_alloc_traits</span><span class="token double-colon punctuation">::</span>const_reference const_reference<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> _List_iterator<span class="token operator">&lt;</span>_Tp<span class="token operator">></span>             iterator<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> _List_const_iterator<span class="token operator">&lt;</span>_Tp<span class="token operator">></span>             const_iterator<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>reverse_iterator<span class="token operator">&lt;</span>const_iterator<span class="token operator">></span>     const_reverse_iterator<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>reverse_iterator<span class="token operator">&lt;</span>iterator<span class="token operator">></span>         reverse_iterator<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> size_t                     size_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> ptrdiff_t                     difference_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> _Alloc                     allocator_type<span class="token punctuation">;</span>

<span class="token keyword">protected</span><span class="token operator">:</span>
  <span class="token comment">// Note that pointers-to-_Node's can be ctor-converted to</span>
  <span class="token comment">// iterator types.</span>
  <span class="token comment">// 环形双向链表，只需要一个指针便可以表示整个链表</span>
  <span class="token keyword">typedef</span> _List_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span>                 _Node<span class="token punctuation">;</span>
 <span class="token comment">// ...</span>

 iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_node<span class="token punctuation">.</span>_M_next<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

 _GLIBCXX_NODISCARD <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_node<span class="token punctuation">.</span>_M_next <span class="token operator">==</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

 const_reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

 reference <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
    iterator __tmp <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">--</span>__tmp<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span>__tmp<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token comment">// 配置一个节点并传回</span>
 <span class="token keyword">typename</span> <span class="token class-name">_Node_alloc_traits</span><span class="token double-colon punctuation">::</span>pointer <span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> _Node_alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>_M_impl<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>
 <span class="token comment">// 产生一个节点，带元素值</span>
 <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span>
_Node<span class="token operator">*</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span>_Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">auto</span> __p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">auto</span><span class="token operator">&amp;</span> __alloc <span class="token operator">=</span> <span class="token function">_M_get_Node_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 __allocated_ptr<span class="token operator">&lt;</span>_Node_alloc_type<span class="token operator">></span> __guard<span class="token punctuation">&#123;</span>__alloc<span class="token punctuation">,</span> __p<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 _Node_alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span>__alloc<span class="token punctuation">,</span> __p<span class="token operator">-></span><span class="token function">_M_valptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                               std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 __guard <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> __p<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<p><strong>list 示意图</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/list%E7%A4%BA%E6%84%8F%E5%9B%BE.png">

<br/>

<br/>

<h3 id="list-之-unique"><a href="#list-之-unique" class="headerlink" title="list 之 unique()"></a>list 之 unique()</h3><p><strong>list 移除 value 相同元素</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">list</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>__remove_return_type
<span class="token class-name">list</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  iterator __first <span class="token operator">=</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  iterator __l

ast <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 空链表 直接返回</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span> 
    <span class="token keyword">return</span> <span class="token function">_GLIBCXX20_ONLY</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_type __removed <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__unused__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  iterator __next <span class="token operator">=</span> __first<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>__next <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first <span class="token operator">==</span> <span class="token operator">*</span>__next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">_M_erase</span><span class="token punctuation">(</span>__next<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">_GLIBCXX20_ONLY</span><span class="token punctuation">(</span> __removed<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
      __first <span class="token operator">=</span> __next<span class="token punctuation">;</span>
    __next <span class="token operator">=</span> __first<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token function">_GLIBCXX20_ONLY</span><span class="token punctuation">(</span> __removed <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h3 id="list-之-erase"><a href="#list-之-erase" class="headerlink" title="list 之 erase()"></a>list 之 erase()</h3><blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">erase</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       _List_node_base<span class="token operator">*</span> __next_node <span class="token operator">=</span> __position<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_next<span class="token punctuation">;</span>
       _List_node_base<span class="token operator">*</span> __prev_node <span class="token operator">=</span> __position<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev<span class="token punctuation">;</span>
       _Node<span class="token operator">*</span> __n <span class="token operator">=</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> __position<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span>
       __prev_node<span class="token operator">-></span>_M_next <span class="token operator">=</span> __next_node<span class="token punctuation">;</span>
       __next_node<span class="token operator">-></span>_M_prev <span class="token operator">=</span> __prev_node<span class="token punctuation">;</span>
       <span class="token function">_Destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__n<span class="token operator">-></span>_M_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">_M_put_node</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> __next_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/list-erase.png">

<br/>

<br/>

<h3 id="transfer"><a href="#transfer" class="headerlink" title="transfer()"></a>transfer()</h3><p><strong>将 [first, last) 内的所有元素移动到 position 之前</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// SGI STL 版本</span>
<span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> iterator __first<span class="token punctuation">,</span> iterator __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__position <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// Remove [first, last) from its old position.</span>
   __last<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev<span class="token operator">-></span>_M_next     <span class="token operator">=</span> __position<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span>  <span class="token comment">// 1</span>
   __first<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev<span class="token operator">-></span>_M_next    <span class="token operator">=</span> __last<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span>          <span class="token comment">// 2</span>
   __position<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev<span class="token operator">-></span>_M_next <span class="token operator">=</span> __first<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span>     <span class="token comment">// 3</span>

   <span class="token comment">// Splice [first, last) into its new position.</span>
   _List_node_base<span class="token operator">*</span> __tmp      <span class="token operator">=</span> __position<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev<span class="token punctuation">;</span>  <span class="token comment">// 4</span>
   __position<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev <span class="token operator">=</span> __last<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev<span class="token punctuation">;</span>      <span class="token comment">// 5</span>
   __last<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev     <span class="token operator">=</span> __first<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev<span class="token punctuation">;</span>     <span class="token comment">// 6</span>
   __first<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev    <span class="token operator">=</span> __tmp<span class="token punctuation">;</span>                                              <span class="token comment">// 7</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/list-transfer.png">

<br/>

<h3 id="list-之-splice"><a href="#list-之-splice" class="headerlink" title="list 之 splice()"></a>list 之 splice()</h3><p><strong>transfer() 是非公开接口，STL 为 list 提供了splice()。</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">splice</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> list<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__x<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">transfer</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> __x<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">splice</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> list<span class="token operator">&amp;</span><span class="token punctuation">,</span> iterator __i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  iterator __j <span class="token operator">=</span> __i<span class="token punctuation">;</span>
  <span class="token operator">++</span>__j<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__position <span class="token operator">==</span> __i <span class="token operator">||</span> __position <span class="token operator">==</span> __j<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">transfer</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> __i<span class="token punctuation">,</span> __j<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">splice</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> list<span class="token operator">&amp;</span><span class="token punctuation">,</span> iterator __first<span class="token punctuation">,</span> iterator __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> 
    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">transfer</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> __first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> list1 <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
   std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> list2 <span class="token punctuation">&#123;</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

   <span class="token keyword">auto</span> iter <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   list1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1, 2, 3, 4, [5, 6, 7, 8, 9] 100</span>
   list1<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//100, 9, 8, 7, 6, 5, 4, 3, 2, 1</span>
   list1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 1, 2, 3, 4, 5, 6, 7, 8, 9, 100</span>

   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/list-splice.png">

<p><br/><br/></p>
<h3 id="list-之-merge"><a href="#list-之-merge" class="headerlink" title="list 之 merge()"></a>list 之 merge()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">list</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">merge</span><span class="token punctuation">(</span>list<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   iterator __first1 <span class="token operator">=</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   iterator __last1 <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   iterator __first2 <span class="token operator">=</span> __x<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   iterator __last2 <span class="token operator">=</span> __x<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 两个 list 都已经递增排序</span>
   <span class="token keyword">while</span> <span class="token punctuation">(</span>__first1 <span class="token operator">!=</span> __last1 <span class="token operator">&amp;&amp;</span> __first2 <span class="token operator">!=</span> __last2<span class="token punctuation">)</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first2 <span class="token operator">&lt;</span> <span class="token operator">*</span>__first1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       iterator __next <span class="token operator">=</span> __first2<span class="token punctuation">;</span>
       <span class="token function">transfer</span><span class="token punctuation">(</span>__first1<span class="token punctuation">,</span> __first2<span class="token punctuation">,</span> <span class="token operator">++</span>__next<span class="token punctuation">)</span><span class="token punctuation">;</span>
       __first2 <span class="token operator">=</span> __next<span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
     <span class="token keyword">else</span>
      <span class="token operator">++</span>__first1<span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>__first2 <span class="token operator">!=</span> __last2<span class="token punctuation">)</span> <span class="token function">transfer</span><span class="token punctuation">(</span>__last1<span class="token punctuation">,</span> __first2<span class="token punctuation">,</span> __last2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="list-之-reverse"><a href="#list-之-reverse" class="headerlink" title="list 之 reverse()"></a>list 之 reverse()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__List_base_reverse</span><span class="token punctuation">(</span>_List_node_base<span class="token operator">*</span> __p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
_List_node_base<span class="token operator">*</span> __tmp <span class="token operator">=</span> __p<span class="token punctuation">;</span>
   <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
     __STD<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>__tmp<span class="token operator">-></span>_M_next<span class="token punctuation">,</span> __tmp<span class="token operator">-></span>_M_prev<span class="token punctuation">)</span><span class="token punctuation">;</span>
     __tmp <span class="token operator">=</span> __tmp<span class="token operator">-></span>_M_prev<span class="token punctuation">;</span>     <span class="token comment">// Old next node is now prev.</span>
   <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>__tmp <span class="token operator">!=</span> __p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token class-name">list</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token function">__List_base_reverse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="list-之-sort"><a href="#list-之-sort" class="headerlink" title="list 之 sort()"></a>list 之 sort()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">list</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// Do nothing if the list has length 0 or 1.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>_M_node<span class="token operator">-></span>_M_next <span class="token operator">!=</span> _M_node <span class="token operator">&amp;&amp;</span> _M_node<span class="token operator">-></span>_M_next<span class="token operator">-></span>_M_next <span class="token operator">!=</span> _M_node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  list<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span> __carry<span class="token punctuation">;</span>
  list<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span> __counter<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> __fill <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    __carry<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>__carry<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> __i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>__i <span class="token operator">&lt;</span> __fill <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>__counter<span class="token punctuation">[</span>__i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      __counter<span class="token punctuation">[</span>__i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>__carry<span class="token punctuation">)</span><span class="token punctuation">;</span>
      __carry<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>__counter<span class="token punctuation">[</span>__i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    __carry<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>__counter<span class="token punctuation">[</span>__i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__i <span class="token operator">==</span> __fill<span class="token punctuation">)</span> <span class="token operator">++</span>__fill<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> 

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> __i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> __i <span class="token operator">&lt;</span> __fill<span class="token punctuation">;</span> <span class="token operator">++</span>__i<span class="token punctuation">)</span>
    __counter<span class="token punctuation">[</span>__i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>__counter<span class="token punctuation">[</span>__i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">swap</span><span class="token punctuation">(</span>__counter<span class="token punctuation">[</span>__fill<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<p><strong>list 使用注意事项</strong></p>
<p><code>由于 list 的迭代器类型是 Bidirectional Iterators, 而 std::sort() 要求的是 RandomAccessIterator, 必须使用自身的 sort() 函数排序，否则会报错：</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/include/c++/9/bits/stl_algo.h: In instantiation of ‘void std::__sort<span class="token punctuation">(</span>_RandomAccessIterator, _RandomAccessIterator, _Compare<span class="token punctuation">)</span> <span class="token punctuation">[</span>with _RandomAccessIterator <span class="token operator">=</span> std::_List_iterator<span class="token operator">&lt;</span>int<span class="token operator">></span><span class="token punctuation">;</span> _Compare <span class="token operator">=</span> __gnu_cxx::__ops::_Iter_less_iter<span class="token punctuation">]</span>’:
/usr/include/c++/9/bits/stl_algo.h:4867:18:   required from ‘void std::sort<span class="token punctuation">(</span>_RAIter, _RAIter<span class="token punctuation">)</span> <span class="token punctuation">[</span>with _RAIter <span class="token operator">=</span> std::_List_iterator<span class="token operator">&lt;</span>int<span class="token operator">></span><span class="token punctuation">]</span>’
required from here
/usr/include/c++/9/bits/stl_algo.h:1968:22: error: no match <span class="token keyword">for</span> ‘operator-’ <span class="token punctuation">(</span>operand types are ‘std::_List_iterator<span class="token operator">&lt;</span>int<span class="token operator">></span>’ and ‘std::_List_iterator<span class="token operator">&lt;</span>int<span class="token operator">></span>’<span class="token punctuation">)</span>
<span class="token number">1968</span> <span class="token operator">|</span>     std::__lg<span class="token punctuation">(</span>__last - __first<span class="token punctuation">)</span> * <span class="token number">2</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/deque.png">

<table>
<thead>
<tr>
<th align="center">deque</th>
<th align="center">vector</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>（支持头尾两端插入删除）双向</strong>、开口</td>
<td align="center"><strong>（头部操作效率极差）单向</strong>、开口</td>
</tr>
<tr>
<td align="center">允许<strong>常数时间</strong>内对起头端进行元素的插入&#x2F;移出</td>
<td align="center">尾端成长</td>
</tr>
<tr>
<td align="center"><strong>没有capacity()</strong> 概念</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">动态地以分段连续空间组合而成、随时增加一段新空间并链接起来</td>
<td align="center">空间不足时，存在 <strong>reallocate()</strong> 新空间，<strong>destroy()</strong> 旧空间</td>
</tr>
<tr>
<td align="center"><strong>没必要提供 reserve()</strong> 功能</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Ramdon Access Iterator 复杂度比 vector 高</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">对 deque 排序，可以先复制到 vector 排序后再 copy 回来</td>
<td align="center"></td>
</tr>
</tbody></table>
<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// map 是一个 T**</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">_Deque_base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator</span><span class="token double-colon punctuation">::</span>_Map_pointer _Map_pointer<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">_Deque_impl</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_Tp_alloc_type</span></span> <span class="token punctuation">&#123;</span>
_Map_pointer _M_map<span class="token punctuation">;</span>        <span class="token comment">// 指向 map, 存储 T** 类型的连续空间</span>
size_t _M_map_size<span class="token punctuation">;</span>         <span class="token comment">// buffer 块数</span>
iterator _M_start<span class="token punctuation">;</span>            <span class="token comment">// 指向第一个 buffer</span>
iterator _M_finish<span class="token punctuation">;</span>            <span class="token comment">// 指向最后一个 buffer</span>
<span class="token function">_Deque_impl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
  <span class="token operator">:</span> <span class="token function">_Tp_alloc_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
  <span class="token function">_M_map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
  <span class="token function">_M_map_size</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">_M_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
  <span class="token function">_M_finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
_Deque_impl _M_impl<span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/deque-map-node-buffer.png">

<br/>

<h3 id="deque-迭代器"><a href="#deque-迭代器" class="headerlink" title="deque 迭代器"></a>deque 迭代器</h3><ul>
<li>能够指出分段连续空间（buffer）的位置</li>
<li>能够判断当前所处的 buffer 的边缘</li>
<li>能够控制 map 跳跃到上一个&#x2F;下一个buffer</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Ref</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Ptr</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">_Deque_iterator</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 未继承 std::iterator</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">&lt;</span> <span class="token number">201103L</span></span></span>
<span class="token keyword">typedef</span> _Deque_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token operator">></span>         iterator<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Deque_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span><span class="token operator">></span> const_iterator<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Tp<span class="token operator">*</span>                     _Elt_pointer<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Tp<span class="token operator">*</span><span class="token operator">*</span>                    _Map_pointer<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token keyword">private</span><span class="token operator">:</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Up</span><span class="token operator">></span>
<span class="token keyword">using</span> __ptr_to <span class="token operator">=</span> <span class="token keyword">typename</span> <span class="token class-name">pointer_traits</span><span class="token operator">&lt;</span>_Ptr<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token keyword">template</span> rebind<span class="token operator">&lt;</span>_Up<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_CvTp</span><span class="token operator">></span>
<span class="token keyword">using</span> __iter <span class="token operator">=</span> _Deque_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _CvTp<span class="token operator">&amp;</span><span class="token punctuation">,</span> __ptr_to<span class="token operator">&lt;</span>_CvTp<span class="token operator">>></span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token keyword">typedef</span> __iter<span class="token operator">&lt;</span>_Tp<span class="token operator">></span>        iterator<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> __iter<span class="token operator">&lt;</span><span class="token keyword">const</span> _Tp<span class="token operator">></span>        const_iterator<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> __ptr_to<span class="token operator">&lt;</span>_Tp<span class="token operator">></span>        _Elt_pointer<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> __ptr_to<span class="token operator">&lt;</span>_Elt_pointer<span class="token operator">></span>    _Map_pointer<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">/**
   *  @brief This function controls the size of memory nodes.
   *  @param  __size  The size of an element.
   *  @return   The number (not byte size) of elements per node.
   */</span>
  <span class="token comment">// 决定 buffer 大小的函数</span>
  <span class="token comment">// buffer size 默认值 _GLIBCXX_DEQUE_BUF_SIZE 512</span>
  <span class="token comment">// 如果元素大小 __size &lt; 512 传回 512/__size; 否则传回 1</span>
  _GLIBCXX_CONSTEXPR <span class="token keyword">inline</span> size_t <span class="token function">__deque_buf_size</span><span class="token punctuation">(</span>size_t __size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token punctuation">(</span>__size <span class="token operator">&lt;</span> _GLIBCXX_DEQUE_BUF_SIZE
        <span class="token operator">?</span> <span class="token function">size_t</span><span class="token punctuation">(</span>_GLIBCXX_DEQUE_BUF_SIZE <span class="token operator">/</span> __size<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">size_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">static</span> size_t <span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token function">__deque_buf_size</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 未继承 std::iterator 所以必须自行撰写5个必要的迭代器相应类型</span>
  <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>random_access_iterator_tag    iterator_category<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> _Tp                value_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> _Ptr                pointer<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> _Ref                reference<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> size_t                size_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> ptrdiff_t                difference_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> _Deque_iterator            _Self<span class="token punctuation">;</span>

  _Elt_pointer _M_cur<span class="token punctuation">;</span>    <span class="token comment">// 指向某个 buffer 的当前元素</span>
  _Elt_pointer _M_first<span class="token punctuation">;</span>  <span class="token comment">// 指向某个 buffer 的头</span>
  _Elt_pointer _M_last<span class="token punctuation">;</span>   <span class="token comment">// 指向某个 buffer 的尾（含备用空间）</span>
  _Map_pointer _M_node<span class="token punctuation">;</span>   <span class="token comment">// 指向管控中心</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><strong>deque 迭代器关键行为</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 一旦遇到 buffer 边缘，就要调用 _M_set_node</span>
<span class="token comment">// 跳一个 buffer</span>
<span class="token keyword">void</span> <span class="token function">_M_set_node</span><span class="token punctuation">(</span>_Map_pointer __new_node<span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
_M_node <span class="token operator">=</span> __new_node<span class="token punctuation">;</span>
_M_first <span class="token operator">=</span> <span class="token operator">*</span>__new_node<span class="token punctuation">;</span>
_M_last <span class="token operator">=</span> _M_first <span class="token operator">+</span> <span class="token function">difference_type</span><span class="token punctuation">(</span><span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

_Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
<span class="token operator">++</span>_M_cur<span class="token punctuation">;</span>                                      <span class="token comment">// 切到下一个元素</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>_M_cur <span class="token operator">==</span> _M_last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果到达 buffer 尾端</span>
 <span class="token function">_M_set_node</span><span class="token punctuation">(</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 切到下一个节点（即下一块 buffer）</span>
 _M_cur <span class="token operator">=</span> _M_first<span class="token punctuation">;</span>                <span class="token comment">// 的第一个元素</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


_Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>_M_cur <span class="token operator">==</span> _M_first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果到达 buffer 头端</span>
 <span class="token function">_M_set_node</span><span class="token punctuation">(</span>_M_node <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 切到上一个节点（即上一块 buffer）</span>
 _M_cur <span class="token operator">=</span> _M_last<span class="token punctuation">;</span>                    <span class="token comment">// 的最后一个元素</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">--</span>_M_cur<span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 随机存取 迭代器可以直接跳跃 n 个距离</span>
_Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span>difference_type __n<span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
<span class="token keyword">const</span> difference_type __offset <span class="token operator">=</span> __n <span class="token operator">+</span> <span class="token punctuation">(</span>_M_cur <span class="token operator">-</span> _M_first<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 目标位置在 同一个 buffer 内</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>__offset <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> __offset <span class="token operator">&lt;</span> <span class="token function">difference_type</span><span class="token punctuation">(</span><span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 _M_cur <span class="token operator">+=</span> __n<span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 目标位置不在 同一个 buffer 内</span>
 <span class="token keyword">const</span> difference_type __node_offset <span class="token operator">=</span>
   __offset <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> __offset <span class="token operator">/</span> <span class="token function">difference_type</span><span class="token punctuation">(</span><span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token operator">:</span> <span class="token operator">-</span><span class="token function">difference_type</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>__offset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
                      <span class="token operator">/</span> <span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token comment">// 切换到正确的 buffer</span>
 <span class="token function">_M_set_node</span><span class="token punctuation">(</span>_M_node <span class="token operator">+</span> __node_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 切换正确的元素</span>
 _M_cur <span class="token operator">=</span> _M_first <span class="token operator">+</span> <span class="token punctuation">(</span>__offset <span class="token operator">-</span> __node_offset
                         <span class="token operator">*</span> <span class="token function">difference_type</span><span class="token punctuation">(</span><span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 利用 operator+=</span>
_Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">-=</span><span class="token punctuation">(</span>difference_type __n<span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
  <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">+=</span> <span class="token operator">-</span>__n<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img title="deque 中控器、缓存区、迭代器的关系" src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/deque-map-buffer-iterator.png">

<br/>

<h3 id="deque-创建"><a href="#deque-创建" class="headerlink" title="deque 创建"></a>deque 创建</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
*  @brief  Creates a %deque with copies of an exemplar element.
*  @param  __n  The number of elements to initially create.
*  @param  __value  An element to copy.
*  @param  __a  An allocator.
*
*  This constructor fills the %deque with @a __n copies of @a __value.
*/</span>
<span class="token function">deque</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __value<span class="token punctuation">,</span>
      <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">:</span> <span class="token function">_Base</span><span class="token punctuation">(</span>__a<span class="token punctuation">,</span> <span class="token function">_S_check_init_len</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> __a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token function">_M_fill_initialize</span><span class="token punctuation">(</span>__value<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token function">_Deque_base</span><span class="token punctuation">(</span><span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a<span class="token punctuation">,</span> size_t __num_elements<span class="token punctuation">)</span>
  <span class="token operator">:</span> <span class="token function">_M_impl</span><span class="token punctuation">(</span>__a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token function">_M_initialize_map</span><span class="token punctuation">(</span>__num_elements<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span> <span class="token function">_M_fill_initialize</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
_Map_pointer __cur<span class="token punctuation">;</span>
__try <span class="token punctuation">&#123;</span>
 <span class="token comment">// 为每个节点的 buffer 设定初值</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span>__cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span>
      __cur <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span>
      <span class="token operator">++</span>__cur<span class="token punctuation">)</span>
   std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_fill_a</span><span class="token punctuation">(</span><span class="token operator">*</span>__cur<span class="token punctuation">,</span> <span class="token operator">*</span>__cur <span class="token operator">+</span> <span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                               __value<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 最后节点的设定稍有不同，考虑尾端可能有备用空间，不必设初值</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_fill_a</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_first<span class="token punctuation">,</span>
                             <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">,</span>
                             __value<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><strong>_M_create_nodes()</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span>
<span class="token class-name">_Deque_base</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">_M_create_nodes</span><span class="token punctuation">(</span>_Map_pointer __nstart<span class="token punctuation">,</span> _Map_pointer __nfinish<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
_Map_pointer __cur<span class="token punctuation">;</span>
__try <span class="token punctuation">&#123;</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span>__cur <span class="token operator">=</span> __nstart<span class="token punctuation">;</span> __cur <span class="token operator">&lt;</span> __nfinish<span class="token punctuation">;</span> <span class="token operator">++</span>__cur<span class="token punctuation">)</span>
   <span class="token operator">*</span>__cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

_Ptr <span class="token function">_M_allocate_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> __gnu_cxx<span class="token double-colon punctuation">::</span>__alloc_traits<span class="token operator">&lt;</span>_Tp_alloc_type<span class="token operator">></span> _Traits<span class="token punctuation">;</span>
<span class="token keyword">return</span> _Traits<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>_M_impl<span class="token punctuation">,</span> <span class="token function">__deque_buf_size</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 决定 buffer 大小的函数</span>
<span class="token comment">// buffer size 默认值 _GLIBCXX_DEQUE_BUF_SIZE 512</span>
<span class="token comment">// 如果元素大小 __size &lt; 512 传回 512/__size; 否则传回 1</span>
_GLIBCXX_CONSTEXPR <span class="token keyword">inline</span> size_t <span class="token function">__deque_buf_size</span><span class="token punctuation">(</span>size_t __size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
<span class="token keyword">return</span> <span class="token punctuation">(</span>__size <span class="token operator">&lt;</span> _GLIBCXX_DEQUE_BUF_SIZE
       <span class="token operator">?</span> <span class="token function">size_t</span><span class="token punctuation">(</span>_GLIBCXX_DEQUE_BUF_SIZE <span class="token operator">/</span> __size<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">size_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><strong>_M_initialize_map()</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
*  @brief Layout storage.
*  @param  __num_elements  The count of T's for which to allocate space
*                          at first.
*  @return   Nothing.
*  The initial underlying memory layout is a bit complicated...
*/</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">_Deque_base</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span> <span class="token function">_M_initialize_map</span><span class="token punctuation">(</span>size_t __num_elements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 需要 map_pointer 节点数 = （元素个数 / 每个缓冲区可容纳的元素个数）+ 1</span>
  <span class="token comment">// 因为 deque::end() 返回的是 finish 迭代器，所以分配多一个节点</span>
  <span class="token keyword">const</span> size_t __num_nodes <span class="token operator">=</span> <span class="token punctuation">(</span>__num_elements <span class="token operator">/</span> <span class="token function">__deque_buf_size</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span>
                              <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 一个中控器需要管理几个节点，</span>
  <span class="token comment">// 至少： _S_initial_map_size = 8 个</span>
  <span class="token comment">// 最多： 所需 map_pointer 节点数 + 2（前后各自预备一个，方便扩充）</span>
  <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> _S_initial_map_size<span class="token punctuation">,</span>
                                       <span class="token function">size_t</span><span class="token punctuation">(</span>__num_nodes <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map <span class="token operator">=</span> <span class="token function">_M_allocate_map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 以上就配置出了 一个 具有 _M_map_size 个节点的中控器</span>


  <span class="token comment">// 令 nstart 和 nfinish 指向 map 所拥有全部节点的最中央区段</span>
  <span class="token comment">// 保持最中央可以保证 deque 两端生长的能力一样大</span>
  _Map_pointer __nstart <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map
                           <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size <span class="token operator">-</span> __num_nodes<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  _Map_pointer __nfinish <span class="token operator">=</span> __nstart <span class="token operator">+</span> __num_nodes<span class="token punctuation">;</span>

  __try <span class="token punctuation">&#123;</span>
    <span class="token function">_M_create_nodes</span><span class="token punctuation">(</span>__nstart<span class="token punctuation">,</span> __nfinish<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
  <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 为 deque 内的两个迭代器 start 和 finish 设定正确的内容</span>
  <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span>__nstart<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span>__nfinish <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> _M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_first<span class="token punctuation">;</span>
  <span class="token comment">// 因为刚好整除会多配置一个节点，</span>
  <span class="token comment">// 此时，cur 指向这个多配置的一个节点</span>
  <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_first
                                    <span class="token operator">+</span> __num_elements
                                    <span class="token operator">%</span> <span class="token function">__deque_buf_size</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><strong>std::deque<int> ideq(512, 1)</strong></p>
<p><code>int 类型的 deque 决定了 __deque_buf_size（一块 buffer 的大小）为 512 / sizeof(int) = 128</code>。</p>
<p><code>512 个元素决定了中控器需要 __num_nodes（buffer 块数）为 (512 / 128) + 1) = 5</code>。</p>
<p><code>中控器大小 _M_map_size 为 std::max(8, (buffer 个数 + 2)) = 8</code>。</p>
<br/>

<img title="deque 构造示例" src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/deque-construct.png">

<br/>

<h3 id="deque-之-push-back"><a href="#deque-之-push-back" class="headerlink" title="deque 之 push_back()"></a>deque 之 push_back()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 最后 buffer 还有2个及以上的元素备用空间</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span>
                          <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token operator">++</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span>
 <span class="token function">_M_push_back_aux</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最后 buffer 只剩1个元素备用空间</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">_M_push_back_aux</span><span class="token punctuation">(</span>_Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token function">__throw_length_error</span><span class="token punctuation">(</span>
 <span class="token function">__N</span><span class="token punctuation">(</span><span class="token string">"cannot create std::deque larger than max_size()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">_M_reserve_map_at_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 如果中控器后端节点不足，必须重换一个 map</span>
<span class="token comment">// 配置一个新的节点（新 buffer 块）</span>
<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
__try <span class="token punctuation">&#123;</span>
 <span class="token comment">// 针对标的元素设值</span>
 _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span>
                          <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">,</span>
                          std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 改变 finish，指向新节点（新 buffer 块）</span>
 <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 设定 finish 状态</span>
 <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_first<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 中控器后端节点不足，重新分配中控器空间</span>
<span class="token keyword">void</span> <span class="token function">_M_reserve_map_at_back</span><span class="token punctuation">(</span>size_type __nodes_to_add <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>__nodes_to_add <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size
      <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">_M_reallocate_map</span><span class="token punctuation">(</span>__nodes_to_add<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img title="push_back" src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/deque-push-back.png">

<br/>

<h3 id="deque-之-pop-back"><a href="#deque-之-pop-back" class="headerlink" title="deque 之 pop_back()"></a>deque 之 pop_back()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
<span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 最后一个 buffer 有一个或者更多的元素</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur
   <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token operator">--</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">;</span>				<span class="token comment">// 调整 finish.cur 指针</span>
 <span class="token comment">// 析构最后一个元素</span>
 _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span>
                        <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 最后一个 buffer 没有任何元素</span>
<span class="token keyword">else</span>
 <span class="token function">_M_pop_back_aux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放 buffer 操作</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 当 finish 指向的 buffer 没有任何一个元素时调用</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">_M_pop_back_aux</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 释放最后一个 buffer</span>
<span class="token function">_M_deallocate_node</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_first<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调整 finish 指向上一个 buffer</span>
<span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 找到 buffer（原来倒数第二个 buffer 块） 的最后一个元素</span>
<span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 析构元素</span>
_Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="deque-之-push-front"><a href="#deque-之-push-front" class="headerlink" title="deque 之 push_front()"></a>deque 之 push_front()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">push_front</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 第一个 buffer 有元素备用空间</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
_Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span>
                       <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
                       __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">--</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">;</span>	<span class="token comment">// 调整 第一块 buffer 使用状态</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span>
<span class="token function">_M_push_front_aux</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 第一个 buffer 已无元素备用空间</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_M_push_front_aux</span><span class="token punctuation">(</span>_Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">__throw_length_error</span><span class="token punctuation">(</span>
<span class="token function">__N</span><span class="token punctuation">(</span><span class="token string">"cannot create std::deque larger than max_size()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">_M_reserve_map_at_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果中控器前端节点不足，重新分配中控器空间</span>
<span class="token comment">// 配置一个新的节点（新 buffer 块）</span>
<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
__try <span class="token punctuation">&#123;</span>
<span class="token comment">// 改变 start 指向新的 buffer 块</span>
<span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node
                                       <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// start 的 cur 指向 新插入元素</span>
    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 设定新插入元素的值</span>
    _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span>
                             <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">,</span>
                             std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 中控器前端节点不足，重新分配中控器空间</span>
<span class="token keyword">void</span> <span class="token function">_M_reserve_map_at_front</span><span class="token punctuation">(</span>size_type __nodes_to_add <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__nodes_to_add <span class="token operator">></span> <span class="token function">size_type</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node
                                 <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">_M_reallocate_map</span><span class="token punctuation">(</span>__nodes_to_add<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img title="push_front" src ="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/deque-push-front.png">

<br/>

<h3 id="deque-之-pop-front"><a href="#deque-之-pop-front" class="headerlink" title="deque 之 pop_front()"></a>deque 之 pop_front()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
<span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第一个 buffer 有超过1个元素</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur
   <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span>
                        <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token operator">++</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 第一个 buffer 仅有一个元素，涉及 buffer 释放 </span>
<span class="token keyword">else</span>
 <span class="token function">_M_pop_front_aux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 当第一个 buffer 仅有一个元素时，会调用</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">_M_pop_front_aux</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 将第一个 buffer 仅剩的唯一一个元素析构</span>
_Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 释放第一个 buffer</span>
<span class="token function">_M_deallocate_node</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_first<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调整 迭代器 start 的状态指向原来第2个 buffer 块</span>
<span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//</span>
<span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_first<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="重新配置中控器"><a href="#重新配置中控器" class="headerlink" title="重新配置中控器"></a>重新配置中控器</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span>
<span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">_M_reallocate_map</span><span class="token punctuation">(</span>size_type __nodes_to_add<span class="token punctuation">,</span> <span class="token keyword">bool</span> __add_at_front<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">const</span> size_type __old_num_nodes
 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> size_type __new_num_nodes <span class="token operator">=</span> __old_num_nodes <span class="token operator">+</span> __nodes_to_add<span class="token punctuation">;</span>

_Map_pointer __new_nstart<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">*</span> __new_num_nodes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 __new_nstart <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size
                                           <span class="token operator">-</span> __new_num_nodes<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
      <span class="token operator">+</span> <span class="token punctuation">(</span>__add_at_front <span class="token operator">?</span> __nodes_to_add <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__new_nstart <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span>
      std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">,</span>
                <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                __new_nstart<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      std<span class="token double-colon punctuation">::</span><span class="token function">copy_backward</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">,</span>
                         <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                         __new_nstart <span class="token operator">+</span> __old_num_nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    size_type __new_map_size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size
      <span class="token operator">+</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size<span class="token punctuation">,</span>
                 __nodes_to_add<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment">// 配置一块新的空间， 准备给新的 map （中控器）使用</span>
    _Map_pointer __new_map <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate_map</span><span class="token punctuation">(</span>__new_map_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __new_nstart <span class="token operator">=</span> __new_map <span class="token operator">+</span> <span class="token punctuation">(</span>__new_map_size <span class="token operator">-</span> __new_num_nodes<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
      <span class="token operator">+</span> <span class="token punctuation">(</span>__add_at_front <span class="token operator">?</span> __nodes_to_add <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 拷贝原 中控器 内容</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">,</span>
              <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
              __new_nstart<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 释放原 map（中控器）</span>
    <span class="token function">_M_deallocate_map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 新 map （中控器）的起始地址和大小</span>
    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map <span class="token operator">=</span> __new_map<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size <span class="token operator">=</span> __new_map_size<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 重新设置 start、finish 迭代器</span>
  <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span>__new_nstart<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span>__new_nstart <span class="token operator">+</span> __old_num_nodes <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="deque-之-insert"><a href="#deque-之-insert" class="headerlink" title="deque 之 insert()"></a>deque 之 insert()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator
<span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">insert</span><span class="token punctuation">(</span>const_iterator __position<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 如果插入点是 deque 的最前端</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>__position<span class="token punctuation">.</span>_M_cur <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 交给 push_front() 做</span>
 <span class="token function">push_front</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 如果插入点是 deque 的最尾端</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__position<span class="token punctuation">.</span>_M_cur <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 交给 push_back() 做</span>
 <span class="token function">push_back</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span>
 iterator __tmp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">;</span>
 <span class="token operator">--</span>__tmp<span class="token punctuation">;</span>
 <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span>
 <span class="token keyword">return</span> <span class="token function">_M_insert_aux</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">_M_const_cast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator
<span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_M_insert_aux</span><span class="token punctuation">(</span>iterator __pos<span class="token punctuation">,</span> _Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 value_type <span class="token function">__x_copy</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 插入点之前的元素个数</span>
 difference_type __index <span class="token operator">=</span> __pos <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">;</span>
 <span class="token comment">//如果插入点之前的元素较少</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>size_type<span class="token operator">></span></span></span><span class="token punctuation">(</span>__index<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">//  push_front 进行一个前端元素的添加</span>
   <span class="token function">push_front</span><span class="token punctuation">(</span><span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   iterator __front1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">;</span>
   <span class="token operator">++</span>__front1<span class="token punctuation">;</span>
   iterator __front2 <span class="token operator">=</span> __front1<span class="token punctuation">;</span>
   <span class="token operator">++</span>__front2<span class="token punctuation">;</span>
   __pos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">+</span> __index<span class="token punctuation">;</span>
   iterator __pos1 <span class="token operator">=</span> __pos<span class="token punctuation">;</span>
   <span class="token operator">++</span>__pos1<span class="token punctuation">;</span>
   <span class="token comment">// 将插入点之前的元素前移，腾出1个元素空间</span>
   <span class="token function">_GLIBCXX_MOVE3</span><span class="token punctuation">(</span>__front2<span class="token punctuation">,</span> __pos1<span class="token punctuation">,</span> __front1<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">//  push_back 进行一个后端元素的添加</span>
   <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   iterator __back1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">;</span>
   <span class="token operator">--</span>__back1<span class="token punctuation">;</span>
   iterator __back2 <span class="token operator">=</span> __back1<span class="token punctuation">;</span>
   <span class="token operator">--</span>__back2<span class="token punctuation">;</span>
   __pos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">+</span> __index<span class="token punctuation">;</span>
   <span class="token comment">// 将插入点后面的元素再往后移，腾出1个元素空间</span>
   <span class="token function">_GLIBCXX_MOVE_BACKWARD3</span><span class="token punctuation">(</span>__pos<span class="token punctuation">,</span> __back2<span class="token punctuation">,</span> __back1<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token comment">// 插入点设置新值</span>
 <span class="token operator">*</span>__pos <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__x_copy<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> __pos<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="deque-之-erase"><a href="#deque-之-erase" class="headerlink" title="deque 之 erase()"></a>deque 之 erase()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 按个擦除</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator
<span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">_M_erase</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
iterator __next <span class="token operator">=</span> __position<span class="token punctuation">;</span>
<span class="token operator">++</span>__next<span class="token punctuation">;</span>
<span class="token comment">// 擦除点之前的元素个数</span>
<span class="token keyword">const</span> difference_type __index <span class="token operator">=</span> __position <span class="token operator">-</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如果擦除点之前的元素个数较少</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>size_type<span class="token operator">></span></span></span><span class="token punctuation">(</span>__index<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 前移擦除点之前的元素，只有调用 pop_front()</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__position <span class="token operator">!=</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token function">_GLIBCXX_MOVE_BACKWARD3</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __position<span class="token punctuation">,</span> __next<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 擦除点之后的元素个数较少</span>
 <span class="token comment">// 前移擦除点之后的元素，只有调用 pop_back()</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__next <span class="token operator">!=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token function">_GLIBCXX_MOVE3</span><span class="token punctuation">(</span>__next<span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __position<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">return</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __index<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 按区间擦除</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator
<span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">_M_erase</span><span class="token punctuation">(</span>iterator __first<span class="token punctuation">,</span> iterator __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span>
 <span class="token keyword">return</span> __first<span class="token punctuation">;</span>
<span class="token comment">// 擦除区间是真个 deque</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> __last <span class="token operator">==</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 计算擦除区间长度</span>
 <span class="token keyword">const</span> difference_type __n <span class="token operator">=</span> __last <span class="token operator">-</span> __first<span class="token punctuation">;</span>
 <span class="token keyword">const</span> difference_type __elems_before <span class="token operator">=</span> __first <span class="token operator">-</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 如果要擦除区间前面的元素较少</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>size_type<span class="token operator">></span></span></span><span class="token punctuation">(</span>__elems_before<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> __n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// 后移前方的元素</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token function">_GLIBCXX_MOVE_BACKWARD3</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 析构 冗余的元素</span>
   <span class="token function">_M_erase_at_begin</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// 前移后方的元素</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>__last <span class="token operator">!=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token function">_GLIBCXX_MOVE3</span><span class="token punctuation">(</span>__last<span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __first<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 析构 冗余的元素</span>
   <span class="token function">_M_erase_at_end</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">return</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __elems_before<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 将冗余的 buffer 释放</span>
<span class="token keyword">void</span> <span class="token function">_M_erase_at_begin</span><span class="token punctuation">(</span>iterator __pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">_M_destroy_data</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __pos<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">_M_destroy_nodes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">,</span> __pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">=</span> __pos<span class="token punctuation">;</span> <span class="token comment">// 设置 deque 新起点</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 将冗余的 buffer 释放</span>
<span class="token keyword">void</span> <span class="token function">_M_erase_at_end</span><span class="token punctuation">(</span>iterator __pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">_M_destroy_data</span><span class="token punctuation">(</span>__pos<span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">_M_destroy_nodes</span><span class="token punctuation">(</span>__pos<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">=</span> __pos<span class="token punctuation">;</span> <span class="token comment">// 设置 deque 新尾点</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="deque-之-clear"><a href="#deque-之-clear" class="headerlink" title="deque 之 clear()"></a>deque 之 clear()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
<span class="token function">_M_erase_at_end</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br/>

<h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p><code>属于 container adaptor，可以指定其他支持 back()、push_back()、pop_back() 接口的容器作为 stack 的内部结构，如：std::stack&lt;int, std::list&lt;int&gt;&gt; linkedStack 。</code></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/stack.png">

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*   
*  This is not a true container, but an @e adaptor.  It holds
   *  another container, and provides a wrapper interface to that
   *  container.  The wrapper is what enforces strict
   *  first-in-last-out %stack behavior.
   *
   *  The second template parameter defines the type of the underlying
   *  sequence/container.  It defaults to std::deque, but it can be
   *  any type that supports @c back, @c push_back, and @c pop_back,
   *  such as std::list, std::vector, or an appropriate user-defined
   *  type.
*/</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span> <span class="token operator">=</span> deque<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> <span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">stack</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>value_type		value_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>reference		reference<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>const_reference	const_reference<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>size_type		size_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span>	       _Sequence			container_type<span class="token punctuation">;</span>
  _GLIBCXX_NODISCARD <span class="token keyword">bool</span>
    <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
  <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
  <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  reference <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  const_reference <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    <span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span>
  <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token punctuation">)</span> <span class="token function">emplace</span><span class="token punctuation">(</span>_Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Seq</span><span class="token operator">></span>
  <span class="token keyword">inline</span> <span class="token keyword">bool</span>
  <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> stack<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Seq<span class="token operator">></span><span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> stack<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Seq<span class="token operator">></span><span class="token operator">&amp;</span> __y<span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> __x<span class="token punctuation">.</span>c <span class="token operator">==</span> __y<span class="token punctuation">.</span>c<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Seq</span><span class="token operator">></span>
  <span class="token keyword">inline</span> <span class="token keyword">bool</span>
  <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> stack<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Seq<span class="token operator">></span><span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> stack<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Seq<span class="token operator">></span><span class="token operator">&amp;</span> __y<span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> __x<span class="token punctuation">.</span>c <span class="token operator">&lt;</span> __y<span class="token punctuation">.</span>c<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">// ...</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
  <span class="token comment">//  See queue::c for notes on this name.</span>
  _Sequence c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p><code>同理，属于 container adaptor，可以指定其他支持 back()、push_back()、pop_front() 接口的容器作为 queue 的内部结构，如：std::queue&lt;int, std::list&lt;int&gt;&gt; linkedQueue 。</code></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/queue.png">

<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span> <span class="token operator">=</span> deque<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> <span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">queue</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span>	<span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>value_type		value_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span>	<span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>reference		reference<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span>	<span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>const_reference	const_reference<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span>	<span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>size_type		size_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span>		_Sequence			container_type<span class="token punctuation">;</span>

 _GLIBCXX_NODISCARD <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
 <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

 size_type  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
 <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

 reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 reference <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span>
 <span class="token punctuation">&#123;</span> c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

 <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   c<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Seq</span><span class="token operator">></span>
 <span class="token keyword">inline</span> <span class="token keyword">bool</span>
 <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> queue<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Seq<span class="token operator">></span><span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> queue<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Seq<span class="token operator">></span><span class="token operator">&amp;</span> __y<span class="token punctuation">)</span>
 <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> __x<span class="token punctuation">.</span>c <span class="token operator">==</span> __y<span class="token punctuation">.</span>c<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

 <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Seq</span><span class="token operator">></span>
 <span class="token keyword">inline</span> <span class="token keyword">bool</span>
 <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> queue<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Seq<span class="token operator">></span><span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> queue<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Seq<span class="token operator">></span><span class="token operator">&amp;</span> __y<span class="token punctuation">)</span>
 <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> __x<span class="token punctuation">.</span>c <span class="token operator">&lt;</span> __y<span class="token punctuation">.</span>c<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">protected</span><span class="token operator">:</span>
 _Sequence c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h2 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h2><p><code>非 STL 容器组件，作为 priority_queue 的底层机制。</code></p>
<p><code>binary heap 是 complete binary tree（完全二叉树）的数组实现。</code></p>
<p><code>一个数组 + 一组 heap 算法（插入元素、删除元素、取极值、排列成 heap）。</code></p>
<p><code>对于整个堆，以及子堆， 最大堆（最小堆）的最大（最小值）在（子）堆的根节点。</code></p>
<p><br/><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/binary-heap.png"></p>
<br/>

<h3 id="push-heap"><a href="#push-heap" class="headerlink" title="push_heap()"></a>push_heap()</h3><p><code>为了满足完全二叉树的条件：</code></p>
<p><code>首先，新加入元素置于尾部。</code></p>
<p><code>其次，为了满足 max-heap 或者 min-heap 等的条件，需要做 percolate up(上溯) 调整。</code></p>
<p><code>令当前洞号为添加的新尾部节点，和其父节点的键值对比，如果符合对比策略，就让父节点和子节点对换位置，更新洞号，一直上溯，直到不需要对换或到根节点为止。</code></p>
<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span>
<span class="token function">push_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _RandomAccessIterator __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_RandomAccessIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type
    _DistanceType<span class="token punctuation">;</span>
<span class="token comment">//...</span>
<span class="token comment">// 调用如下函数时，新元素已经置于底部容器最尾端</span>
__gnu_cxx<span class="token double-colon punctuation">::</span>__ops<span class="token double-colon punctuation">::</span>_Iter_less_val __comp<span class="token punctuation">;</span>
_ValueType __value <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>__last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span><span class="token function">__push_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> <span class="token function">_DistanceType</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__last <span class="token operator">-</span> __first<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             <span class="token function">_DistanceType</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__value<span class="token punctuation">)</span><span class="token punctuation">,</span> __comp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 允许指定比较策略</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Distance</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Compare</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">__push_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span>
        _Distance __holeIndex<span class="token punctuation">,</span> _Distance __topIndex<span class="token punctuation">,</span> _Tp __value<span class="token punctuation">,</span>
        _Compare<span class="token operator">&amp;</span> __comp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 找到压入的尾端节点的父节点位置</span>
 _Distance __parent <span class="token operator">=</span> <span class="token punctuation">(</span>__holeIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
 <span class="token comment">// 当尚未到达顶端，且父节点在 __comp 比较策略下符合 value 值 </span>
 <span class="token keyword">while</span> <span class="token punctuation">(</span>__holeIndex <span class="token operator">></span> __topIndex <span class="token operator">&amp;&amp;</span> <span class="token function">__comp</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __parent<span class="token punctuation">,</span> __value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 洞值（当前子节点）为父节点值</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __holeIndex<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调整洞号，继续 percolateUp(上溯)</span>
    __holeIndex <span class="token operator">=</span> __parent<span class="token punctuation">;</span>
    __parent <span class="token operator">=</span> <span class="token punctuation">(</span>__holeIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span> <span class="token comment">// 持续到满足 heap 次序特性或者顶端为止</span>
 <span class="token comment">// 更新终止处的值</span>
 <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __holeIndex<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img title="push_heap" src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/push-heap.png">

<p><br/><br/></p>
<h3 id="pop-heap"><a href="#pop-heap" class="headerlink" title="pop_heap()"></a>pop_heap()</h3><p><code>要保持完全二叉树的条件：</code></p>
<p><code>首先，记录最后一个叶子节点（即尾节点）的值备用。</code></p>
<p><code>其次，将根节点的值替换到尾节点，不会被立即弹出。如果需要，可后续调用 back()、pop_back() 访取。</code></p>
<p><code>为了满足 max-heap 或者 min-heap 等的条件，需要做 percolate down(下溯) 调整。</code></p>
<p><code>令洞号为根节点，和其孩子节点（包括左孩子和右孩子）做对比，如果符合某种比较策略，就互换值，更新洞号，继续下溯，直到子堆叶子节点为止，然后将整个堆的最后一个叶子节点（最下层，最右边）的值，设给这个“已经到达子堆叶层的洞号节点”，再对这个洞号节点进行 percolate up （上溯）。</code></p>
<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Compare</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pop_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span>
             _RandomAccessIterator __last<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>__last <span class="token operator">-</span> __first <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 自定义 compare 规则</span>
 <span class="token keyword">typedef</span> <span class="token function">__decltype</span><span class="token punctuation">(</span>__comp<span class="token punctuation">)</span> _Cmp<span class="token punctuation">;</span>
 __gnu_cxx<span class="token double-colon punctuation">::</span>__ops<span class="token double-colon punctuation">::</span>_Iter_comp_iter<span class="token operator">&lt;</span>_Cmp<span class="token operator">></span> <span class="token function">__cmp</span><span class="token punctuation">(</span><span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__comp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token operator">--</span>__last<span class="token punctuation">;</span> <span class="token comment">// 调整 last 指向最后一个叶子节点</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">__pop_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Compare</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__pop_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _RandomAccessIterator __last<span class="token punctuation">,</span>
  									 _RandomAccessIterator __result<span class="token punctuation">,</span> _Compare<span class="token operator">&amp;</span> __comp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_RandomAccessIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>value_type
 _ValueType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_RandomAccessIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type
 _DistanceType<span class="token punctuation">;</span>
<span class="token comment">// 先记录尾节点（最后一个叶子节点值）</span>
_ValueType __value <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token operator">*</span>__result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将要 pop 的元素（即容器的第一个元素）赋值到 尾节点</span>
<span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// _DistanceType(0) 代表以根节点为洞号，进行下溯，重新调整 heap</span>
std<span class="token double-colon punctuation">::</span><span class="token function">__adjust_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> <span class="token function">_DistanceType</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  <span class="token function">_DistanceType</span><span class="token punctuation">(</span>__last <span class="token operator">-</span> __first<span class="token punctuation">)</span><span class="token punctuation">,</span>
                  <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__value<span class="token punctuation">)</span><span class="token punctuation">,</span> __comp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Distance</span><span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Compare</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">__adjust_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _Distance __holeIndex<span class="token punctuation">,</span>
       				 _Distance __len<span class="token punctuation">,</span> _Tp __value<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">const</span> _Distance __topIndex <span class="token operator">=</span> __holeIndex<span class="token punctuation">;</span>
_Distance __secondChild <span class="token operator">=</span> __holeIndex<span class="token punctuation">;</span>

<span class="token comment">// (__len - 1) / 2 指向的是最后一个非叶子节点的节点</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>__secondChild <span class="token operator">&lt;</span> <span class="token punctuation">(</span>__len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 首先，定位到右孩子节点</span>
 __secondChild <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>__secondChild <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 如果左孩子节点比右孩子节点更符合 comp 策略（大），则定位到左孩子节点</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__comp</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __secondChild<span class="token punctuation">,</span> __first <span class="token operator">+</span> <span class="token punctuation">(</span>__secondChild <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   __secondChild<span class="token operator">--</span><span class="token punctuation">;</span>
 <span class="token comment">// 让当前洞号的孩子节点覆盖当前洞号值</span>
 <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __holeIndex<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __secondChild<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 更新当前洞号指向孩子节点，继续下溯</span>
 __holeIndex <span class="token operator">=</span> __secondChild<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// 如果当前洞号的孩子节点大于尾节点的父节点停止下溯</span>

<span class="token comment">// 特殊处理</span>
<span class="token comment">// __len &amp; 1 == 0 表示 __len 为偶数， </span>
<span class="token comment">// 即尾端结点属于左孩子节点类型,</span>
<span class="token comment">// 并且当前 __secondChild 指向尾节点的父节点</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__len <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> __secondChild <span class="token operator">==</span> <span class="token punctuation">(</span>__len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 将 __secondChild 定位到最尾端节点（左孩子节点类型）</span>
 __secondChild <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>__secondChild <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __holeIndex<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> <span class="token punctuation">(</span>__secondChild <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 __holeIndex <span class="token operator">=</span> __secondChild <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">__decltype</span><span class="token punctuation">(</span>__gnu_cxx<span class="token double-colon punctuation">::</span>__ops<span class="token double-colon punctuation">::</span><span class="token function">__iter_comp_val</span><span class="token punctuation">(</span><span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__comp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token function">__cmp</span><span class="token punctuation">(</span><span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__comp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span><span class="token function">__push_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __holeIndex<span class="token punctuation">,</span> __topIndex<span class="token punctuation">,</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__value<span class="token punctuation">)</span><span class="token punctuation">,</span> __cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/pop-heap.png">

<br/>

<p><strong>__adjust_heap() 中 最后一步 __push_heap() 的重要性</strong></p>
<br/>

<h3 id="sort-heap"><a href="#sort-heap" class="headerlink" title="sort_heap()"></a>sort_heap()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Compare</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">__sort_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _RandomAccessIterator __last<span class="token punctuation">,</span>
              _Compare<span class="token operator">&amp;</span> __comp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 执行一次 __pop_heap()，（根据__comp比较策略）极值放在尾端</span>
 <span class="token comment">// 再执行一次 __pop_heap()，次极值放在新的尾端，</span>
 <span class="token comment">// 如此下去，最后得到的便是排好序的区间 [first, last)</span>
 <span class="token keyword">while</span> <span class="token punctuation">(</span>__last <span class="token operator">-</span> __first <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">--</span>__last<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">__pop_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __comp<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/sort-heap.png">

<br/>

<h3 id="make-heap"><a href="#make-heap" class="headerlink" title="make_heap()"></a>make_heap()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Compare</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">__make_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _RandomAccessIterator __last<span class="token punctuation">,</span>
      _Compare<span class="token operator">&amp;</span> __comp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_RandomAccessIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>value_type _ValueType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_RandomAccessIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type _DistanceType<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>__last <span class="token operator">-</span> __first <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> _DistanceType __len <span class="token operator">=</span> __last <span class="token operator">-</span> __first<span class="token punctuation">;</span>
  <span class="token comment">// 由于任何叶节点都不需要执行 percolate down，所以指定 __parent = (__len - 2) / 2</span>
<span class="token comment">// parent 对应的是 之前提及的 holeIndex</span>
_DistanceType __parent <span class="token operator">=</span> <span class="token punctuation">(</span>__len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 重排以 parent 为首的子树。</span>
 _ValueType __value <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">__adjust_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __parent<span class="token punctuation">,</span> __len<span class="token punctuation">,</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__value<span class="token punctuation">)</span><span class="token punctuation">,</span> __comp<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__parent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span><span class="token punctuation">;</span>
 __parent<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/priority_queue.png">

<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span> <span class="token operator">=</span> vector<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Compare</span>  <span class="token operator">=</span> less<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>value_type<span class="token operator">></span> <span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">priority_queue</span> <span class="token punctuation">&#123;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">201103L</span></span></span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">using</span> _Uses <span class="token operator">=</span> <span class="token keyword">typename</span>
<span class="token class-name">enable_if</span><span class="token operator">&lt;</span>uses_allocator<span class="token operator">&lt;</span>_Sequence<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token operator">></span><span class="token double-colon punctuation">::</span>type<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">201703L</span></span></span>
<span class="token keyword">static_assert</span><span class="token punctuation">(</span>is_same<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>value_type<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span>
             <span class="token string">"value_type must be the same as the underlying container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// C++17</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// C++11</span></span>

<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span>	<span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>value_type		value_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span>	<span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>reference		reference<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span>	<span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>const_reference	const_reference<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span>	<span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>size_type		size_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span>		_Sequence			container_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span>	   _Compare				value_compare<span class="token punctuation">;</span>

<span class="token keyword">protected</span><span class="token operator">:</span>
_Sequence  c<span class="token punctuation">;</span>
_Compare   comp<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token keyword">explicit</span> <span class="token function">priority_queue</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Compare<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Sequence<span class="token operator">&amp;</span> __s<span class="token punctuation">)</span>
 <span class="token operator">:</span> <span class="token function">c</span><span class="token punctuation">(</span>__s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">comp</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
   std<span class="token double-colon punctuation">::</span><span class="token function">make_heap</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> comp<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

_GLIBCXX_NODISCARD <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

const_reference <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
 <span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">push_heap</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> comp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 取出极值放在尾端，重排 heap</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">pop_heap</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> comp<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 真正意义的取出元素</span>
 c<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">emplace</span><span class="token punctuation">(</span>_Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 c<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">push_heap</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> comp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="slist"><a href="#slist" class="headerlink" title="slist"></a>slist</h2><br/>

<table>
<thead>
<tr>
<th align="center">slist</th>
<th align="center">list</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>singly</strong> linked list</td>
<td align="center"><strong>double</strong> linked list</td>
</tr>
<tr>
<td align="center">Forward Iterator</td>
<td align="center">Bidirectional Iterator</td>
</tr>
<tr>
<td align="center">头插法插入新元素，只提供 <strong>push_front()</strong></td>
<td align="center"></td>
</tr>
</tbody></table>
<br/>

<h3 id="slist-的节点和迭代器数据结构"><a href="#slist-的节点和迭代器数据结构" class="headerlink" title="slist 的节点和迭代器数据结构"></a>slist 的节点和迭代器数据结构</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">_Slist_node_base</span> <span class="token punctuation">&#123;</span>
  _Slist_node_base<span class="token operator">*</span> _M_next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">_Slist_node</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_Slist_node_base</span></span> <span class="token punctuation">&#123;</span>
  _Tp _M_data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">_Slist_iterator_base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> size_t                    size_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> ptrdiff_t                 difference_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>forward_iterator_tag iterator_category<span class="token punctuation">;</span> <span class="token comment">// 单向</span>

_Slist_node_base<span class="token operator">*</span> _M_node<span class="token punctuation">;</span>

<span class="token function">_Slist_iterator_base</span><span class="token punctuation">(</span>_Slist_node_base<span class="token operator">*</span> __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_node</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">_M_incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
_M_node <span class="token operator">=</span> _M_node<span class="token operator">-></span>_M_next<span class="token punctuation">;</span> 	<span class="token comment">// 前进一个节点</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Slist_iterator_base<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
<span class="token keyword">return</span> _M_node <span class="token operator">==</span> __x<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Slist_iterator_base<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
<span class="token keyword">return</span> _M_node <span class="token operator">!=</span> __x<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 迭代器结构</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Ref</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Ptr</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">_Slist_iterator</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_Slist_iterator_base</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> _Slist_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token operator">></span>             iterator<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Slist_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span><span class="token operator">></span> const_iterator<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Slist_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Ref<span class="token punctuation">,</span> _Ptr<span class="token operator">></span>             _Self<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> _Tp              value_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Ptr             pointer<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Ref             reference<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> _Node<span class="token punctuation">;</span>

<span class="token keyword">explicit</span> <span class="token function">_Slist_iterator</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span> __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_Slist_iterator_base</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token comment">// 因为       iterator end()  &#123; return iterator(0); &#125;</span>
<span class="token function">_Slist_iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_Slist_iterator_base</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token function">_Slist_iterator</span><span class="token punctuation">(</span><span class="token keyword">const</span> iterator<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_Slist_iterator_base</span><span class="token punctuation">(</span>__x<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

reference <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> _M_node<span class="token punctuation">)</span><span class="token operator">-></span>_M_data<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

pointer <span class="token keyword">operator</span><span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
<span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

_Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">_M_incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 前进一个节点</span>
<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

_Self <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  _Self __tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token function">_M_incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 前进一个节点</span>
  <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/slist-node-and-iterator.png">



<br/>

<br/>

<h3 id="slist-之-新节点创建"><a href="#slist-之-新节点创建" class="headerlink" title="slist 之 新节点创建"></a>slist 之 新节点创建</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> _Slist_node_base<span class="token operator">*</span>
 <span class="token function">__slist_make_link</span><span class="token punctuation">(</span>_Slist_node_base<span class="token operator">*</span> __prev_node<span class="token punctuation">,</span> _Slist_node_base<span class="token operator">*</span> __new_node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 __new_node<span class="token operator">-></span>_M_next <span class="token operator">=</span> __prev_node<span class="token operator">-></span>_M_next<span class="token punctuation">;</span>
 __prev_node<span class="token operator">-></span>_M_next <span class="token operator">=</span> __new_node<span class="token punctuation">;</span>
 <span class="token keyword">return</span> __new_node<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// _Slist_base</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">_Slist_base</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> _Alloc<span class="token double-colon punctuation">::</span><span class="token keyword">template</span> <span class="token class-name">rebind</span><span class="token operator">&lt;</span><span class="token class-name">_Slist_node</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token operator">></span> <span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token class-name">other</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token double-colon punctuation">::</span><span class="token keyword">template</span> rebind<span class="token operator">&lt;</span>_Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> <span class="token operator">></span><span class="token double-colon punctuation">::</span>other
 _Node_alloc<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Alloc allocator_type<span class="token punctuation">;</span>

allocator_type <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> <span class="token operator">*</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> _Node_alloc<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token function">_Slist_base</span><span class="token punctuation">(</span><span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_Node_alloc</span><span class="token punctuation">(</span>__a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">.</span>_M_next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token operator">~</span><span class="token function">_Slist_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 <span class="token function">_M_erase_after</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">protected</span><span class="token operator">:</span>
_Slist_node_base _M_head<span class="token punctuation">;</span> <span class="token comment">// 头部，非指针类型</span>

_Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">*</span> <span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> _Node_alloc<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">_M_put_node</span><span class="token punctuation">(</span>_Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">*</span> __p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 _Node_alloc<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">protected</span><span class="token operator">:</span>
_Slist_node_base<span class="token operator">*</span> <span class="token function">_M_erase_after</span><span class="token punctuation">(</span>_Slist_node_base<span class="token operator">*</span> __pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 _Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">*</span> __next <span class="token operator">=</span> <span class="token punctuation">(</span>_Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>__pos<span class="token operator">-></span>_M_next<span class="token punctuation">)</span><span class="token punctuation">;</span>
 _Slist_node_base<span class="token operator">*</span> __next_next <span class="token operator">=</span> __next<span class="token operator">-></span>_M_next<span class="token punctuation">;</span>
 __pos<span class="token operator">-></span>_M_next <span class="token operator">=</span> __next_next<span class="token punctuation">;</span>
 <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__next<span class="token operator">-></span>_M_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">_M_put_node</span><span class="token punctuation">(</span>__next<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> __next_next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
_Slist_node_base<span class="token operator">*</span> <span class="token function">_M_erase_after</span><span class="token punctuation">(</span>_Slist_node_base<span class="token operator">*</span><span class="token punctuation">,</span> _Slist_node_base<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// slist</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span> <span class="token operator">=</span> allocator<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> <span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">slist</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">private</span> <span class="token class-name">_Slist_base</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Alloc</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
<span class="token keyword">typedef</span> _Slist_base<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Alloc<span class="token operator">></span> _Base<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token keyword">typedef</span> _Tp               value_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> value_type<span class="token operator">*</span>       pointer<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">const</span> value_type<span class="token operator">*</span> const_pointer<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> value_type<span class="token operator">&amp;</span>       reference<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> const_reference<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> size_t            size_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> ptrdiff_t         difference_type<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> _Slist_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token operator">></span>             iterator<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Slist_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span><span class="token operator">></span> const_iterator<span class="token punctuation">;</span>

  <span class="token comment">// 构造元素 </span>
_Node<span class="token operator">*</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 _Node<span class="token operator">*</span> __node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 __try <span class="token punctuation">&#123;</span>
   <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__node<span class="token operator">-></span>_M_data<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
   __node<span class="token operator">-></span>_M_next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_put_node</span><span class="token punctuation">(</span>__node<span class="token punctuation">)</span><span class="token punctuation">;</span>
   __throw_exception_again<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">return</span> __node<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 析构元素</span>
<span class="token keyword">void</span> <span class="token function">_M_put_node</span><span class="token punctuation">(</span>_Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">*</span> __p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 _Node_alloc<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

const_iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> <span class="token function">const_iterator</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token comment">// 互换 slist</span>
  <span class="token keyword">void</span>  <span class="token function">swap</span><span class="token punctuation">(</span>slist<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">,</span> __x<span class="token punctuation">.</span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

const_reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">)</span><span class="token operator">-></span>_M_data<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
  <span class="token comment">// 头插法插入一个元素</span>
<span class="token keyword">void</span> <span class="token function">push_front</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 <span class="token function">__slist_make_link</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">,</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token comment">// 弹出并删除头部元素</span>
<span class="token keyword">void</span> <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 _Node<span class="token operator">*</span> __node <span class="token operator">=</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">;</span>
 <span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">.</span>_M_next <span class="token operator">=</span> __node<span class="token operator">-></span>_M_next<span class="token punctuation">;</span>
 <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__node<span class="token operator">-></span>_M_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_put_node</span><span class="token punctuation">(</span>__node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 擦除元素</span>
iterator <span class="token function">erase</span><span class="token punctuation">(</span>iterator __pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_erase_after</span>
                 <span class="token punctuation">(</span><span class="token function">__slist_previous</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">,</span> __pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="slist-其他方法"><a href="#slist-其他方法" class="headerlink" title="slist 其他方法"></a>slist 其他方法</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> _Slist_node_base<span class="token operator">*</span>
<span class="token function">__slist_previous</span><span class="token punctuation">(</span>_Slist_node_base<span class="token operator">*</span> __head<span class="token punctuation">,</span> <span class="token keyword">const</span> _Slist_node_base<span class="token operator">*</span> __node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>__head <span class="token operator">&amp;&amp;</span> __head<span class="token operator">-></span>_M_next <span class="token operator">!=</span> __node<span class="token punctuation">)</span>
 __head <span class="token operator">=</span> __head<span class="token operator">-></span>_M_next<span class="token punctuation">;</span>
<span class="token keyword">return</span> __head<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

const_iterator <span class="token function">previous</span><span class="token punctuation">(</span>const_iterator __pos<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
<span class="token keyword">return</span> consß<span class="token function">t_iterator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">__slist_previous</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">,</span> __pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

_Node<span class="token operator">*</span> <span class="token function">_M_insert_after</span><span class="token punctuation">(</span>_Node_base<span class="token operator">*</span> __pos<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
<span class="token keyword">return</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">__slist_make_link</span><span class="token punctuation">(</span>__pos<span class="token punctuation">,</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

iterator <span class="token function">insert</span><span class="token punctuation">(</span>iterator __pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
<span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token function">_M_insert_after</span><span class="token punctuation">(</span><span class="token function">__slist_previous</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">,</span> __pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">,</span>
                               <span class="token function">value_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>iterator __pos<span class="token punctuation">,</span> size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">_M_insert_after_fill</span><span class="token punctuation">(</span><span class="token function">__slist_previous</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">,</span> __pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">,</span>  __n<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/slist-insert-erase.png">
]]></content>
      <categories>
        <category>C++ STL</category>
      </categories>
      <tags>
        <tag>拆书系列</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《STL 源码剖析》迭代器（iterators）</title>
    <url>/2021/06/23/C++%20STL/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%88iterators%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《STL-源码剖析》迭代器（iterators）与-traits-编程技法"><a href="#《STL-源码剖析》迭代器（iterators）与-traits-编程技法" class="headerlink" title="《STL 源码剖析》迭代器（iterators）与 traits 编程技法"></a>《STL 源码剖析》迭代器（iterators）与 traits 编程技法</h1><p><code>参考自《STL 源码剖析》-侯捷著。</code></p>
<br/>

<p><strong>在《Design Patterns》中，定义 iterator 模式为：提供一种方法，使之能够依次巡防某个聚合物（容器）所含的各个元素，而又无需暴露该聚合物的内部表述方式。</strong></p>
<p><em><em>迭代器是一种行为类似指针的对象，而指针的各种行为中最常见也最重要的便是内容提领（dereference）和成员访问（member access），因此迭代器最重要的工作就是对 operator</em> 和operator-&gt; 进行重载工作。</em>*</p>
<hr>
<p>STL 的中心思想在于：将数据容器（containers）和算法（algorithms）分开，彼此独立设计，最后再以粘胶剂将他们撮合在一起。而这个粘胶剂就是 <strong>iterator</strong>。</p>
<p><strong>以 std:find() 为例</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
   *  @brief Find the first occurrence of a value in a sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __val    The value to find.
   *  @return   The first iterator @c i in the range @p [__first,__last)
   *  such that @c *i == @p __val, or @p __last if no such iterator exists.
  */</span>
  <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
    <span class="token keyword">inline</span> _InputIterator
    <span class="token function">find</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">__find_if</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span>
                __gnu_cxx<span class="token double-colon punctuation">::</span>__ops<span class="token double-colon punctuation">::</span><span class="token function">__iter_equals_val</span><span class="token punctuation">(</span>__val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator iter <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>iter <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"find it"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以实现一个如下类似的迭代器类：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span>

<span class="token keyword">class</span> <span class="token class-name">ListItem</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 T <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _value<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>      
ListItem<span class="token operator">*</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _next<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
T _value<span class="token punctuation">;</span>
ListItem<span class="token operator">*</span> _next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">void</span> <span class="token function">insert_front</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">void</span> <span class="token function">insert_end</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token comment">//...</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  ListItem<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> _end<span class="token punctuation">;</span>
  ListItem<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> _front<span class="token punctuation">;</span>
  <span class="token keyword">long</span> _size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 自定义 List 迭代器类</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">ListIter</span> <span class="token punctuation">&#123;</span>

 Item<span class="token operator">*</span> ptr<span class="token punctuation">;</span>

<span class="token comment">//...</span>
 Item<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
 Item<span class="token operator">*</span> <span class="token keyword">operator</span><span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
 ListIter<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ptr <span class="token operator">=</span> ptr<span class="token operator">-></span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> mylist <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  ListIter<span class="token operator">&lt;</span>ListItem<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">begin</span><span class="token punctuation">(</span>mylist<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ListIter<span class="token operator">&lt;</span>ListItem<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">end</span><span class="token punctuation">(</span>mylist<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> iter <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>上面的做法为了实现一个针对 List 的迭代器，暴露了太多关于 List 的实现细节。STL 为了避免这种问题，将迭代器交给了各个容器去实现，这就是为什么 STL 容器都有自己专属的迭代器。</strong></p>
<h2 id="Traits-编程技法"><a href="#Traits-编程技法" class="headerlink" title="Traits 编程技法"></a>Traits 编程技法</h2><p>为了让迭代器和算法更好的结合，算法要用到迭代器的相应特性（traits），包括<code> value type、difference type、reference type、pointer type、iterator_category</code>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// _GLIBCXX_RESOLVE_LIB_DEFECTS</span>
<span class="token comment">// 2408. SFINAE-friendly common_type/iterator_traits is missing in C++14</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token operator">=</span> __void_t<span class="token operator">&lt;</span><span class="token operator">>></span>
<span class="token keyword">struct</span> <span class="token class-name">__iterator_traits</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__iterator_traits</span><span class="token operator">&lt;</span>_Iterator<span class="token punctuation">,</span>
__void_t<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>iterator_category<span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>difference_type<span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>pointer<span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>reference<span class="token operator">>></span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>iterator_category iterator_category<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>value_type        value_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>difference_type   difference_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>pointer           pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>reference         reference<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 针对原生指针而设计的偏特化版本</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">typedef</span> random_access_iterator_tag iterator_category<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp                         value_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> ptrdiff_t                   difference_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp<span class="token operator">*</span>                        pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp<span class="token operator">&amp;</span>                        reference<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 针对原生（pointer-to-const）指针而设计的偏特化版本</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span><span class="token keyword">const</span> _Tp<span class="token operator">*</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> random_access_iterator_tag iterator_category<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Tp                         value_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> ptrdiff_t                   difference_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span>                  pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span>                  reference<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><strong>traits 特性萃取机</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/traits.png">

<p><br/><br/></p>
<h3 id="value-type"><a href="#value-type" class="headerlink" title="value type"></a>value type</h3><p>指的是迭代器所指对象的类别。</p>
<br/>

<h3 id="difference-type"><a href="#difference-type" class="headerlink" title="difference type"></a>difference type</h3><p>用来表示两个迭代器的距离，因此他也可以用来表示一个容器的容量。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
   *  @brief Count the number of copies of a value in a sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __value  The value to be counted.
   *  @return   The number of iterators @c i in the range @p [__first,__last)
   *  for which @c *i == @p __value
  */</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type
  <span class="token function">count</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">__count_if</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span>
                         __gnu_cxx<span class="token double-colon punctuation">::</span>__ops<span class="token double-colon punctuation">::</span><span class="token function">__iter_equals_val</span><span class="token punctuation">(</span>__value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当我们需要迭代器 I 的 difference type 时，可以这么写：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>I<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>

<h3 id="reference-type"><a href="#reference-type" class="headerlink" title="reference type"></a>reference type</h3><p>从迭代器所指对象是否允许的角度观之，迭代器分两种，<code>const iterators（不允许改变）</code>和 <code>mutable iterators（允许改变）</code>。</p>
<table>
<thead>
<tr>
<th>iterator 类型</th>
<th>value type</th>
<th>reference type</th>
</tr>
</thead>
<tbody><tr>
<td>const iterators（记为 p）</td>
<td>T</td>
<td>const T&amp;</td>
</tr>
<tr>
<td>mutable iterators（记为 p）</td>
<td>T</td>
<td>T&amp;</td>
</tr>
</tbody></table>
<br/>

<h3 id="pointer-type"><a href="#pointer-type" class="headerlink" title="pointer type"></a>pointer type</h3><p>形如 <strong>T</strong>* 便是 pointer type。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__iterator_traits</span><span class="token operator">&lt;</span>
<span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>pointer<span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>reference<span class="token operator">>></span> <span class="token punctuation">&#123;</span>
<span class="token comment">//...</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>pointer           pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>reference         reference<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 针对原生指针而设计的偏特化版本</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
<span class="token comment">//...</span>
 <span class="token keyword">typedef</span> ptrdiff_t                   difference_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp<span class="token operator">*</span>                        pointer<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 针对原生（pointer-to-const）指针而设计的偏特化版本</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span><span class="token keyword">const</span> _Tp<span class="token operator">*</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
<span class="token comment">//...</span>
 <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span>                  pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span>                  reference<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="iterator-category"><a href="#iterator-category" class="headerlink" title="iterator_category"></a>iterator_category</h3><table>
<thead>
<tr>
<th>迭代器类别</th>
<th>说明</th>
<th>提供给</th>
</tr>
</thead>
<tbody><tr>
<td>Input Iterator</td>
<td>只读</td>
<td>istream</td>
</tr>
<tr>
<td>Output Iterator</td>
<td>只写</td>
<td>ostream, inserter</td>
</tr>
<tr>
<td>Forward Iterator</td>
<td>允许“写入型”算法如 （repalce()）在迭代区间进行读写操作</td>
<td>forward list, unordered containers</td>
</tr>
<tr>
<td>Bidirectional Iterator</td>
<td>可以双向移动，逆向访问迭代区间</td>
<td>list, set, multiset, map</td>
</tr>
<tr>
<td>Random Access Iterator</td>
<td>涵盖所有指针算术能力，包括 p+n, p-n, p[n], p1-p2, p1 &lt; p2.</td>
<td>array, vector, deque, string, C-style array</td>
</tr>
</tbody></table>
<br/>

<p><strong>迭代器的分类与从属关系</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB%E4%B8%8E%E4%BB%8E%E5%B1%9E%E5%85%B3%E7%B3%BB.png">

<br/>

<p><code>箭头代表的是 concept 与 refinement 的关系</code></p>
<table>
<thead>
<tr>
<th>继承</th>
<th>强化</th>
</tr>
</thead>
<tbody><tr>
<td>所谓继承，是is-a的关系，但是它有个很重要的隐式约定：它表示的是一种具体类型与另一种具体类型的关系。所谓具体类型，是一个包括属性和给用户的方法的集合。</td>
<td>所谓强化，代表的是：一个集合与另一个集合的关系。所谓集合：是指满足一组相同条件的集合，或者说是拥有一组相同操作行为的集合。因而如果说B是A的强化，那么B也拥有集合A的该组操作能力，并且可能还拥有其他的能力。因而它强调的是接口能力的继承，而不是将属性和行为都继承下来。</td>
</tr>
</tbody></table>
<br/>

<p>STL 为了提高效率，针对不同的迭代器类型提供不同的版本，例如 <code>distance()</code>:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
   *  @brief A generalization of pointer arithmetic.
   *  @param  __first  An input iterator.
   *  @param  __last  An input iterator.
   *  @return  The distance between them.
   *
   *  Returns @c n such that __first + n == __last.  This requires
   *  that @p __last must be reachable from @p __first.  Note that @c
   *  n may be negative.
   *
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_InputIterator</span><span class="token operator">></span>
<span class="token keyword">inline</span> _GLIBCXX17_CONSTEXPR
<span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type
  <span class="token function">distance</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">__distance</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span>
                         std<span class="token double-colon punctuation">::</span><span class="token function">__iterator_category</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 逐一累计距离</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Distance</span><span class="token operator">></span>
<span class="token keyword">inline</span> _GLIBCXX14_CONSTEXPR <span class="token keyword">void</span>
<span class="token function">__advance</span><span class="token punctuation">(</span>_InputIterator<span class="token operator">&amp;</span> __i<span class="token punctuation">,</span> _Distance __n<span class="token punctuation">,</span> input_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>__n<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token operator">++</span>__i<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 逐一累计距离 （可逆向）</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_BidirectionalIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Distance</span><span class="token operator">></span>
<span class="token keyword">inline</span> _GLIBCXX14_CONSTEXPR <span class="token keyword">void</span>
<span class="token function">__advance</span><span class="token punctuation">(</span>_BidirectionalIterator<span class="token operator">&amp;</span> __i<span class="token punctuation">,</span> _Distance __n<span class="token punctuation">,</span>
          bidirectional_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>__n<span class="token operator">--</span><span class="token punctuation">)</span>
      <span class="token operator">++</span>__i<span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>__n<span class="token operator">++</span><span class="token punctuation">)</span>
      <span class="token operator">--</span>__i<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 直接计算差距</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Distance</span><span class="token operator">></span>
<span class="token keyword">inline</span> _GLIBCXX14_CONSTEXPR <span class="token keyword">void</span>
<span class="token function">__advance</span><span class="token punctuation">(</span>_RandomAccessIterator<span class="token operator">&amp;</span> __i<span class="token punctuation">,</span> _Distance __n<span class="token punctuation">,</span>
          random_access_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_constant_p</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> __n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token operator">++</span>__i<span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_constant_p</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> __n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token operator">--</span>__i<span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    __i <span class="token operator">+=</span> __n<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="std-iterator"><a href="#std-iterator" class="headerlink" title="std::iterator"></a>std::iterator</h3><p>为了方便我们自定义迭代器类型，保证设计的迭代器符合 STL规范，提供了：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
   *  @brief  Common %iterator class.
   *
   *  This class does nothing but define nested typedefs.  %Iterator classes
   *  can inherit from this class to save some work.  The typedefs are then
   *  used in specializations and overloading.
   *
   *  In particular, there are no default implementations of requirements
   *  such as @c operator++ and the like.  (How could there be?)
  */</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Category</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Distance</span> <span class="token operator">=</span> ptrdiff_t<span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Pointer</span> <span class="token operator">=</span> _Tp<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Reference</span> <span class="token operator">=</span> _Tp<span class="token operator">&amp;</span><span class="token operator">></span>
  <span class="token keyword">struct</span> <span class="token class-name">iterator</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/// One of the @link iterator_tags tag types@endlink.</span>
    <span class="token keyword">typedef</span> _Category  iterator_category<span class="token punctuation">;</span>
    <span class="token comment">/// The type "pointed to" by the iterator.</span>
    <span class="token keyword">typedef</span> _Tp        value_type<span class="token punctuation">;</span>
    <span class="token comment">/// Distance between iterators is represented as this type.</span>
    <span class="token keyword">typedef</span> _Distance  difference_type<span class="token punctuation">;</span>
    <span class="token comment">/// This type represents a pointer-to-value_type.</span>
    <span class="token keyword">typedef</span> _Pointer   pointer<span class="token punctuation">;</span>
    <span class="token comment">/// This type represents a reference-to-value_type.</span>
    <span class="token keyword">typedef</span> _Reference reference<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="type-traits"><a href="#type-traits" class="headerlink" title="__type_traits"></a>__type_traits</h2><p><strong>iterator_traits</strong> 负责的是萃取<strong>迭代器的特性</strong>，为了进一步扩大到迭代器以外的世界，提供了**__type_traits**负责萃取 <strong>type的特性</strong>。 </p>
<p><strong>SGI 版本</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__type_traits</span> <span class="token punctuation">&#123;</span> 
  <span class="token keyword">typedef</span> __true_type     this_dummy_member_must_be_first<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __false_type    has_trivial_default_constructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __false_type    has_trivial_copy_constructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __false_type    has_trivial_assignment_operator<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __false_type    has_trivial_destructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __false_type    is_POD_type<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 针对 C++ 基本类别提供的特化版本</span>
<span class="token comment">// 每个成员的值都是 __true_type，表示这些类型可以</span>
<span class="token comment">// 采用最快速的方式（如 memcpy）进行拷贝和赋值</span>
__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><strong>GCC 版本</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// include/c++/9/type_traits</span>

<span class="token comment">/// is_trivial</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">is_trivial</span>
<span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">integral_constant</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">,</span> <span class="token function">__is_trivial</span><span class="token punctuation">(</span><span class="token class-name">_Tp</span><span class="token punctuation">)</span><span class="token operator">></span></span>
<span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// is_trivially_copyable</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">is_trivially_copyable</span>
<span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">integral_constant</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">,</span> <span class="token function">__is_trivially_copyable</span><span class="token punctuation">(</span><span class="token class-name">_Tp</span><span class="token punctuation">)</span><span class="token operator">></span></span>
<span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/// is_pod</span>
<span class="token comment">// Could use is_standard_layout &amp;&amp; is_trivial instead of the builtin.</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">is_pod</span>
<span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">integral_constant</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">,</span> <span class="token function">__is_pod</span><span class="token punctuation">(</span><span class="token class-name">_Tp</span><span class="token punctuation">)</span><span class="token operator">></span></span>
<span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">is_trivially_move_assignable</span>
<span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">__is_trivially_move_assignable_impl</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token operator">></span></span>
<span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/// is_trivially_destructible</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">is_trivially_destructible</span>
<span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">__and_</span><span class="token operator">&lt;</span><span class="token class-name">is_destructible</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token operator">></span><span class="token punctuation">,</span>
<span class="token class-name">__bool_constant</span><span class="token operator">&lt;</span><span class="token function">__has_trivial_destructor</span><span class="token punctuation">(</span><span class="token class-name">_Tp</span><span class="token punctuation">)</span><span class="token operator">>></span></span>
<span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token comment">/// has_virtual_destructor</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">has_virtual_destructor</span>
<span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">integral_constant</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">,</span> <span class="token function">__has_virtual_destructor</span><span class="token punctuation">(</span><span class="token class-name">_Tp</span><span class="token punctuation">)</span><span class="token operator">></span></span>
<span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>__type_trait</code> 在 STL 中应用，如之前提到的<code>uninitialized_fill_n()</code>，会根据是否为 POD类别，选择调用高阶函数<code>std::fill_n()</code> 还是 <code>逐一调用对象的construct()</code>。</p>
]]></content>
      <categories>
        <category>C++ STL</category>
      </categories>
      <tags>
        <tag>拆书系列</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《STL 源码剖析》空间配置器（allocator）</title>
    <url>/2021/06/19/C++%20STL/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%EF%BC%88allocator%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《STL-源码剖析》空间配置器（allocator）"><a href="#《STL-源码剖析》空间配置器（allocator）" class="headerlink" title="《STL 源码剖析》空间配置器（allocator）"></a>《STL 源码剖析》空间配置器（allocator）</h1><p><code>参考自《STL 源码剖析》-侯捷著。</code></p>
<br/>

<h2 id="STL-中，allocator-的必要接口"><a href="#STL-中，allocator-的必要接口" class="headerlink" title="STL 中，allocator 的必要接口"></a>STL 中，allocator 的必要接口</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// /usr/include/c++/9/bits/allocator.h</span>



<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">using</span> __allocator_base <span class="token operator">=</span> __gnu_cxx<span class="token double-colon punctuation">::</span>new_allocator<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">new_allocator</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token keyword">typedef</span> size_t     size_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> ptrdiff_t  difference_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp<span class="token operator">*</span>       pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span> const_pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp<span class="token operator">&amp;</span>       reference<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> const_reference<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp        value_type<span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp1</span><span class="token operator">></span>
 <span class="token keyword">struct</span> <span class="token class-name">rebind</span> <span class="token punctuation">&#123;</span> <span class="token keyword">typedef</span> new_allocator<span class="token operator">&lt;</span>_Tp1<span class="token operator">></span> other<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 <span class="token comment">// ...</span>

<span class="token comment">// 默认构造</span>
_GLIBCXX20_CONSTEXPR
 <span class="token function">new_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// 拷贝构造</span>
_GLIBCXX20_CONSTEXPR
 <span class="token function">new_allocator</span><span class="token punctuation">(</span><span class="token keyword">const</span> new_allocator<span class="token operator">&amp;</span><span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// 泛化的拷贝构造</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp1</span><span class="token operator">></span>
_GLIBCXX20_CONSTEXPR
<span class="token function">new_allocator</span><span class="token punctuation">(</span><span class="token keyword">const</span> new_allocator<span class="token operator">&lt;</span>_Tp1<span class="token operator">></span><span class="token operator">&amp;</span><span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>
<span class="token comment">//析构</span>
<span class="token operator">~</span><span class="token function">new_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// 返回某个对象的地址</span>
pointer
 <span class="token function">address</span><span class="token punctuation">(</span>reference __x<span class="token punctuation">)</span> <span class="token keyword">const</span> _GLIBCXX_NOEXCEPT
<span class="token punctuation">&#123;</span> <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">__addressof</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

const_pointer
 <span class="token function">address</span><span class="token punctuation">(</span>const_reference __x<span class="token punctuation">)</span> <span class="token keyword">const</span> _GLIBCXX_NOEXCEPT
<span class="token punctuation">&#123;</span> <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">__addressof</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// 配置空间 足以存储 n 个 T 对象</span>
_GLIBCXX_NODISCARD pointer
<span class="token function">allocate</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__n <span class="token operator">></span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   std<span class="token double-colon punctuation">::</span><span class="token function">__throw_bad_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cpp_aligned_new</span></span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">></span> __STDCPP_DEFAULT_NEW_ALIGNMENT__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   std<span class="token double-colon punctuation">::</span>align_val_t __al <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">align_val_t</span><span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>__n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">,</span> __al<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
 <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>__n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 归还先前配置空间</span>
<span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span>pointer __p<span class="token punctuation">,</span> size_type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cpp_aligned_new</span></span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">></span> __STDCPP_DEFAULT_NEW_ALIGNMENT__<span class="token punctuation">)</span>
 <span class="token punctuation">&#123;</span>
   <span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">align_val_t</span><span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
 <span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span>__p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Up</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">construct</span><span class="token punctuation">(</span>_Up<span class="token operator">*</span> __p<span class="token punctuation">,</span> _Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span>
 <span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token double-colon punctuation">::</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>__p<span class="token punctuation">)</span>
             <span class="token function">_Up</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#123;</span> <span class="token double-colon punctuation">::</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>__p<span class="token punctuation">)</span> <span class="token function">_Up</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Up</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span>_Up<span class="token operator">*</span> __p<span class="token punctuation">)</span>
 <span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token keyword">noexcept</span><span class="token punctuation">(</span> __p<span class="token operator">-></span><span class="token operator">~</span><span class="token function">_Up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#123;</span> __p<span class="token operator">-></span><span class="token operator">~</span><span class="token function">_Up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// class new_allocator  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="SGI-的空间配置器-std-alloc（GCC版本-malloc-allocator-pool-allocator）"><a href="#SGI-的空间配置器-std-alloc（GCC版本-malloc-allocator-pool-allocator）" class="headerlink" title="SGI 的空间配置器 std::alloc（GCC版本 malloc_allocator pool_allocator）"></a>SGI 的空间配置器 std::alloc（GCC版本 malloc_allocator pool_allocator）</h2><h3 id="对于-我们习惯的-C-内存配置和释放操作"><a href="#对于-我们习惯的-C-内存配置和释放操作" class="headerlink" title="对于 我们习惯的 C++ 内存配置和释放操作"></a>对于 我们习惯的 C++ 内存配置和释放操作</h3><img src ="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/NewDelete%E5%AF%B9%E8%B1%A1%E6%97%B6.png">

<br/>

<br/>

<p>内存空间的配置&#x2F;释放与对象内容的构造和析构，分别在 <code>stl_construct.h</code> 和<code>allcator.h [stl_alloc.h(SGI版本)]</code>。</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/STLConstructAllocator.png">

<h3 id="对于-SGI-版本的设计哲学"><a href="#对于-SGI-版本的设计哲学" class="headerlink" title="对于 SGI 版本的设计哲学"></a>对于 SGI 版本的设计哲学</h3><ol>
<li>向 system heap 要求空间。</li>
<li>考虑多线程的状态。</li>
<li>考虑内存不足时的应变措施。</li>
<li>考虑过多“小型区块”可能造成的内存碎片（fragment）问题。</li>
</ol>
<br/>

<br/>

<h3 id="解决小型区块可能造成的内存破碎问题（双层级配置器）"><a href="#解决小型区块可能造成的内存破碎问题（双层级配置器）" class="headerlink" title="解决小型区块可能造成的内存破碎问题（双层级配置器）"></a>解决小型区块可能造成的内存破碎问题（双层级配置器）</h3><p><code>配置区块 &gt; 128bytes 时，视为足够大，调用</code><strong>第一级配置器</strong>。</p>
<p><code>配置区块 &lt;= 128bytes 时，视为过小，为了降低额外负担，采用复杂的 memory pool 的整理方式，开放</code><strong>第二级配置器</strong>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 一级配置器</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">malloc_allocator</span> <span class="token punctuation">&#123;</span>
 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token function">allocate</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__n <span class="token operator">></span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     std<span class="token double-colon punctuation">::</span><span class="token function">__throw_bad_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 pointer __ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cpp_aligned_new</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">></span> <span class="token number">201402L</span> <span class="token operator">&amp;&amp;</span> _GLIBCXX_HAVE_ALIGNED_ALLOC</span></span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">alignof</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>max_align_t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   __ret <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token double-colon punctuation">::</span><span class="token function">aligned_alloc</span><span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                             __n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">_GLIBCXX_CHECK_MALLOC_RESULT</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
 <span class="token comment">// 直接使用 malloc()</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__ret<span class="token punctuation">)</span>
   __ret <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">malloc</span><span class="token punctuation">(</span>__n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__ret<span class="token punctuation">)</span>
   std<span class="token double-colon punctuation">::</span><span class="token function">__throw_bad_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_GLIBCXX_CHECK_MALLOC_RESULT</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">_GLIBCXX_CHECK_MALLOC_RESULT</span></span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t<span class="token operator">></span></span></span><span class="token punctuation">(</span>__ret<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// Memory returned by malloc is not suitably aligned for _Tp.</span>
   <span class="token function">deallocate</span><span class="token punctuation">(</span>__ret<span class="token punctuation">,</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span>
   std<span class="token double-colon punctuation">::</span><span class="token function">__throw_bad_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token keyword">return</span> __ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 直接调用 free()</span>
<span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span>pointer __p<span class="token punctuation">,</span> size_type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 std<span class="token double-colon punctuation">::</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>__p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>；<span class="token comment">// class malloc_allocator</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 二级配置器</span>
<span class="token keyword">class</span> <span class="token class-name">__pool_alloc_base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
 <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> _S_align <span class="token operator">=</span> <span class="token number">8</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> _S_max_bytes <span class="token operator">=</span> <span class="token number">128</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> _S_free_list_size <span class="token operator">=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>_S_max_bytes <span class="token operator">/</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>_S_align <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 <span class="token keyword">union</span> _Obj <span class="token punctuation">&#123;</span>
   <span class="token keyword">union</span> _Obj<span class="token operator">*</span> _M_free_list_link<span class="token punctuation">;</span>
   <span class="token keyword">char</span>        _M_client_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// The client sees this.</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 <span class="token keyword">static</span> _Obj<span class="token operator">*</span> <span class="token keyword">volatile</span>         _S_free_list<span class="token punctuation">[</span>_S_free_list_size<span class="token punctuation">]</span><span class="token punctuation">;</span>

 <span class="token comment">// Chunk allocation state.</span>
 <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token operator">*</span>                  _S_start_free<span class="token punctuation">;</span>
 <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token operator">*</span>                  _S_end_free<span class="token punctuation">;</span>
 <span class="token keyword">static</span> size_t                 _S_heap_size<span class="token punctuation">;</span>   
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/%E4%B8%80%E7%BA%A7%E4%BA%8C%E7%BA%A7%E9%85%8D%E7%BD%AE%E5%99%A8%E5%85%B3%E7%B3%BB.png">

<p>无论是第一级还是第二级配置器，STL 没有直接调用，而是封装了多层。在 GCC9 版本中，提供了 <code>polymorphic_allocator</code>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// vector</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">polymorphic_allocator</span><span class="token punctuation">;</span>
<span class="token comment">// 使用复杂的 polymorphic_allocator</span>
<span class="token keyword">using</span> vector <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> polymorphic_allocator<span class="token operator">&lt;</span>_Tp<span class="token operator">>></span><span class="token punctuation">;</span>

<span class="token comment">// std::vector 默认用的简单的 std::allocator</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> <span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">vector</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">protected</span> <span class="token class-name">_Vector_base</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token class-name">_Alloc</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//...</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">polymorphic_allocator</span> <span class="token punctuation">&#123;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span> <span class="token comment">// used here</span>
<span class="token keyword">void</span> <span class="token function">construct</span><span class="token punctuation">(</span>_Tp1<span class="token operator">*</span> __p<span class="token punctuation">,</span> _Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">__uses_allocator_construct</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __p<span class="token punctuation">,</span>
                                 std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span>_Tp<span class="token operator">*</span> __p<span class="token punctuation">,</span> size_t __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 _M_resource<span class="token operator">-></span><span class="token function">deallocate</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> __n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// polymorphic_allocator</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>参考 <a href="http://cs.brown.edu/~jwicks/libstdc++/html/20_util/allocator.html">http://cs.brown.edu/~jwicks/libstdc++/html/20_util/allocator.html</a> 可知在 GCC 中，</p>
<p><code>For GCC releases, defining </code>__USE_MALLOC<code> on the gcc command line would change the default allocation strategy to instead use malloc and free</code>.</p>
<table>
<thead>
<tr>
<th align="left">Allocator</th>
<th>Header</th>
<th align="left">Allocator</th>
</tr>
</thead>
<tbody><tr>
<td align="left">__gnu_cxx::new_allocator<T></td>
<td>&lt;ext&#x2F;new_allocator.h&gt;</td>
<td align="left">std::__new_alloc</td>
</tr>
<tr>
<td align="left">__gnu_cxx::malloc_allocator<T></td>
<td>&lt;ext&#x2F;malloc_allocator.h&gt;</td>
<td align="left">std::__malloc_alloc_template<int></td>
</tr>
<tr>
<td align="left">__gnu_cxx::debug_allocator<T></td>
<td>&lt;ext&#x2F;debug_allocator.h&gt;</td>
<td align="left">std::debug_alloc<T></td>
</tr>
<tr>
<td align="left">__gnu_cxx::__pool_alloc&lt;bool, int&gt;</td>
<td>&lt;ext&#x2F;pool_allocator.h&gt;</td>
<td align="left">std::__default_alloc_template&lt;bool,int&gt;</td>
</tr>
<tr>
<td align="left">__gnu_cxx::__mt_alloc<T></td>
<td>&lt;ext&#x2F;mt_allocator.h&gt;</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">__gnu_cxx::bitmap_allocator<T></td>
<td>&lt;ext&#x2F;bitmap_allocator.h&gt;</td>
<td align="left"></td>
</tr>
</tbody></table>
<ul>
<li><p><strong>new_allocator</strong></p>
<p>  Simply wraps <code>::operator new</code> and <code>::operator delete</code>.</p>
</li>
<li><p><strong>malloc_allocator</strong></p>
<p>  Simply wraps <code>malloc</code> and <code>free</code>. There is also a hook for an out-of-memory handler (for new&#x2F;delete this is taken care of elsewhere).</p>
</li>
<li><p><strong>debug_allocator</strong></p>
<p>  A wrapper around an arbitrary allocator A. It passes on slightly increased size requests to A, and uses the extra memory to store size information. When a pointer is passed to <code>deallocate()</code>, the stored size is checked, and assert() is used to guarantee they match.</p>
</li>
<li><p><strong>__pool_alloc</strong></p>
<p>  A high-performance, single pool allocator. The reusable memory is shared among identical instantiations of this type. It calls through <code>::operator new</code> to obtain new memory when its lists run out. If a client container requests a block larger than a certain threshold size, then the pool is bypassed, and the allocate&#x2F;deallocate request is passed to <code>::operator new</code> directly.</p>
<p>  This class take a boolean template parameter, called <code>thr</code>, and an integer template parameter, called <code>inst</code>.</p>
<p>  The <code>inst</code> number is used to track additional memory pools. The point of the number is to allow multiple instantiations of the classes without changing the semantics at all. All three of</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span>  __pool_alloc<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">></span>    normal<span class="token punctuation">;</span>
<span class="token keyword">typedef</span>  __pool_alloc<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">></span>    <span class="token keyword">private</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span>  __pool_alloc<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token operator">></span>   also_private<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>  behave exactly the same way. However, the memory pool for each type (and remember that different instantiations result in different types) remains separate.</p>
<p>  The library uses <strong>0</strong> in all its instantiations. If you wish to keep separate free lists for a particular purpose, use a different number.</p>
<p>  The <code>thr</code> boolean determines whether the pool should be manipulated atomically or not. When thr&#x3D;true, the allocator is is threadsafe, while thr&#x3D;false, and is slightly faster but unsafe for multiple threads.</p>
<p>  (Note that the GCC thread abstraction layer allows us to provide safe zero-overhead stubs for the threading routines, if threads were disabled at configuration time.)</p>
</li>
<li><p><strong>__mt_alloc</strong></p>
<p>  A high-performance fixed-size allocator. It has its own documentation, found <a href="http://cs.brown.edu/~jwicks/libstdc++/html/ext/mt_allocator.html">here</a>.</p>
</li>
<li><p><strong>bitmap_allocator</strong></p>
<p>  A high-performance allocator that uses a bit-map to keep track of the used and unused memory locations. It has its own documentation, found <a href="http://cs.brown.edu/~jwicks/libstdc++/html/ext/ballocator_doc.txt">here</a>.</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// specify that only malloc/free should be used instead of the default node allocator</span>
std<span class="token double-colon punctuation">::</span>list <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> __gnu_cxx<span class="token double-colon punctuation">::</span>malloc_allocator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span>  malloc_list<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<p>如果想自行实现 allocator，可参照 <code>new_allocator</code>。</p>
<p><strong>剖析第一级配置器</strong> </p>
<p><code>SGI 版本和目前 GCC 版本差别较大，可对比新版代码和下面整理的 SGI 版本。 </code></p>
<p>代码参考： <a href="https://github.com/steveLauwh/SGI-STL">https://github.com/steveLauwh/SGI-STL</a></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">int</span> __inst<span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">__malloc_alloc_template</span> <span class="token punctuation">&#123;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
 <span class="token comment">// oom: out of memory</span>
 <span class="token comment">// 以下函数用来处理内存不足的情况</span>
 <span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">_S_oom_malloc</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">_S_oom_realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span> size_t<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__STL_STATIC_TEMPLATE_MEMBER_BUG</span></span>
 <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> __malloc_alloc_oom_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">allocate</span><span class="token punctuation">(</span>size_t __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">void</span><span class="token operator">*</span> __result <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 无法满足需求时， 改用_S_oom_malloc()</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> __result<span class="token punctuation">)</span> __result <span class="token operator">=</span> <span class="token function">_S_oom_malloc</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> __result<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> __p<span class="token punctuation">,</span> size_t <span class="token comment">/* __n */</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token function">free</span><span class="token punctuation">(</span>__p<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">reallocate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> __p<span class="token punctuation">,</span> size_t <span class="token comment">/* old_sz */</span><span class="token punctuation">,</span> size_t __new_sz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">void</span><span class="token operator">*</span> __result <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> __new_sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 无法满足需求时， _S_oom_realloc()</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> __result<span class="token punctuation">)</span> __result <span class="token operator">=</span> <span class="token function">_S_oom_realloc</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> __new_sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> __result<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> <span class="token function">__set_malloc_handler</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>__f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> __old<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> __malloc_alloc_oom_handler<span class="token punctuation">;</span>
   __malloc_alloc_oom_handler <span class="token operator">=</span> __f<span class="token punctuation">;</span>
   <span class="token keyword">return</span><span class="token punctuation">(</span>__old<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// class __malloc_alloc_template</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">int</span> __inst<span class="token operator">></span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token class-name">__malloc_alloc_template</span><span class="token operator">&lt;</span>__inst<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_S_oom_malloc</span><span class="token punctuation">(</span>size_t __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> __my_malloc_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span><span class="token operator">*</span> __result<span class="token punctuation">;</span>

  <span class="token comment">// 不断尝试释放、配置</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    __my_malloc_handler <span class="token operator">=</span> __malloc_alloc_oom_handler<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> __my_malloc_handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> __THROW_BAD_ALLOC<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>__my_malloc_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用处理例程，企图释放内存</span>
    __result <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 再次尝试配置内存</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__result<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">(</span>__result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">int</span> __inst<span class="token operator">></span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token class-name">__malloc_alloc_template</span><span class="token operator">&lt;</span>__inst<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_S_oom_realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> __p<span class="token punctuation">,</span> size_t __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> __my_malloc_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span><span class="token operator">*</span> __result<span class="token punctuation">;</span>

  <span class="token comment">//  给一个已经分配了地址的指针重新分配空间，参数 __p 为原有的空间地址，__n 是重新申请的地址长度</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 当 "内存不足处理例程" 并未被客户设定，便调用 __THROW_BAD_ALLOC，丢出 bad_alloc 异常信息</span>
    __my_malloc_handler <span class="token operator">=</span> __malloc_alloc_oom_handler<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> __my_malloc_handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> __THROW_BAD_ALLOC<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>__my_malloc_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 调用处理例程，企图释放内存</span>
    __result <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 再次尝试配置内存，扩大内存大小</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__result<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">(</span>__result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<p><strong>剖析第二级配置器</strong></p>
<p><code>为了避免结点需要额外的指针造成额外的开销，设计结点类型为 union 类型。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 一物二用，避免了为了维护链表所必须的指针而造成内存的浪费</span>
<span class="token keyword">union</span> _Obj <span class="token punctuation">&#123;</span>
 <span class="token keyword">union</span> _Obj<span class="token operator">*</span> _M_free_list_link<span class="token punctuation">;</span>    <span class="token comment">// 指向同一形式的 obj 结点</span>
 <span class="token keyword">char</span>        _M_client_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 可视为一个指针，指向实际区块</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<p><strong>自由链表（free list）实现技巧</strong></p>
<p><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/freelist%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7.png"><br/></p>
<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*  Important implementation properties:
   *  0. If globally mandated, then allocate objects from new
   *  1. If the clients request an object of size > _S_max_bytes, the resulting
   *     object will be obtained directly from new
   *  2. In all other cases, we allocate an object of size exactly
   *     _S_round_up(requested_size).  Thus the client has enough size
   *     information that we can return the object to the proper free list
   *     without permanently losing part of the object.
   */</span>
<span class="token keyword">class</span> <span class="token class-name">__pool_alloc_base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
  <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> _S_align <span class="token operator">=</span> <span class="token number">8</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 小型区块的上调边界</span>
  <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> _S_max_bytes <span class="token operator">=</span> <span class="token number">128</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 小区块的上限</span>
  <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> _S_free_list_size <span class="token operator">=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>_S_max_bytes <span class="token operator">/</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>_S_align <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">union</span> _Obj <span class="token punctuation">&#123;</span> 
    <span class="token comment">//... </span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token comment">// 将bytes 上调至 8 的倍数，方便管理</span>
  <span class="token comment">// 16个free-list分别为 8,16,24,32,40,48,56,64,72,80,88,96,104,112,120,128 bytes</span>
  size_t <span class="token function">_M_round_up</span><span class="token punctuation">(</span>size_t __bytes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__bytes <span class="token operator">+</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>_S_align <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>_S_align <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// Returns an object of size __n, and optionally adds to size __n</span>
  <span class="token comment">// free list.</span>
  <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">_M_refill</span><span class="token punctuation">(</span>size_t __n<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Allocates a chunk for nobjs of size size.  nobjs may be reduced</span>
  <span class="token comment">// if it is inconvenient to allocate the requested number.</span>
  <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">_M_allocate_chunk</span><span class="token punctuation">(</span>size_t __n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> __nobjs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// __pool_alloc_base</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">__pool_alloc</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">private</span> <span class="token class-name">__pool_alloc_base</span></span> <span class="token punctuation">&#123;</span>
<span class="token comment">//...</span>

<span class="token comment">// 空间配置函数 allocate()</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
_GLIBCXX_NODISCARD _Tp<span class="token operator">*</span> <span class="token class-name">__pool_alloc</span><span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
pointer __ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span><span class="token punctuation">(</span>__n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__n <span class="token operator">></span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   std<span class="token double-colon punctuation">::</span><span class="token function">__throw_bad_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">const</span> size_t __bytes <span class="token operator">=</span> __n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cpp_aligned_new</span></span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">></span> __STDCPP_DEFAULT_NEW_ALIGNMENT__<span class="token punctuation">)</span>
 <span class="token punctuation">&#123;</span>
   std<span class="token double-colon punctuation">::</span>align_val_t __al <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">align_val_t</span><span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>__bytes<span class="token punctuation">,</span> __al<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

 <span class="token comment">// If there is a race through here, assume answer from getenv</span>
 <span class="token comment">// will resolve in same direction.  Inspired by techniques</span>
 <span class="token comment">// to efficiently support threading found in basic_string.h.</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>_S_force_new <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"GLIBCXX_FORCE_NEW"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token function">__atomic_add_dispatch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_S_force_new<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">else</span>
     <span class="token function">__atomic_add_dispatch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_S_force_new<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
     <span class="token comment">// > 128bytes 的情况</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__bytes <span class="token operator">></span> <span class="token function">size_t</span><span class="token punctuation">(</span>_S_max_bytes<span class="token punctuation">)</span> <span class="token operator">||</span> _S_force_new <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
   __ret <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>__bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 寻找16个 free lists中适当的一个</span>
   _Obj<span class="token operator">*</span> <span class="token keyword">volatile</span><span class="token operator">*</span> __free_list <span class="token operator">=</span> <span class="token function">_M_get_free_list</span><span class="token punctuation">(</span>__bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

   __scoped_lock <span class="token function">sentry</span><span class="token punctuation">(</span><span class="token function">_M_get_mutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   _Obj<span class="token operator">*</span> __restrict__ __result <span class="token operator">=</span> <span class="token operator">*</span>__free_list<span class="token punctuation">;</span>
   <span class="token comment">// 没有找到可用的 free list，准备重新填充free list</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span><span class="token punctuation">(</span>__result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     __ret <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">_M_refill</span><span class="token punctuation">(</span><span class="token function">_M_round_up</span><span class="token punctuation">(</span>__bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// 调整 free list</span>
     <span class="token operator">*</span>__free_list <span class="token operator">=</span> __result<span class="token operator">-></span>_M_free_list_link<span class="token punctuation">;</span>
     __ret <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>__result<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>__ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
     std<span class="token double-colon punctuation">::</span><span class="token function">__throw_bad_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">return</span> __ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">// 空间释放函数 deallocate()</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">__pool_alloc</span><span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>pointer __p<span class="token punctuation">,</span> size_type __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span><span class="token punctuation">(</span>__n <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> __p <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cpp_aligned_new</span></span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">></span> __STDCPP_DEFAULT_NEW_ALIGNMENT__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">align_val_t</span><span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
 <span class="token keyword">const</span> size_t __bytes <span class="token operator">=</span> __n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// > 128bytes 的情况</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__bytes <span class="token operator">></span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>size_t<span class="token operator">></span></span></span><span class="token punctuation">(</span>_S_max_bytes<span class="token punctuation">)</span> <span class="token operator">||</span> _S_force_new <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
   <span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span>__p<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 寻找对应的 free list</span>
   _Obj<span class="token operator">*</span> <span class="token keyword">volatile</span><span class="token operator">*</span> __free_list <span class="token operator">=</span> <span class="token function">_M_get_free_list</span><span class="token punctuation">(</span>__bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
   _Obj<span class="token operator">*</span> __q <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Obj<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>__p<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// 调整 free list 回收区块</span>
   __scoped_lock <span class="token function">sentry</span><span class="token punctuation">(</span><span class="token function">_M_get_mutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   __q <span class="token operator">-></span>_M_free_list_link <span class="token operator">=</span> <span class="token operator">*</span>__free_list<span class="token punctuation">;</span>
   <span class="token operator">*</span>__free_list <span class="token operator">=</span> __q<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>；<span class="token comment">// class __pool_alloc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<p><strong>区块拔出</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/free-list%E6%8B%94%E5%87%BA%E5%8C%BA%E5%9D%97.png">

<br/>

<br/>

<p>​            <strong>区块回收</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/free-list%E5%8C%BA%E5%9D%97%E5%9B%9E%E6%94%B6.png">

<p>​                </p>
<p><strong>基于SGI版本分析内存池（memory pool）</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 从内存池中取空间</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">bool</span> __threads<span class="token punctuation">,</span> <span class="token keyword">int</span> __inst<span class="token operator">></span>
<span class="token keyword">char</span><span class="token operator">*</span>
<span class="token class-name">__default_alloc_template</span><span class="token operator">&lt;</span>__threads<span class="token punctuation">,</span> __inst<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_S_chunk_alloc</span><span class="token punctuation">(</span>size_t __size<span class="token punctuation">,</span> 
                                                         <span class="token keyword">int</span><span class="token operator">&amp;</span> __nobjs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">char</span><span class="token operator">*</span> __result<span class="token punctuation">;</span>
 size_t __total_bytes <span class="token operator">=</span> __size <span class="token operator">*</span> __nobjs<span class="token punctuation">;</span>  <span class="token comment">// 需要申请空间的大小 </span>
 size_t __bytes_left <span class="token operator">=</span> _S_end_free <span class="token operator">-</span> _S_start_free<span class="token punctuation">;</span>  <span class="token comment">// 计算内存池剩余空间</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>__bytes_left <span class="token operator">>=</span> __total_bytes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 内存池剩余空间完全满足申请</span>
     __result <span class="token operator">=</span> _S_start_free<span class="token punctuation">;</span>
     _S_start_free <span class="token operator">+=</span> __total_bytes<span class="token punctuation">;</span>
     <span class="token keyword">return</span><span class="token punctuation">(</span>__result<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__bytes_left <span class="token operator">>=</span> __size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 内存池剩余空间不能满足申请，提供一个以上的区块</span>
     __nobjs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__bytes_left<span class="token operator">/</span>__size<span class="token punctuation">)</span><span class="token punctuation">;</span>
     __total_bytes <span class="token operator">=</span> __size <span class="token operator">*</span> __nobjs<span class="token punctuation">;</span>
     __result <span class="token operator">=</span> _S_start_free<span class="token punctuation">;</span>
     _S_start_free <span class="token operator">+=</span> __total_bytes<span class="token punctuation">;</span>
     <span class="token keyword">return</span><span class="token punctuation">(</span>__result<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                             <span class="token comment">// 内存池剩余空间连一个区块的大小都无法提供                      </span>
     size_t __bytes_to_get <span class="token operator">=</span> 
      <span class="token number">2</span> <span class="token operator">*</span> __total_bytes <span class="token operator">+</span> <span class="token function">_S_round_up</span><span class="token punctuation">(</span>_S_heap_size <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Try to make use of the left-over piece.</span>
    <span class="token comment">// 内存池的剩余空间分给合适的空闲链表</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__bytes_left <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         _Obj<span class="token operator">*</span> __STL_VOLATILE<span class="token operator">*</span> __my_free_list <span class="token operator">=</span>
                     _S_free_list <span class="token operator">+</span> <span class="token function">_S_freelist_index</span><span class="token punctuation">(</span>__bytes_left<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token punctuation">(</span><span class="token punctuation">(</span>_Obj<span class="token operator">*</span><span class="token punctuation">)</span>_S_start_free<span class="token punctuation">)</span> <span class="token operator">-></span> _M_free_list_link <span class="token operator">=</span> <span class="token operator">*</span>__my_free_list<span class="token punctuation">;</span>
         <span class="token operator">*</span>__my_free_list <span class="token operator">=</span> <span class="token punctuation">(</span>_Obj<span class="token operator">*</span><span class="token punctuation">)</span>_S_start_free<span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
     _S_start_free <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>__bytes_to_get<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 配置 heap 空间，用来补充内存池</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> _S_start_free<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// heap 空间不足，malloc() 失败</span>
         size_t __i<span class="token punctuation">;</span>
         _Obj<span class="token operator">*</span> __STL_VOLATILE<span class="token operator">*</span> __my_free_list<span class="token punctuation">;</span>
        _Obj<span class="token operator">*</span> __p<span class="token punctuation">;</span>
      <span class="token comment">// Try to make do with what we have.  That can't</span>
         <span class="token comment">// hurt.  We do not try smaller requests, since that tends</span>
         <span class="token comment">// to result in disaster on multi-process machines.</span>
         <span class="token keyword">for</span> <span class="token punctuation">(</span>__i <span class="token operator">=</span> __size<span class="token punctuation">;</span>
              __i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> _MAX_BYTES<span class="token punctuation">;</span>
              __i <span class="token operator">+=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> _ALIGN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
             __my_free_list <span class="token operator">=</span> _S_free_list <span class="token operator">+</span> <span class="token function">_S_freelist_index</span><span class="token punctuation">(</span>__i<span class="token punctuation">)</span><span class="token punctuation">;</span>
             __p <span class="token operator">=</span> <span class="token operator">*</span>__my_free_list<span class="token punctuation">;</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> __p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                 <span class="token operator">*</span>__my_free_list <span class="token operator">=</span> __p <span class="token operator">-></span> _M_free_list_link<span class="token punctuation">;</span>
                 _S_start_free <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>__p<span class="token punctuation">;</span>
                 _S_end_free <span class="token operator">=</span> _S_start_free <span class="token operator">+</span> __i<span class="token punctuation">;</span>
                 <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">_S_chunk_alloc</span><span class="token punctuation">(</span>__size<span class="token punctuation">,</span> __nobjs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token comment">// Any leftover piece will eventually make it to the</span>
                 <span class="token comment">// right free list.</span>
             <span class="token punctuation">&#125;</span>
         <span class="token punctuation">&#125;</span>
        _S_end_free <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// In case of exception.</span>
      _S_start_free <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>malloc_alloc<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>__bytes_to_get<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用第一级配置器</span>
         <span class="token comment">// This should either throw an</span>
         <span class="token comment">// exception or remedy the situation.  Thus we assume it</span>
         <span class="token comment">// succeeded.</span>
     <span class="token punctuation">&#125;</span>
     _S_heap_size <span class="token operator">+=</span> __bytes_to_get<span class="token punctuation">;</span>
     _S_end_free <span class="token operator">=</span> _S_start_free <span class="token operator">+</span> __bytes_to_get<span class="token punctuation">;</span>
     <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">_S_chunk_alloc</span><span class="token punctuation">(</span>__size<span class="token punctuation">,</span> __nobjs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 递归调用自己</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>    

<p><strong>内存池实际操练结果</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/%E5%86%85%E5%AD%98%E6%B1%A0%E5%AE%9E%E9%99%85%E6%93%8D%E7%BB%83%E7%BB%93%E6%9E%9C.png">

<br/>

<br/>

<h2 id="对于-中的-construct-和-destroy"><a href="#对于-中的-construct-和-destroy" class="headerlink" title="对于  &lt;stl_construct.h&gt; 中的 construct() 和 destroy()"></a>对于  &lt;stl_construct.h&gt; 中的 construct() 和 destroy()</h2><h3 id="construct"><a href="#construct" class="headerlink" title="construct()"></a>construct()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// construct() </span>
<span class="token comment">// 调用 _T1::_T1(__args)</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_T1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">_Construct</span><span class="token punctuation">(</span>_T1<span class="token operator">*</span> __p<span class="token punctuation">,</span> _Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span> <span class="token double-colon punctuation">::</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>__p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">_T1</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="destroy"><a href="#destroy" class="headerlink" title="destroy()"></a>destroy()</h3><p>（1）直接调用对象的析构。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 版本一</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">_Destroy</span><span class="token punctuation">(</span>_Tp<span class="token operator">*</span> __pointer<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span> __pointer<span class="token operator">-></span><span class="token operator">~</span><span class="token function">_Tp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>（2）接受迭代器 first 和 last，为了解决迭代范围很大的情况，如果都直接调用对象析构，影响效率，所以要根据元素value type 来感知是否为 trivival destructor。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 版本二</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">_Destroy</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _ForwardIterator __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>value_type _Value_type<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">201103L</span></span></span>
<span class="token comment">// A deleted destructor is trivial, this ensures we reject such types:</span>
<span class="token keyword">static_assert</span><span class="token punctuation">(</span>is_destructible<span class="token operator">&lt;</span>_Value_type<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span> <span class="token string">"value type is destructible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
std<span class="token double-colon punctuation">::</span><span class="token class-name">_Destroy_aux</span><span class="token operator">&lt;</span><span class="token function">__has_trivial_destructor</span><span class="token punctuation">(</span>_Value_type<span class="token punctuation">)</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">__destroy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// std::_Destroy_aux</span>

<span class="token comment">// 元素的 value type，有 non-trivival destructor</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">_Destroy_aux</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token operator">></span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__destroy</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _ForwardIterator __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">)</span>
   std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">__addressof</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 元素的 value type，有 trivival destructor</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">_Destroy_aux</span><span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token operator">></span>
   <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__destroy</span><span class="token punctuation">(</span>_ForwardIterator<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="内存基本处理工具"><a href="#内存基本处理工具" class="headerlink" title="内存基本处理工具"></a>内存基本处理工具</h2><p>STL 定义了 5 个全局函数作用于未初始化空间上，除了上面提及的construct()、destroy()，还有：</p>
<h3 id="uninitialized-copy"><a href="#uninitialized-copy" class="headerlink" title="uninitialized_copy()"></a>uninitialized_copy()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// POD 类型</span>
<span class="token comment">// POD 类型必然有 trivival ctor/dtor/copy/assignment 函数</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__uninitialized_copy</span><span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token operator">></span>
 <span class="token keyword">static</span> _ForwardIterator
 <span class="token function">__uninit_copy</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span>
               _ForwardIterator __result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
   <span class="token comment">// 调用 STL 算法 copy()</span>
   <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __result<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// non-POD 类型</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">bool</span> _TrivialValueTypes<span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__uninitialized_copy</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token operator">></span>
 <span class="token keyword">static</span> _ForwardIterator
 <span class="token function">__uninit_copy</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span>
               _ForwardIterator __result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   _ForwardIterator __cur <span class="token operator">=</span> __result<span class="token punctuation">;</span>
   __try <span class="token punctuation">&#123;</span>
     <span class="token comment">// 必须一个一个元素地构造，无法批量进行</span>
     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">++</span>__cur<span class="token punctuation">)</span>
       std<span class="token double-colon punctuation">::</span><span class="token function">_Construct</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">__addressof</span><span class="token punctuation">(</span><span class="token operator">*</span>__cur<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> __cur<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__result<span class="token punctuation">,</span> __cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
     __throw_exception_again<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="uninitialized-fill"><a href="#uninitialized-fill" class="headerlink" title="uninitialized_fill()"></a>uninitialized_fill()</h3><blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// POD 类型</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__uninitialized_fill</span><span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
    <span class="token keyword">static</span> <span class="token keyword">void</span>
    <span class="token function">__uninit_fill</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _ForwardIterator __last<span class="token punctuation">,</span>
                  <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
      <span class="token comment">// 调用 STL 算法 fill()</span>
      std<span class="token double-colon punctuation">::</span><span class="token function">fill</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// non-POD 类型</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">bool</span> _TrivialValueType<span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__uninitialized_fill</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
     <span class="token keyword">static</span> <span class="token keyword">void</span>
     <span class="token function">__uninit_fill</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _ForwardIterator __last<span class="token punctuation">,</span>
                   <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       _ForwardIterator __cur <span class="token operator">=</span> __first<span class="token punctuation">;</span>
       __try <span class="token punctuation">&#123;</span>
         <span class="token comment">// 必须一个个构造，无法批量进行</span>
         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> __cur <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__cur<span class="token punctuation">)</span>
           std<span class="token double-colon punctuation">::</span><span class="token function">_Construct</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">__addressof</span><span class="token punctuation">(</span><span class="token operator">*</span>__cur<span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
       <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
         __throw_exception_again<span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
     <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<br/>

<h3 id="uninitialized-fill-n"><a href="#uninitialized-fill-n" class="headerlink" title="uninitialized_fill_n()"></a>uninitialized_fill_n()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// POD 类型</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__uninitialized_fill_n</span><span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Size</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
 <span class="token keyword">static</span> _ForwardIterator
 <span class="token function">__uninit_fill_n</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _Size __n<span class="token punctuation">,</span>
                 <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
   <span class="token comment">// 调用 STL 算法 fill_n()</span>
   <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">fill_n</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// non-POD 类型</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">bool</span> _TrivialValueType<span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__uninitialized_fill_n</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Size</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
 <span class="token keyword">static</span> _ForwardIterator
 <span class="token function">__uninit_fill_n</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _Size __n<span class="token punctuation">,</span>
                 <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   _ForwardIterator __cur <span class="token operator">=</span> __first<span class="token punctuation">;</span>
   __try <span class="token punctuation">&#123;</span>
     <span class="token comment">// 必须一个一个元素地构造，无法批量进行</span>
     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> __n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>__n<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">++</span>__cur<span class="token punctuation">)</span>
       std<span class="token double-colon punctuation">::</span><span class="token function">_Construct</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">__addressof</span><span class="token punctuation">(</span><span class="token operator">*</span>__cur<span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> __cur<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
     __throw_exception_again<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><strong>SGI介绍的三个内存基本函数的泛型与特化版本</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/%E4%B8%89%E4%B8%AA%E5%86%85%E5%AD%98%E5%9F%BA%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7.png">
]]></content>
      <categories>
        <category>C++ STL</category>
      </categories>
      <tags>
        <tag>拆书系列</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《STL源码剖析》算法（Algorithm）</title>
    <url>/2021/06/19/C++%20STL/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E7%AE%97%E6%B3%95%EF%BC%88algorithms%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《STL源码剖析》算法（Algorithm）"><a href="#《STL源码剖析》算法（Algorithm）" class="headerlink" title="《STL源码剖析》算法（Algorithm）"></a>《STL源码剖析》算法（Algorithm）</h1><p><code>参考自《STL 源码剖析》-侯捷著。</code></p>
<br/>]]></content>
      <categories>
        <category>C++ STL</category>
      </categories>
      <tags>
        <tag>拆书系列</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《STL源码剖析》配接器（adapters）</title>
    <url>/2021/06/20/C++%20STL/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E9%85%8D%E6%8E%A5%E5%99%A8%20%EF%BC%88adapters%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《STL源码剖析》配接器（adapters）"><a href="#《STL源码剖析》配接器（adapters）" class="headerlink" title="《STL源码剖析》配接器（adapters）"></a>《STL源码剖析》配接器（adapters）</h1><p><code>参考自《STL 源码剖析》-侯捷著。</code></p>
<br/>]]></content>
      <categories>
        <category>C++ STL</category>
      </categories>
      <tags>
        <tag>拆书系列</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 网络库 Asio</title>
    <url>/2022/07/13/C++%20%E5%B9%B6%E5%8F%91/Asio/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
        <category>C++ Network</category>
      </categories>
      <tags>
        <tag>Asio</tag>
        <tag>C++ Network</tag>
        <tag>C++ 并发</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 并发编程之 C++17</title>
    <url>/2022/07/13/C++%20%E5%B9%B6%E5%8F%91/Concurrency%20in%20C++17/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>C++ Concurrency</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 并发编程之 C++14</title>
    <url>/2022/07/13/C++%20%E5%B9%B6%E5%8F%91/Concurrency%20in%20C++14/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>C++ Concurrency</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 并发编程之 C++20</title>
    <url>/2022/07/13/C++%20%E5%B9%B6%E5%8F%91/Concurrency%20in%20C++20/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
        <category>C++ Network</category>
      </categories>
      <tags>
        <tag>C++ Concurrency</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 并发编程之 C++11</title>
    <url>/2022/07/13/C++%20%E5%B9%B6%E5%8F%91/Concurrency%20in%20C++11/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>C++ Concurrency</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Alibaba开源库 yalantinglibs</title>
    <url>/2022/07/13/C++%20%E5%B9%B6%E5%8F%91/yalantinglibs/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
        <category>C++ Network</category>
      </categories>
      <tags>
        <tag>C++20</tag>
        <tag>C++ Network</tag>
        <tag>C++ 并发</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式事务</title>
    <url>/2024/11/11/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2>]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式一致性算法之 Raft 算法</title>
    <url>/2024/12/11/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95%E4%B9%8B%20Raft%20%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Raft 算法是一种易于理解的分布式一致性算法，它将一致性问题分解为选举、日志复制和安全性三个子问题。通过选举出一个领导者，由领导者负责将日志复制到其他节点，保证数据的一致性。Raft 算法在分布式系统中被广泛应用，如 Etcd、Consul 等开源项目都采用了 Raft 算法来实现分布式一致性。</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>etcd</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式常见数据分配算法</title>
    <url>/2024/12/11/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="哈希取模算法"><a href="#哈希取模算法" class="headerlink" title="哈希取模算法"></a>哈希取模算法</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>通过对数据的键进行哈希计算，然后将得到的哈希值对缓存节点的数量进行取模运算，所得的结果就是数据应该存储的缓存节点编号。例如，有<code>n</code>个缓存节点，数据键<code>key</code>的哈希值为<code>hash(key)</code>，那么数据将被存储在<code>hash(key) % n</code>对应的节点上。</p>
<ul>
<li><strong>优点</strong>：算法简单直观，计算速度快，能够均匀地将数据分配到各个缓存节点上，在节点数量固定的情况下，能很好地实现负载均衡。</li>
<li><strong>缺点</strong>：当缓存节点数量发生变化时，例如增加或减少节点，几乎所有数据的存储位置都会发生变化，导致大量数据需要在节点之间迁移，系统开销较大。</li>
</ul>
<h2 id="范围划分算法"><a href="#范围划分算法" class="headerlink" title="范围划分算法"></a>范围划分算法</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>将数据的键按照一定的范围进行划分，每个范围对应一个缓存节点。例如，假设数据的键是整数，可将 0 - 1000 范围的数据存储到节点 1，1001 - 2000 范围的数据存储到节点 2，以此类推。</p>
<ul>
<li><strong>优点</strong>：数据的存储位置相对固定，对于按范围访问的数据，能够快速定位到对应的缓存节点，提高查询效率。</li>
<li><strong>缺点</strong>：如果数据分布不均匀，容易导致某些节点负载过高，而其他节点负载过低，出现数据倾斜问题。而且在增加或减少节点时，需要重新划分数据范围，数据迁移量也较大。</li>
</ul>
<h2 id="随机分配算法"><a href="#随机分配算法" class="headerlink" title="随机分配算法"></a>随机分配算法</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>随机地将数据分配到各个缓存节点上。每次有数据需要存储时，从所有缓存节点中随机选择一个节点进行存储。</p>
<ul>
<li><strong>优点</strong>：实现简单，在数据量较大的情况下，能够较为均匀地将数据分配到各个节点上，避免数据集中在某些特定节点。</li>
<li><strong>缺点</strong>：无法保证数据的分布具有确定性，对于同一数据，每次存储的位置可能不同，不利于数据的管理和查询。而且可能会出现某些节点被频繁选中，而其他节点很少被使用的情况，导致负载不均衡。</li>
</ul>
<h2 id="轮询算法"><a href="#轮询算法" class="headerlink" title="轮询算法"></a>轮询算法</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>按照顺序依次将数据分配到各个缓存节点上，就像轮询一样。例如，有节点 A、B、C，首先将数据分配到节点 A，然后是节点 B，接着是节点 C，再回到节点 A，如此循环。</p>
<ul>
<li><strong>优点</strong>：实现简单，能够保证每个节点都有机会被分配到数据，在节点性能相同的情况下，能实现一定程度的负载均衡。</li>
<li><strong>缺点</strong>：如果数据量不是节点数量的整数倍，可能会导致最后几个节点的数据量略少。而且当节点性能不同时，无法根据节点的处理能力进行合理的数据分配，容易造成性能浪费。</li>
</ul>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 基础镜像构建示例</title>
    <url>/2024/01/14/%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA/Docker%20build/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>服务更新基础镜像.</p>
<h3 id="镜像-Dockfile"><a href="#镜像-Dockfile" class="headerlink" title="镜像 Dockfile"></a>镜像 Dockfile</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> python:3.7</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /usr/src/app</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./watermark ./</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./requirements.txt ./</span>

<span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y vim libgl1-mesa-glx &amp;&amp; <span class="token operator">\</span>
pip install -r requirements.txt  -i https://pypi.tuna.tsinghua.edu.cn/simple &amp;&amp; <span class="token operator">\</span>
pip uninstall -y PyMuPDF &amp;&amp; \ </span>
pip install PyMuPDF -i https://pypi.tuna.tsinghua.edu.cn/simple &amp;&amp; \
pip uninstall -y opencv-python opencv-contrib-python opencv-python-headless &amp;&amp; \
pip install opencv-python==4.7.0.72

<span class="token instruction"><span class="token keyword">WORKDIR</span> /root</span>

<span class="token instruction"><span class="token keyword">COPY</span> ./start_server.sh /root/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="构建命令"><a href="#构建命令" class="headerlink" title="构建命令"></a>构建命令</h3><p>1、docker build</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build  <span class="token parameter variable">--platform</span><span class="token operator">=</span>linux/amd64 <span class="token parameter variable">-t</span> watermark:2.0 --no-cache <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>2、docker run</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token parameter variable">--rm</span> watermrak:2.0 <span class="token function">bash</span>

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--name</span> watermark_server_2_0 watermrak:2.0 <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>工程构建</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《Modern CMake for C++》</title>
    <url>/2022/07/13/%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA/Modern%20CMake/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>CMake</category>
      </categories>
      <tags>
        <tag>工程构建</tag>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 工程管理</title>
    <url>/2022/07/13/%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA/golang%20%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>工程构建</tag>
        <tag>go mod</tag>
      </tags>
  </entry>
  <entry>
    <title>proto 接入工程的方法</title>
    <url>/2022/07/13/%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA/proto%E6%8E%A5%E5%85%A5%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>potobuf</category>
      </categories>
      <tags>
        <tag>工程构建</tag>
        <tag>proto</tag>
      </tags>
  </entry>
  <entry>
    <title>grpc_server 实现</title>
    <url>/2022/03/13/Job%20Relative/gprc_server%20%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>golang</category>
        <category>golang 框架</category>
      </categories>
      <tags>
        <tag>grpc</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式存储算法之一致性哈希算法</title>
    <url>/2024/12/11/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%97%E6%B3%95%E4%B9%8B%20%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>传统哈希算法应用到分布式系统中时，当去除或者增加一个节点时，导致的大量数据需要重新计算 rehash，系统扩展性低下。</p>
<p>因此，一致性哈希算法通过将数据和节点都映射到一个固定的哈希空间中，计算数据的哈希值来确定其存储位置。当节点加入或离开系统时，只会影响到哈希环上相邻的少数节点，从而减少数据的迁移量。</p>
<p>在分布式缓存系统中主要应用于数据分配、缓存节点的动态管理以及负载均衡等方面，如 Memcached、Redis Cluster 等，以提高系统的可扩展性和数据访问的效率。</p>
<h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><h3 id="哈希环构建"><a href="#哈希环构建" class="headerlink" title="哈希环构建"></a>哈希环构建</h3><p>创建一个虚拟的<code>哈希环</code>，这个环的范围通常是从 0 到  $2^{32}$  - 1（因为哈希值通常是 32&#x2F;64 位）。它将整个哈希空间组织成一个环形结构，类似于一个钟表的表盘，0 和 $2^{32}$ - 1 是相邻的。</p>
<br/>

<h3 id="数据和节点映射"><a href="#数据和节点映射" class="headerlink" title="数据和节点映射"></a>数据和节点映射</h3><p>在分布式缓存系统中，一致性哈希算法为<code>每个缓存节点</code>和<code>数据对象</code>生成 Hash Value，并将它们映射到<code>同一个哈希环</code>上。<code>数据对象</code>会被存储到<code>哈希环上</code>顺时针方向距离其哈希值最近的<code>缓存节点</code>上。这样可以确保数据在<code>缓存节点</code>之间有一个相对固定且可预测的分布方式，方便数据的查找和存储。</p>
<p>例如，数据对象 A 的哈希值为 H (A)，节点 N1、N2、N3 等分布在哈希环上，若 N2 是在哈希环上顺时针方向距离 H (A) 最近的节点，那么数据 A 就会被存储到节点 N2 上。</p>
<h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><h4 id="节点添加"><a href="#节点添加" class="headerlink" title="节点添加"></a>节点添加</h4><p>当有<code>新节点</code>加入系统时，会计算<code>新节点</code>的哈希值并将其插入到<code>哈希环</code>中。然后，从<code>新节点</code>在<code>哈希环</code>上的位置开始，沿顺时针方向查找，将遇到的<code>第一个节点上的数据</code>重新分配到<code>新节点</code>上。这样只会影响到哈希环上一小部分数据的存储位置，而不会影响到其他大部分数据。</p>
<p>假设集群存在 A、B、C、D、E、F 六个节点，已分别添加到哈希环中，这时候需要新增一个节点 X，X 经过hash 计算，预计需要添加到 B-&gt;C 之间：</p>
<ul>
<li>找到节点 X 顺时针往下的第一个节点 C。</li>
<li>检索节点 C 中的数据（原 B-&gt;C 的数据均属于 C），将从属于 (B,X] 范围的这部分数据摘出来，迁移到节点 X。</li>
<li>节点 X 添加入环。</li>
</ul>
<h4 id="节点删除"><a href="#节点删除" class="headerlink" title="节点删除"></a>节点删除</h4><p>当某个节点故障或需要从系统中移除时，该节点上的数据会被重新分配到哈希环上顺时针方向的下一个节点上。同样，这种调整也只会影响到与该节点相关的一部分数据，对系统中其他数据的影响较小。</p>
<p>假设集群中存在 A、B、X、C、D、E、F 7个节点，均已添加到哈希环中，这时候需要删除一个节点 X，X 介于 B-&gt;C 之间：</p>
<ul>
<li>顺时针找到 X 的下一个节点 C。</li>
<li>将 X 的全量数据添加到 C 中。</li>
<li>节点 X 移除环。</li>
</ul>
<p>综上所述，本质上这种环状结构加 ceiling（向上开放寻址） 的方式，使得数据所从属的节点 index 不再与集群的节点总数强相关，而取决于数据与节点在哈希环上的拓扑结构，对于数据迁移影响的都只是局部数据。</p>
<br/>

<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><h3 id="数据分配"><a href="#数据分配" class="headerlink" title="数据分配"></a>数据分配</h3><p>Redis 哈希槽算法</p>
<p>Redis cluster uses a form of composite partitioning called consistent hashing that calculates what Redis instance the particular key shall be assigned to. This concept is called a hash slot in the Redis Cluster. The key space is partitioned across the different masters in the cluster. It is split into 16384 slots, effectively setting an upper limit for the cluster size of 16384 master nodes (however, the suggested max size of nodes is in the order of ~1000 nodes).</p>
<h3 id="缓存节点动态管理"><a href="#缓存节点动态管理" class="headerlink" title="缓存节点动态管理"></a>缓存节点动态管理</h3><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>通过虚拟节点技术来实现更精细的负载均衡。虚拟节点是实际物理节点在哈希环上的多个映射，每个物理节点对应多个虚拟节点。</p>
<p><strong>虚拟节点：</strong>真实节点进入哈希环时使用的一系列代理节点，是逻辑意义上的代理节点。对于各个真实节点，我们指定一个策略，确定其虚拟节点的个数，比如放大一定的倍数. 需要注意的是，虚拟节点越多，那么未来可能抢占到的数据量就越大。维护好一个路由表，建立好每个虚拟节点与真实节点的映射关系。每当找到一笔数据所从属的虚拟节点时，通过路由表，找到其所映射的真实节点，然后返回真实节点的 index。根据环的性质，当节点足够多，负载就会更加均衡。</p>
<p>这样可以使数据在多个物理节点之间更均匀地分布，避免出现某些节点负载过高而其他节点负载过低的情况。当请求到达时，根据数据的哈希值找到对应的虚拟节点，进而定位到实际的物理节点进行数据处理，实现了负载在各个节点之间的均衡分配，提高了整个分布式缓存系统的性能和资源利用率。</p>
<p>此外还可以根据各个节点的性能水平，为其设置一个不同的权重值，最终这个权重值会作用在真实节点与虚拟节点之间的数量放大过程中，这样我们就能保证性能强的节点拥有更高数量的虚拟节点，未来就有能力抢占到更多的数据。</p>
<h2 id="Go-第三方库"><a href="#Go-第三方库" class="headerlink" title="Go 第三方库"></a>Go 第三方库</h2><p><a href="https://github.com/buraksezer/consistent">https://github.com/buraksezer/consistent</a></p>
<p><a href="https://github.com/stathat/consistent">https://github.com/stathat/consistent</a></p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>pybind11 使用概要</title>
    <url>/2022/03/13/Job%20Relative/pybind11%20%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>基于暗水印翻译</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="技术调研"><a href="#技术调研" class="headerlink" title="技术调研"></a>技术调研</h2><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>C++ 调用 Python</tag>
        <tag>pybind11</tag>
        <tag>Python 调用 C++</tag>
      </tags>
  </entry>
  <entry>
    <title>一种 http_server搭建的方式</title>
    <url>/2022/09/13/Job%20Relative/%E4%B8%80%E4%B8%AA%E8%BD%BB%E9%87%8F%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从 0 到 1 搭建 go 服务。</p>
<br/>



<h2 id="服务架构"><a href="#服务架构" class="headerlink" title="服务架构"></a>服务架构</h2><p>基于 <code>watermark_server</code></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/job/%E5%90%84%E7%A7%8D%E5%AE%B9%E5%99%A8%E6%A6%82%E8%A7%88.png">]]></content>
      <categories>
        <category>job</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>job</tag>
      </tags>
  </entry>
  <entry>
    <title>一种PDF分栏识别算法实现</title>
    <url>/2021/07/22/Job%20Relative/%E4%B8%80%E7%A7%8D%20PDF%20%E5%88%86%E6%A0%8F%E8%AF%86%E5%88%AB%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在 PDF 文档业务处理中，为了更加精准地实现表格识别算法，需要排除对于类似学术性文档的分栏排版样式的干扰，为此实现 PDF 分栏识别算法，首要识别和切割出不同的文本段。</p>
<h2 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h2>]]></content>
      <categories>
        <category>job</category>
      </categories>
      <tags>
        <tag>job</tag>
        <tag>专利</tag>
      </tags>
  </entry>
  <entry>
    <title>一种关于内存缓存实现的方法</title>
    <url>/2022/02/13/Job%20Relative/%E4%B8%80%E7%A7%8D%E5%85%B3%E4%BA%8E%E5%86%85%E5%AD%98%E7%BC%93%E5%AD%98%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>job</category>
      </categories>
      <tags>
        <tag>job</tag>
      </tags>
  </entry>
  <entry>
    <title>工作专利撰写小结</title>
    <url>/2021/07/22/Job%20Relative/%E4%B8%93%E5%88%A9%E6%92%B0%E5%86%99%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>job</category>
      </categories>
      <tags>
        <tag>job</tag>
        <tag>专利</tag>
      </tags>
  </entry>
  <entry>
    <title>一种多终端知识库策略设计思路</title>
    <url>/2022/03/13/Job%20Relative/%E4%B8%80%E7%A7%8D%E7%A8%8B%E5%BA%8F%E5%85%BC%E5%AE%B9%E6%80%A7%E7%AD%96%E7%95%A5%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><br/>



<h2 id="表结构设计"><a href="#表结构设计" class="headerlink" title="表结构设计"></a>表结构设计</h2><br/>

<h2 id="缓存方案"><a href="#缓存方案" class="headerlink" title="缓存方案"></a>缓存方案</h2><br/>

<h2 id="策略下发"><a href="#策略下发" class="headerlink" title="策略下发"></a>策略下发</h2><br/>

<h2 id="兼容性及拓展性"><a href="#兼容性及拓展性" class="headerlink" title="兼容性及拓展性"></a>兼容性及拓展性</h2><br/>

]]></content>
      <categories>
        <category>job</category>
      </categories>
      <tags>
        <tag>job</tag>
      </tags>
  </entry>
  <entry>
    <title>一种安全终端离线卸载的授权方式</title>
    <url>/2022/09/13/Job%20Relative/%E4%B8%80%E7%A7%8D%E7%A6%BB%E7%BA%BF%E6%8E%88%E6%9D%83%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="设计背景"><a href="#设计背景" class="headerlink" title="设计背景"></a>设计背景</h2><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><h2 id="kms-server-钥匙盘服务"><a href="#kms-server-钥匙盘服务" class="headerlink" title="kms_server 钥匙盘服务"></a>kms_server 钥匙盘服务</h2>]]></content>
      <categories>
        <category>job</category>
      </categories>
      <tags>
        <tag>job</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 在工作中的使用</title>
    <url>/2023/10/13/Job%20Relative/%E5%B7%A5%E4%BD%9C%E4%B8%AD%20Redis%20%E9%82%A3%E7%82%B9%E4%BA%8B%E5%84%BF/</url>
    <content><![CDATA[<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><h3 id="redsync"><a href="#redsync" class="headerlink" title="redsync"></a>redsync</h3><p><a href="https://juejin.cn/post/7233284282964770871">https://juejin.cn/post/7233284282964770871</a></p>
<br/>

<h2 id="缓存设计思路"><a href="#缓存设计思路" class="headerlink" title="缓存设计思路"></a>缓存设计思路</h2><h3 id="旁路缓存-Cache-Aside-Lazy-Loading"><a href="#旁路缓存-Cache-Aside-Lazy-Loading" class="headerlink" title="旁路缓存 Cache-Aside (Lazy Loading)"></a>旁路缓存 Cache-Aside (Lazy Loading)</h3><br/>

<h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><p>考虑分片</p>
<br/>

<h3 id="网络策略"><a href="#网络策略" class="headerlink" title="网络策略"></a>网络策略</h3><br/>



<h3 id="知识库策略"><a href="#知识库策略" class="headerlink" title="知识库策略"></a>知识库策略</h3><br/>







<h2 id="（网络、开关）策略缓存设计思路"><a href="#（网络、开关）策略缓存设计思路" class="headerlink" title="（网络、开关）策略缓存设计思路"></a>（网络、开关）策略缓存设计思路</h2><br/>

<h2 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h2><br/>

<h2 id="缓存服务拆分-cron-task"><a href="#缓存服务拆分-cron-task" class="headerlink" title="缓存服务拆分 cron_task"></a>缓存服务拆分 cron_task</h2><br/>

<h2 id="一种防止缓存穿透的业务场景"><a href="#一种防止缓存穿透的业务场景" class="headerlink" title="一种防止缓存穿透的业务场景"></a>一种防止缓存穿透的业务场景</h2><p>Cache Aside 策略，同时把数据修改失败后的尝试扔进异步消息队列。</p>
<br/>

<h2 id="一种降低-redis-QPS的二级缓存设计"><a href="#一种降低-redis-QPS的二级缓存设计" class="headerlink" title="一种降低 redis QPS的二级缓存设计"></a>一种降低 redis QPS的二级缓存设计</h2><h3 id="服务-QPS-耗时分析，-pprof-大杀器"><a href="#服务-QPS-耗时分析，-pprof-大杀器" class="headerlink" title="服务 QPS 耗时分析， pprof 大杀器"></a>服务 QPS 耗时分析， pprof 大杀器</h3><p>link: </p>
<p><a href="https://github.com/google/pprof">https://github.com/google/pprof</a></p>
<p><a href="https://eddycjy.gitbook.io/golang/di-9-ke-gong-ju/go-tool-pprof">https://eddycjy.gitbook.io/golang/di-9-ke-gong-ju/go-tool-pprof</a></p>
<br/>

<h3 id="卡点优化"><a href="#卡点优化" class="headerlink" title="卡点优化"></a>卡点优化</h3><ul>
<li>HGet 请求过多，如何尽可能减少无效 key 的获取？如何减少 HGet 次数，减少网络 IO？</li>
<li>并发接口常调用 HGetAll， 如何尽可能规避？</li>
<li>接口涉及到日志输出需要根据日志等级严格限制，避免 json 序列化耗时操作。</li>
<li>适当使用二级缓存，利用 version 控制，同步本地二级缓存和 redis 缓存，使用二级缓存有效减少获取 redis 缓存的次数。</li>
<li>设计兜底逻辑，redis 缓存定时过期触发刷新 redis 缓存和 二级缓存。</li>
</ul>
<br/>



<h3 id="服务端压测工具探索"><a href="#服务端压测工具探索" class="headerlink" title="服务端压测工具探索"></a>服务端压测工具探索</h3><h4 id="ghz"><a href="#ghz" class="headerlink" title="ghz"></a>ghz</h4><p>link: <a href="https://github.com/bojand/ghz">https://github.com/bojand/ghz</a></p>
<br/>



<h3 id="一种基于-Redis-ZSet-的-LRU-缓存设计"><a href="#一种基于-Redis-ZSet-的-LRU-缓存设计" class="headerlink" title="一种基于 Redis ZSet 的 LRU 缓存设计"></a>一种基于 Redis ZSet 的 LRU 缓存设计</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>为了保证大用户量生产环境下， 万级 license 自动分配的优化要求，设计将一定数量的活跃用户进行缓存以用于快速分配 license。</p>
<br>

<h4 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h4><p><strong>使用 ZSet 记录访问顺序：</strong>将缓存的键作为 ZSet 的成员，将当前时间戳作为分数，分数越小表示该键越久未被访问。 </p>
<p><strong>插入缓存：</strong>插入新缓存项时，将键和当前时间戳添加到 ZSet 中，并检查缓存是否超过最大容量，若超过则删除 ZSet 中分数最小的键。 </p>
<p><strong>访问缓存：</strong>访问缓存项时，更新 ZSet 中该键的分数为当前时间戳，表示该键最近被访问过。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"context"</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"strconv"</span>
    <span class="token string">"time"</span>

    <span class="token string">"github.com/go-redis/redis/v8"</span>
<span class="token punctuation">)</span>

<span class="token comment">// LRUCache 表示基于 Redis ZSet 的 LRU 缓存</span>
<span class="token keyword">type</span> LRUCache <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    cacheKey   <span class="token builtin">string</span>
    maxSize    <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// NewLRUCache 创建一个新的 LRU 缓存实例</span>
<span class="token keyword">func</span> <span class="token function">NewLRUCache</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> password <span class="token builtin">string</span><span class="token punctuation">,</span> db<span class="token punctuation">,</span> maxSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>LRUCache <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>LRUCache<span class="token punctuation">&#123;</span>
        client<span class="token punctuation">:</span>     client<span class="token punctuation">,</span>
        cacheKey<span class="token punctuation">:</span>   <span class="token string">"lru_cache_zset"</span><span class="token punctuation">,</span>
        maxSize<span class="token punctuation">:</span>    maxSize<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Set 设置缓存项</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>LRUCache<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context，userId<span class="token punctuation">,</span> lastLogoutTime <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
  client<span class="token punctuation">,</span> err <span class="token operator">:=</span> rediscluster<span class="token punctuation">.</span><span class="token function">GetClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> err
  <span class="token punctuation">&#125;</span>
  
  ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 获取当前时间戳</span>
  score <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// 将键和时间戳添加到 ZSet 中</span>
  err <span class="token operator">:=</span> c<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">ZAdd</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> c<span class="token punctuation">.</span>cacheKey<span class="token punctuation">,</span> <span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>Z<span class="token punctuation">&#123;</span>
      Score<span class="token punctuation">:</span>  lastLogoutTime<span class="token punctuation">,</span> <span class="token comment">// score 为用户最后一次登出时间</span>
      Member<span class="token punctuation">:</span> userId<span class="token punctuation">,</span>         <span class="token comment">// key 为用户 ID</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> err
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 检查缓存是否超过最大容量</span>
  size<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">ZCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> c<span class="token punctuation">.</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> err
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token function">int</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">*</span> c<span class="token punctuation">.</span>maxSize <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token function">int</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">*</span> c<span class="token punctuation">.</span>maxSize <span class="token punctuation">&#123;</span>
      <span class="token comment">// 远远超出，立即执行删除操作，以维护 LRU 缓存大小</span>
      <span class="token comment">// 获取所有 keys, 移除给定区间的所有用户 ID</span>
      <span class="token comment">// ZREMRANGEBYSCORE key min max</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 如果当前时间是登录高峰期，加入队列。过后再进行 LRU 缓存清理,清理方式同立即清理。</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Get 获取缓存项</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>LRUCache<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>ctx content<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>userIds <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ZREVRANGE c.cacheKey 0, 300 获取前 300 个活跃用户</span>
    <span class="token keyword">return</span> value<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>1、Del KEY in cluster mode CROSSSLOT Keys Error</strong></p>
<p><a href="https://hackernoon.com/resolving-the-crossslot-keys-error-with-redis-cluster-mode-enabled">https://hackernoon.com/resolving-the-crossslot-keys-error-with-redis-cluster-mode-enabled</a></p>
]]></content>
      <categories>
        <category>基础组件</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>基础组件</tag>
      </tags>
  </entry>
  <entry>
    <title>工作中常用的命令行汇总</title>
    <url>/2022/09/13/Job%20Relative/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>日常使用命令积累，持续更新中。</p>
<br/>

<h2 id="Linux-命令"><a href="#Linux-命令" class="headerlink" title="Linux 命令"></a>Linux 命令</h2><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>(1) 子模块更新</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> submodule update <span class="token parameter variable">--init</span> <span class="token parameter variable">--recursive</span> <span class="token parameter variable">--force</span>
<span class="token function">git</span> submodule <span class="token function">sync</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>(2) ref 更新(cannot lock ref ‘xxx’: ref xxx is at)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> update-ref <span class="token parameter variable">-d</span> refs/remotes/origin/git/xxx
<span class="token function">git</span> pull <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>(3) reset </p>
<p>(4) reflog</p>
<p>(5) 压缩提交 git rebase -i 某条hash</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> s2j2dadapjdps9132esda

<span class="token comment"># git commit</span>
pick xxxx
squash xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>(1) 压缩文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 压缩文件夹指定路径和输出路径</span>
<span class="token function">tar</span> <span class="token parameter variable">-zcvf</span> dest.tar.gz /src_dir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>(2) 解压文件</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">tar -zxvf <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>

<h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>

<h3 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> <span class="token parameter variable">-d</span> /目标文件夹/ src.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>



<h3 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">scp -r root@10.10.27.103:&#x2F;root&#x2F;src_files .&#x2F;dest_file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>



<h3 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查某个请求是否打到服务</span>
tcpdump <span class="token parameter variable">-Ans</span> <span class="token number">4096</span> <span class="token parameter variable">-iany</span> <span class="token operator">|</span> <span class="token function">grep</span> /url/ <span class="token parameter variable">-C</span> <span class="token number">60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br/>

<h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-ant</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">443</span>

tcp4       <span class="token number">0</span>      <span class="token number">0</span>  <span class="token number">183.16</span>.242.124.60918   <span class="token number">113.96</span>.19.181.443      ESTABLISHED
tcp4       <span class="token number">0</span>      <span class="token number">0</span>  <span class="token number">183.16</span>.242.124.60875   <span class="token number">113.96</span>.19.181.443      ESTABLISHED
tcp4       <span class="token number">0</span>      <span class="token number">0</span>  <span class="token number">183.16</span>.242.124.60868   <span class="token number">36.110</span>.186.243.443     ESTABLISHED
tcp4       <span class="token number">0</span>      <span class="token number">0</span>  <span class="token number">183.16</span>.242.124.60860   <span class="token number">36.110</span>.186.243.443     ESTABLISHED
tcp4       <span class="token number">0</span>      <span class="token number">0</span>  <span class="token number">183.16</span>.242.124.61768   <span class="token number">59.36</span>.213.115.443      TIME_WAIT
tcp4       <span class="token number">0</span>      <span class="token number">0</span>  <span class="token number">183.16</span>.242.124.62857   <span class="token number">17.57</span>.145.135.443      ESTABLISHED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">lsof</span> <span class="token parameter variable">-Pni:443</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>

<h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><br/>

<h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">free -lh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>

<h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>(1) 时间戳获取及转换</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 时间-&gt;时间戳： 
date +%s
# 时间戳-&gt;时间： 
date +%Y:%m:%d -d @1425384141<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p>(2) 设置时间(慎用!!!)</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>

<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>(1) 不区分大小写，多个关键字过滤</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">tail -f config_server.log | grep -iE &quot;keyword1|keyword2&quot; -C 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>(2) 反向过滤</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">grep -v &quot;log_sdk&quot; # 反向过滤<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>

<h3 id="pgrep"><a href="#pgrep" class="headerlink" title="pgrep"></a>pgrep</h3><br/>



<h2 id="Docker-k8s"><a href="#Docker-k8s" class="headerlink" title="Docker &amp;&amp; k8s"></a>Docker &amp;&amp; k8s</h2><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>(1) save 镜像</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">docker save xxx_server:1.0 | gzip &gt; path&#x2F;to&#x2F;save&#x2F;xxx_server_1.0.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>(2) run 镜像</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 临时run镜像</span>
<span class="token comment"># 挂载实体环境路径</span>
<span class="token function">docker</span> run <span class="token parameter variable">-rm</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> mynginx <span class="token parameter variable">-d</span> nginx:1.0 <span class="token punctuation">\</span>
<span class="token parameter variable">--mount</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>bind,source<span class="token operator">=</span><span class="token environment constant">$PWD</span>/<span class="token variable">$CONTAINER_NAME</span>/app,destination<span class="token operator">=</span>/app <span class="token punctuation">\</span>
<span class="token parameter variable">--mount</span> <span class="token assign-left variable">source</span><span class="token operator">=</span><span class="token variable">$&#123;CONTAINER_NAME&#125;</span>-data,destination<span class="token operator">=</span>/data,readonly <span class="token punctuation">\</span>
<span class="token function">bash</span> 

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--name</span> watermark_server watermark:1.1  <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 保持镜像运行，同时映射主机路径和端口</span>
<span class="token function">docker</span> run <span class="token parameter variable">--it</span> <span class="token parameter variable">-v</span> dir_from_host:dir_from_docker <span class="token punctuation">\</span> 
<span class="token parameter variable">-p</span> host_port:docker_port <span class="token parameter variable">--name</span> watermark_server watermark:latest <span class="token punctuation">\</span>
<span class="token function">bash</span> <span class="token parameter variable">-c</span> <span class="token string">"tail-f /dev/null"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>(3) 加载镜像</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">docker load &lt; watermark_2.0.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>(4) 基于现有容器&#x2F;镜像更新基础镜像</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">docker commit fb8fe watermark:2.0
docker tag xxxx:v1 new_tag:v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>(5) build 镜像</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">docker build -t docker.dev.datacloak.com&#x2F;datacloak&#x2F;switch-init:$&#123;tag&#125; .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>(6) harbor login</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">docker login docker.dev.datacloak.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>(7) push 镜像</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">docker push docker.dev.datacloak.com&#x2F;datacloak&#x2F;switch-init:$&#123;tag&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>



<h3 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">kubectl cp &#x2F;$&#123;src_path&#125; $&#123;namespace&#125;&#x2F;$&#123;pod_name&#125;:&#x2F;$&#123;dest_path&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>

<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">kubectl -n $&#123;namespace&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id=""><a href="#" class="headerlink" title=""></a></h3><br/>

<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">mysqldump -t database -u username -ppassword --tables table_name1 table_name2 table_name3 &gt; .&#x2F;db_script.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<br/>

<h2 id="压测及性能调试"><a href="#压测及性能调试" class="headerlink" title="压测及性能调试"></a>压测及性能调试</h2><br/>

<h3 id="ab"><a href="#ab" class="headerlink" title="ab"></a>ab</h3><br/>



<h2 id="Windows-命令"><a href="#Windows-命令" class="headerlink" title="Windows 命令"></a>Windows 命令</h2><h3 id="ipconfig"><a href="#ipconfig" class="headerlink" title="ipconfig"></a>ipconfig</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 刷新 dns
ipconfig &#x2F;flushdns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br/>

<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>查找字符串</p>
<br/>



<h3 id="netstat-1"><a href="#netstat-1" class="headerlink" title="netstat"></a>netstat</h3><p>查看网络端口状态</p>
<br/>



<h3 id="move"><a href="#move" class="headerlink" title="move"></a>move</h3><p>移动文件</p>
<br/>



<h3 id="cls"><a href="#cls" class="headerlink" title="cls"></a>cls</h3><p>清除屏幕</p>
<br/>



]]></content>
      <categories>
        <category>job</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>job</tag>
        <tag>Linux</tag>
        <tag>shell command</tag>
      </tags>
  </entry>
  <entry>
    <title>飞书等第三方渠道的账号同步</title>
    <url>/2022/02/13/Job%20Relative/%E9%A3%9E%E4%B9%A6%E7%AD%89%E5%A4%96%E9%83%A8%E6%B8%A0%E9%81%93%E8%B4%A6%E5%8F%B7%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>工作中会涉及到飞书、钉钉、AAD(Azure Active Directory) 及第三方客户 OA 系统的对接，主要用于同步用户组织架构到业务系统中，同步原理基本类似，基于组织架构下的人员同步，根据第三方系统提供的API拉取组织架构和人员列表，根据人员的手机或者邮箱等信息进行业务系统成员的同步。下面以飞书账号同步作为阐述。</p>
<br/>



<h2 id="飞书账号同步"><a href="#飞书账号同步" class="headerlink" title="飞书账号同步"></a>飞书账号同步</h2><h3 id="基本流程图"><a href="#基本流程图" class="headerlink" title="基本流程图"></a>基本流程图</h3><br/>

<h3 id="同步方案设计"><a href="#同步方案设计" class="headerlink" title="同步方案设计"></a>同步方案设计</h3><p>设计要点：</p>
<p>1、crontab 定时任务</p>
<p>2、gin 框架的使用</p>
<p>3、业务接口调用，避免直接操作数据库表</p>
<p>4、组织架构树的构建</p>
<p>5、同步类的接口设计</p>
<p>6、优雅关闭</p>
<p>7、viper 实现配置读取，cmd 形式（cobra）实现多种不同的同步方式。</p>
<br/>

















<pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">package main

func main() &#123;
  &#x2F;&#x2F; common.InitConfig()
  
  db.Init()
  
  sync.FeishuSync().Init(ctx)
  
  crobtab.StartCrontab(ctx)
  
  &#x2F;&#x2F; http server listen for feishu callback to update app_ticket info
  serv :&#x3D; http.New(common.Config.Http.Addr)
  herewe.Go(func()&#123;
    serv.ListenAndServe()
  &#125;)
  
  &#x2F;&#x2F; fully sync user accounts
  sync.FeishuSync().Run(ctx)
  
  
  &#x2F;&#x2F; graceful exit
  GracefullyExit(func()&#123;
    cancel()
    serv.Close()
  &#125;)
&#125;

&#x2F;&#x2F; GracefullyExit to release program resources and exit gracefully
func GracefullyExit(exitFunc func()) &#123;
  c :&#x3D; make(chan is.Signal, 1)
  
  signal.Notify(c, syscall.SIGHUP, syscall.SIGINT, syscall.SIGERM, syscall.SIGQUIT)
  for s :&#x3D; range c &#123;
    switch s &#123;
    case syscall.SIGHUP, syscall.SIGINT, syscall.SIGERM, syscall.SIGQUIT:
    	&#x2F;&#x2F; exit by signal
      
      &#x2F;&#x2F; before exit do some work
      exitFunc()
      
      time.Sleep(time.MillionSecond * time.Duration(1000))
      os.Exit(0)
      
    default:
      &#x2F;&#x2F; unexspectedd exit by unknown signal
      
      exitFunc()
      time.Sleep(time.MillionSecond * time.Duration(1000))
      os.Exit(0)
      
    &#125;
  &#125; 
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">package common

var (
  gviper *viper.Viper
)

func InitConfig() &#123;
  gviper.New()
  gviper.AutomaticEnv()
  gviper.SetConfigFile(file)
  
  gviper.ReadInConig()
  
  
  var cfg *Config
  gviper.Unmashal(cfg)
  cfg.Init()
&#125;

type Config struct &#123;
  &#x2F;&#x2F; http 
  &#x2F;&#x2F; db 
  &#x2F;&#x2F; feishu app secret, user id type ....
  &#x2F;&#x2F; cron duration...
  &#x2F;&#x2F; business system setting, such as sync user status
&#125;

func (c config) Init() &#123;
  &#x2F;&#x2F; do initialization sfuff
&#125;

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">package feishusync

var (
  gSyncOnce sync.Once
  gSyncUser IFeishuSync
)

type IFeishuSync interface &#123;
  &#x2F;&#x2F; Init 初始化
  Init(ctx context.Context)
  
  &#x2F;&#x2F; SyncAllUserFromFeishu 全量同步用户
  SyncAllUserFromFeishu(ctx context.Context) error
  
  &#x2F;&#x2F; SyncUser 同步一位飞书用户
  SyncUser(ctx context.Context, user *model.Account) error
  
  &#x2F;&#x2F; SyncOrg 同步飞书组织架构
  SyncOrg(ctx context.Context, org *model.Org) error
&#125;

type syncFeishuUser struct &#123;
  syncDacs dacs.IDacsSync
  ctx context.Context
&#125;

func GetFeishuSync() IFeishuSync &#123;
  
&#125;


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">package dacs
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>job</category>
      </categories>
      <tags>
        <tag>job</tag>
        <tag>账号同步</tag>
      </tags>
  </entry>
  <entry>
    <title>GORM 框架初探</title>
    <url>/2022/03/13/Go/GORM%20%E6%A1%86%E6%9E%B6%E5%88%9D%E6%8E%A2%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="GORM-设计要点"><a href="#GORM-设计要点" class="headerlink" title="GORM 设计要点"></a>GORM 设计要点</h2><h3 id="Builder-模式"><a href="#Builder-模式" class="headerlink" title="Builder 模式"></a>Builder 模式</h3><p>使用 builder 模式 将 SQL 各种表达通过实现 Build 方法来生成对应字符串。</p>
<div class="tabs" id="builder"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#builder-1">Clause</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="builder-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> clause

<span class="token comment">// Interface clause interface</span>
<span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
  <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
  <span class="token function">Build</span><span class="token punctuation">(</span>Builder<span class="token punctuation">)</span>
  <span class="token function">MergeClause</span><span class="token punctuation">(</span><span class="token operator">*</span>Clause<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ClauseBuilder clause builder, allows to customize how to build clause</span>
<span class="token keyword">type</span> ClauseBuilder <span class="token keyword">func</span><span class="token punctuation">(</span>Clause<span class="token punctuation">,</span> Builder<span class="token punctuation">)</span>

<span class="token keyword">type</span> Writer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
  <span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
  <span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Builder builder interface</span>
<span class="token keyword">type</span> Builder <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
  Writer
  <span class="token function">WriteQuoted</span><span class="token punctuation">(</span>field <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token function">AddVar</span><span class="token punctuation">(</span>Writer<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token function">AddError</span><span class="token punctuation">(</span><span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Clause</span>
<span class="token keyword">type</span> Clause <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  Name                <span class="token builtin">string</span> <span class="token comment">// WHERE</span>
  BeforeExpression    Expression
  AfterNameExpression Expression
  AfterExpression     Expression
  Expression          Expression
  Builder             ClauseBuilder
<span class="token punctuation">&#125;</span>

<span class="token comment">// Build build clause</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c Clause<span class="token punctuation">)</span> <span class="token function">Build</span><span class="token punctuation">(</span>builder Builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> c<span class="token punctuation">.</span>Builder <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> builder<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>Expression <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> c<span class="token punctuation">.</span>BeforeExpression <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      c<span class="token punctuation">.</span>BeforeExpression<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span>
      builder<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> c<span class="token punctuation">.</span>Name <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
      builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
      builder<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> c<span class="token punctuation">.</span>AfterNameExpression <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      c<span class="token punctuation">.</span>AfterNameExpression<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span>
      builder<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    c<span class="token punctuation">.</span>Expression<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span>

    <span class="token keyword">if</span> c<span class="token punctuation">.</span>AfterExpression <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      builder<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span>
      c<span class="token punctuation">.</span>AfterExpression<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
  PrimaryKey   <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"~~~py~~~"</span> <span class="token comment">// primary key</span>
  CurrentTable <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"~~~ct~~~"</span> <span class="token comment">// current table</span>
  Associations <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"~~~as~~~"</span> <span class="token comment">// associations</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
  currentTable  <span class="token operator">=</span> Table<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> CurrentTable<span class="token punctuation">&#125;</span>
  PrimaryColumn <span class="token operator">=</span> Column<span class="token punctuation">&#123;</span>Table<span class="token punctuation">:</span> CurrentTable<span class="token punctuation">,</span> Name<span class="token punctuation">:</span> PrimaryKey<span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>

<span class="token comment">// Column quote with name</span>
<span class="token keyword">type</span> Column <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  Table <span class="token builtin">string</span>
  Name  <span class="token builtin">string</span>
  Alias <span class="token builtin">string</span>
  Raw   <span class="token builtin">bool</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Table quote with name</span>
<span class="token keyword">type</span> Table <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  Name  <span class="token builtin">string</span>
  Alias <span class="token builtin">string</span>
  Raw   <span class="token builtin">bool</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>golang</category>
        <category>golang 框架</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>GORM</tag>
      </tags>
  </entry>
  <entry>
    <title>Gin 框架初探</title>
    <url>/2022/02/13/Go/Gin%20%E6%A1%86%E6%9E%B6%E5%88%9D%E6%8E%A2%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><table>
<thead>
<tr>
<th>特性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>快速</strong></td>
<td>基于 Radix 树的路由，小内存占用。没有反射。可预测的 API 性能。</td>
</tr>
<tr>
<td><strong>支持中间件</strong></td>
<td>传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，GZIP，最终操作 DB。</td>
</tr>
<tr>
<td><strong>Crash 处理</strong></td>
<td>Gin 可以 catch 一个发生在 HTTP 请求中的 panic 并 recover 它。</td>
</tr>
<tr>
<td><strong>JSON 验证</strong></td>
<td>Gin 可以解析并验证请求的 JSON，例如检查所需值的存在。</td>
</tr>
<tr>
<td><strong>内置渲染</strong></td>
<td>Gin 为 JSON，XML 和 HTML 渲染提供了易于使用的 API。</td>
</tr>
</tbody></table>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 新建一个没有任何默认中间件的路由</span>
  r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// 全局中间件</span>
  <span class="token comment">// Logger 中间件将日志写入 gin.DefaultWriter，即使你将 GIN_MODE 设置为 release。</span>
  <span class="token comment">// By default gin.DefaultWriter = os.Stdout</span>
  router<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>gin<span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// Recovery 中间件会 recover 任何 panic。如果有 panic 的话，会写入 500。</span>
  router<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>gin<span class="token punctuation">.</span><span class="token function">Recovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 你可以为每个路由添加任意数量的中间件。</span>
  router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/benchmark"</span><span class="token punctuation">,</span> <span class="token function">MyBenchLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> benchEndpoint<span class="token punctuation">)</span>

  <span class="token comment">// 认证路由组</span>
  <span class="token comment">// authorized := router.Group("/", AuthRequired())</span>
  <span class="token comment">// 和使用以下两行代码的效果完全一样:</span>
  authorized <span class="token operator">:=</span> router<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
  <span class="token comment">// 路由组中间件! 在此例中，我们在 "authorized" 路由组中使用自定义创建的 </span>
    <span class="token comment">// AuthRequired() 中间件</span>
  authorized<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token function">AuthRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    authorized<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> loginEndpoint<span class="token punctuation">)</span>
    authorized<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/submit"</span><span class="token punctuation">,</span> submitEndpoint<span class="token punctuation">)</span>
    authorized<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/read"</span><span class="token punctuation">,</span> readEndpoint<span class="token punctuation">)</span>

    <span class="token comment">// 嵌套路由组</span>
    testing <span class="token operator">:=</span> authorized<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"testing"</span><span class="token punctuation">)</span>
    testing<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/analytics"</span><span class="token punctuation">,</span> analyticsEndpoint<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 监听并在 0.0.0.0:8080 上启动服务</span>
  router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><h4 id="Restful-API-命名规范"><a href="#Restful-API-命名规范" class="headerlink" title="Restful API 命名规范"></a>Restful API 命名规范</h4><div class="tabs" id="gin-url"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#gin-url-1">基本用法</button></li><li class="tab"><button type="button" data-href="#gin-url-2">Router Group</button></li><li class="tab"><button type="button" data-href="#gin-url-3">CREATE</button></li><li class="tab"><button type="button" data-href="#gin-url-4">DELETE</button></li><li class="tab"><button type="button" data-href="#gin-url-5">GET</button></li><li class="tab"><button type="button" data-href="#gin-url-6">UPDATE</button></li><li class="tab"><button type="button" data-href="#gin-url-7">Get Query Parameters</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="gin-url-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Create Gin router</span>
    router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// Instantiate recipe Handler and provide a data store implementation</span>
    store <span class="token operator">:=</span> recipes<span class="token punctuation">.</span><span class="token function">NewMemStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    recipesHandler <span class="token operator">:=</span> <span class="token function">NewRecipesHandler</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>

    <span class="token comment">// Register Routes</span>
    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> homePage<span class="token punctuation">)</span>
    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/recipes"</span><span class="token punctuation">,</span> recipesHandler<span class="token punctuation">.</span>ListRecipes<span class="token punctuation">)</span>
    router<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/recipes"</span><span class="token punctuation">,</span> recipesHandler<span class="token punctuation">.</span>CreateRecipe<span class="token punctuation">)</span>
    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/recipes/:id"</span><span class="token punctuation">,</span> recipesHandler<span class="token punctuation">.</span>GetRecipe<span class="token punctuation">)</span>
    router<span class="token punctuation">.</span><span class="token function">PUT</span><span class="token punctuation">(</span><span class="token string">"/recipes/:id"</span><span class="token punctuation">,</span> recipesHandler<span class="token punctuation">.</span>UpdateRecipe<span class="token punctuation">)</span>
    router<span class="token punctuation">.</span><span class="token function">DELETE</span><span class="token punctuation">(</span><span class="token string">"/recipes/:id"</span><span class="token punctuation">,</span> recipesHandler<span class="token punctuation">.</span>DeleteRecipe<span class="token punctuation">)</span>

    <span class="token comment">// Start the server</span>
    router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gin-url-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// 简单的路由组: v1</span>
  <span class="token punctuation">&#123;</span>
    v1 <span class="token operator">:=</span> router<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/v1"</span><span class="token punctuation">)</span>
    v1<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> loginEndpoint<span class="token punctuation">)</span>
    v1<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/submit"</span><span class="token punctuation">,</span> submitEndpoint<span class="token punctuation">)</span>
    v1<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/read"</span><span class="token punctuation">,</span> readEndpoint<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 简单的路由组: v2</span>
  <span class="token punctuation">&#123;</span>
    v2 <span class="token operator">:=</span> router<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/v2"</span><span class="token punctuation">)</span>
    v2<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> loginEndpoint<span class="token punctuation">)</span>
    v2<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/submit"</span><span class="token punctuation">,</span> submitEndpoint<span class="token punctuation">)</span>
    v2<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/read"</span><span class="token punctuation">,</span> readEndpoint<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gin-url-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>h RecipesHandler<span class="token punctuation">)</span> <span class="token function">CreateRecipe</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Get request body and convert it to recipes.Recipe</span>
    <span class="token keyword">var</span> recipe recipes<span class="token punctuation">.</span>Recipe
    <span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBindJSON</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>recipe<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Create a URL-friendly name</span>
    id <span class="token operator">:=</span> slug<span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>recipe<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>

    <span class="token comment">// Add to the store</span>
    h<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> recipe<span class="token punctuation">)</span>

    <span class="token comment">// Return success payload</span>
    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gin-url-4"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>h RecipesHandler<span class="token punctuation">)</span> <span class="token function">DeleteRecipe</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Retrieve URL parameter</span>
    id <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>

    <span class="token comment">// Call the store to delete the recipe</span>
    err <span class="token operator">:=</span> h<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> err <span class="token operator">==</span> recipes<span class="token punctuation">.</span>NotFoundErr <span class="token punctuation">&#123;</span>
            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">&#125;</span>
        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Return success payload</span>
    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gin-url-5"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>h RecipesHandler<span class="token punctuation">)</span> <span class="token function">GetRecipe</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Retrieve the URL parameter</span>
    id <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>

    <span class="token comment">// Get the recipe by ID from the store</span>
    recipe<span class="token punctuation">,</span> err <span class="token operator">:=</span> h<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Return the recipe, JSON encoding is implicit</span>
    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> recipe<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>h RecipesHandler<span class="token punctuation">)</span> <span class="token function">ListRecipes</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Call the store to get the list of recipes</span>
    r<span class="token punctuation">,</span> err <span class="token operator">:=</span> h<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Return the list, JSON encoding is implicit</span>
    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gin-url-6"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>h RecipesHandler<span class="token punctuation">)</span> <span class="token function">UpdateRecipe</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Get request body and convert it to recipes.Recipe</span>
    <span class="token keyword">var</span> recipe recipes<span class="token punctuation">.</span>Recipe
    <span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBindJSON</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>recipe<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Retrieve URL parameter</span>
    id <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>

    <span class="token comment">// Call the store to update the recipe</span>
    err <span class="token operator">:=</span> h<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> recipe<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> err <span class="token operator">==</span> recipes<span class="token punctuation">.</span>NotFoundErr <span class="token punctuation">&#123;</span>
            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">&#125;</span>
        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Return success payload</span>
    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gin-url-7"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  router<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/post"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    id <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>
    page <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DefaultQuery</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span>
    name <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>
    message <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span>

    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"id: %s; page: %s; name: %s; message: %s"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> page<span class="token punctuation">,</span> name<span class="token punctuation">,</span> message<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>



<h3 id="csrf-攻击防范（gorilla-csrf）"><a href="#csrf-攻击防范（gorilla-csrf）" class="headerlink" title="csrf 攻击防范（gorilla&#x2F;csrf）"></a>csrf 攻击防范（gorilla&#x2F;csrf）</h3><div class="tabs" id="csrf"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#csrf-1">Base Use Case</button></li><li class="tab"><button type="button" data-href="#csrf-2">Selective Use Case</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="csrf-1"><p>Here’s the common use-case: HTML forms you want to provide CSRF protection for, in order to protect malicious(恶意的) POST requests being made:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"net/http"</span>

    <span class="token string">"github.com/gorilla/csrf"</span>
    <span class="token string">"github.com/gorilla/mux"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    r <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/signup"</span><span class="token punctuation">,</span> ShowSignupForm<span class="token punctuation">)</span>
    <span class="token comment">// All POST requests without a valid token will return HTTP 403 Forbidden.</span>
    <span class="token comment">// We should also ensure that our mutating (non-idempotent) handler only</span>
    <span class="token comment">// matches on POST requests. We can check that here, at the router level, or</span>
    <span class="token comment">// within the handler itself via r.Method.</span>
    r<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/signup/post"</span><span class="token punctuation">,</span> SubmitSignupForm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Methods</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">)</span>

    <span class="token comment">// Add the middleware to your router by wrapping it.</span>
    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8000"</span><span class="token punctuation">,</span>
        csrf<span class="token punctuation">.</span><span class="token function">Protect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"32-byte-long-auth-key"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// PS: Don't forget to pass csrf.Secure(false) if you're developing locally</span>
    <span class="token comment">// over plain HTTP (just don't leave it on in production).</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">ShowSignupForm</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// signup_form.tmpl just needs a &#123;&#123; .csrfField &#125;&#125; template tag for</span>
    <span class="token comment">// csrf.TemplateField to inject the CSRF token into. Easy!</span>
    t<span class="token punctuation">.</span><span class="token function">ExecuteTemplate</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"signup_form.tmpl"</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>
        csrf<span class="token punctuation">.</span>TemplateTag<span class="token punctuation">:</span> csrf<span class="token punctuation">.</span><span class="token function">TemplateField</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token comment">// We could also retrieve the token directly from csrf.Token(r) and</span>
    <span class="token comment">// set it in the request header - w.Header.Set("X-CSRF-Token", token)</span>
    <span class="token comment">// This is useful if you're sending JSON to clients or a front-end JavaScript</span>
    <span class="token comment">// framework.</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">SubmitSignupForm</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// We can trust that requests making it this far have satisfied</span>
    <span class="token comment">// our CSRF protection requirements.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="csrf-2"><p>We’ll also look at applying selective CSRF protection using gorilla&#x2F;mux’s sub-routers, as we don’t handle any POST&#x2F;PUT&#x2F;DELETE requests with our top-level router.</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"github.com/gorilla/csrf"</span>
    <span class="token string">"github.com/gorilla/mux"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    r <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    csrfMiddleware <span class="token operator">:=</span> csrf<span class="token punctuation">.</span><span class="token function">Protect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"32-byte-long-auth-key"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    api <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">PathPrefix</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Subrouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    api<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>csrfMiddleware<span class="token punctuation">)</span>
    api<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/user/&#123;id&#125;"</span><span class="token punctuation">,</span> GetUser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Methods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span>

    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8000"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">GetUser</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Authenticate the request, get the id from the route params,</span>
    <span class="token comment">// and fetch the user from the DB, etc.</span>

    <span class="token comment">// Get the token and pass it in the CSRF header. Our JSON-speaking client</span>
    <span class="token comment">// or JavaScript framework can now read the header and return the token in</span>
    <span class="token comment">// in its own "X-CSRF-Token" request header on the subsequent POST.</span>
    w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"X-CSRF-Token"</span><span class="token punctuation">,</span> csrf<span class="token punctuation">.</span><span class="token function">Token</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>
    b<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>

    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h3 id="结构化绑定和解析"><a href="#结构化绑定和解析" class="headerlink" title="结构化绑定和解析"></a>结构化绑定和解析</h3><div class="tabs" id="json-structure-binding"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#json-structure-binding-1">Validator</button></li><li class="tab"><button type="button" data-href="#json-structure-binding-2">Json Bind 示例</button></li><li class="tab"><button type="button" data-href="#json-structure-binding-3">自定义校验器</button></li><li class="tab"><button type="button" data-href="#json-structure-binding-4">Protobuf 绑定</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="json-structure-binding-1"><p><a href="https://github.com/go-playground/validator">https://github.com/go-playground/validator</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="json-structure-binding-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"github.com/gin-gonic/gin"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> LoginForm <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  User     <span class="token builtin">string</span> <span class="token string">`form:"user" binding:"required"`</span>
  Password <span class="token builtin">string</span> <span class="token string">`form:"password" binding:"required"`</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  router<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 你可以使用显式绑定声明绑定 multipart form：</span>
    <span class="token comment">// c.ShouldBindWith(&amp;form, binding.Form)</span>
    <span class="token comment">// 或者简单地使用 ShouldBind 方法自动绑定：</span>
    <span class="token keyword">var</span> form LoginForm
    <span class="token comment">// 在这种情况下，将自动选择合适的绑定</span>
    <span class="token comment">// 注意 ShouldBind 不能调用多次， 调用后c.Request.Body 是 EOF</span>
    <span class="token keyword">if</span> c<span class="token punctuation">.</span><span class="token function">ShouldBind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>form<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> form<span class="token punctuation">.</span>User <span class="token operator">==</span> <span class="token string">"user"</span> <span class="token operator">&amp;&amp;</span> form<span class="token punctuation">.</span>Password <span class="token operator">==</span> <span class="token string">"password"</span> <span class="token punctuation">&#123;</span>
        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token string">"you are logged in"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token string">"unauthorized"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 要想多次绑定，可以使用 c.ShouldBindBodyWith.</span>
<span class="token keyword">func</span> <span class="token function">SomeHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  objA <span class="token operator">:=</span> formA<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  objB <span class="token operator">:=</span> formB<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token comment">// 读取 c.Request.Body 并将结果存入上下文。</span>
  <span class="token keyword">if</span> errA <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBindBodyWith</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>objA<span class="token punctuation">,</span> binding<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span> errA <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">`the body should be formA`</span><span class="token punctuation">)</span>
  <span class="token comment">// 这时, 复用存储在上下文中的 body。</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> errB <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBindBodyWith</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>objB<span class="token punctuation">,</span> binding<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span> errB <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">`the body should be formB JSON`</span><span class="token punctuation">)</span>
  <span class="token comment">// 可以接受其他格式</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> errB2 <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBindBodyWith</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>objB<span class="token punctuation">,</span> binding<span class="token punctuation">.</span>XML<span class="token punctuation">)</span><span class="token punctuation">;</span> errB2 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">`the body should be formB XML`</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">...</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="json-structure-binding-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"net/http"</span>
  <span class="token string">"reflect"</span>
  <span class="token string">"time"</span>

  <span class="token string">"github.com/gin-gonic/gin"</span>
  <span class="token string">"github.com/gin-gonic/gin/binding"</span>
  <span class="token string">"github.com/go-playground/validator/v10"</span>
<span class="token punctuation">)</span>

<span class="token comment">// Booking 包含绑定和验证的数据。</span>
<span class="token keyword">type</span> Booking <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  CheckIn  time<span class="token punctuation">.</span>Time <span class="token string">`form:"check_in" binding:"required,bookabledate" time_format:"2006-01-02"`</span>
  CheckOut time<span class="token punctuation">.</span>Time <span class="token string">`form:"check_out" binding:"required,gtfield=CheckIn,bookabledate" time_format:"2006-01-02"`</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> bookableDate validator<span class="token punctuation">.</span>Func <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>fl validator<span class="token punctuation">.</span>FieldLevel<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
  date<span class="token punctuation">,</span> ok <span class="token operator">:=</span> fl<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span>
  <span class="token keyword">if</span> ok <span class="token punctuation">&#123;</span>
    today <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> today<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  route <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> binding<span class="token punctuation">.</span>Validator<span class="token punctuation">.</span><span class="token function">Engine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>validator<span class="token punctuation">.</span>Validate<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
    v<span class="token punctuation">.</span><span class="token function">RegisterValidation</span><span class="token punctuation">(</span><span class="token string">"bookabledate"</span><span class="token punctuation">,</span> bookableDate<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  route<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/bookable"</span><span class="token punctuation">,</span> getBookable<span class="token punctuation">)</span>
  route<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8085"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">getBookable</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> b Booking
  <span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBindWith</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span> binding<span class="token punctuation">.</span>Query<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Booking dates are valid!"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> <span class="token string">"localhost:8085/bookable?check_in=2018-04-16&amp;check_out=2018-04-17"</span>
<span class="token punctuation">&#123;</span><span class="token string">"message"</span><span class="token builtin class-name">:</span><span class="token string">"Booking dates are valid!"</span><span class="token punctuation">&#125;</span>

$ <span class="token function">curl</span> <span class="token string">"localhost:8085/bookable?check_in=2018-03-08&amp;check_out=2018-03-09"</span>
<span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token builtin class-name">:</span><span class="token string">"Key: 'Booking.CheckIn' Error:Field validation for 'CheckIn' failed on the 'bookabledate' tag"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="json-structure-binding-4"><pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token keyword">package</span> protoexample<span class="token punctuation">;</span>

<span class="token keyword">enum</span> <span class="token class-name">FOO</span> <span class="token punctuation">&#123;</span>X<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">message</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">required</span> <span class="token builtin">string</span> label <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token keyword">optional</span> <span class="token builtin">int32</span> type <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">[</span><span class="token annotation">default</span><span class="token operator">=</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">repeated</span> <span class="token builtin">int64</span> reps <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
   <span class="token keyword">optional</span> <span class="token positional-class-name class-name">group</span> OptionalGroup <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">&#123;</span>
     <span class="token keyword">required</span> <span class="token builtin">string</span> RequiredField <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/someProtoBuf"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    reps <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int64</span><span class="token punctuation">&#123;</span><span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
    label <span class="token operator">:=</span> <span class="token string">"test"</span>
    <span class="token comment">// The specific definition of protobuf is written in the testdata/protoexample file.</span>
    data <span class="token operator">:=</span> <span class="token operator">&amp;</span>protoexample<span class="token punctuation">.</span>Test<span class="token punctuation">&#123;</span>
      Label<span class="token punctuation">:</span> <span class="token operator">&amp;</span>label<span class="token punctuation">,</span>
      Reps<span class="token punctuation">:</span>  reps<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// Note that data becomes binary data in the response</span>
    <span class="token comment">// Will output protoexample.Test protobuf serialized data</span>
    c<span class="token punctuation">.</span><span class="token function">ProtoBuf</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token comment">// Listen and serve on 0.0.0.0:8080</span>
  router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h3 id="运行多个服务（多端口）"><a href="#运行多个服务（多端口）" class="headerlink" title="运行多个服务（多端口）"></a>运行多个服务（多端口）</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"log"</span>
  <span class="token string">"net/http"</span>
  <span class="token string">"time"</span>

  <span class="token string">"github.com/gin-gonic/gin"</span>
  <span class="token string">"golang.org/x/sync/errgroup"</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
  g errgroup<span class="token punctuation">.</span>Group
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">router01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">&#123;</span>
  e <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  e<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>gin<span class="token punctuation">.</span><span class="token function">Recovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  e<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>
      http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span>
      gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
        <span class="token string">"code"</span><span class="token punctuation">:</span>  http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span>
        <span class="token string">"error"</span><span class="token punctuation">:</span> <span class="token string">"Welcome server 01"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> e
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">router02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">&#123;</span>
  e <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  e<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>gin<span class="token punctuation">.</span><span class="token function">Recovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  e<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>
      http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span>
      gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
        <span class="token string">"code"</span><span class="token punctuation">:</span>  http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span>
        <span class="token string">"error"</span><span class="token punctuation">:</span> <span class="token string">"Welcome server 02"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> e
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  server01 <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>
    Addr<span class="token punctuation">:</span>         <span class="token string">":8080"</span><span class="token punctuation">,</span>
    Handler<span class="token punctuation">:</span>      <span class="token function">router01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    ReadTimeout<span class="token punctuation">:</span>  <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
    WriteTimeout<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>

  server02 <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>
    Addr<span class="token punctuation">:</span>         <span class="token string">":8081"</span><span class="token punctuation">,</span>
    Handler<span class="token punctuation">:</span>      <span class="token function">router02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    ReadTimeout<span class="token punctuation">:</span>  <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
    WriteTimeout<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>

  g<span class="token punctuation">.</span><span class="token function">Go</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> server01<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  g<span class="token punctuation">.</span><span class="token function">Go</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> server02<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="优雅关闭"><a href="#优雅关闭" class="headerlink" title="优雅关闭"></a>优雅关闭</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// +build go1.8</span>

<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"context"</span>
  <span class="token string">"log"</span>
  <span class="token string">"net/http"</span>
  <span class="token string">"os"</span>
  <span class="token string">"os/signal"</span>
  <span class="token string">"time"</span>

  <span class="token string">"github.com/gin-gonic/gin"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"Welcome Gin Server"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  srv <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>
    Addr<span class="token punctuation">:</span>    <span class="token string">":8080"</span><span class="token punctuation">,</span>
    Handler<span class="token punctuation">:</span> router<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 服务连接</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> srv<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> err <span class="token operator">!=</span> http<span class="token punctuation">.</span>ErrServerClosed <span class="token punctuation">&#123;</span>
      log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"listen: %s\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// 等待中断信号以优雅地关闭服务器（设置 5 秒的超时时间）</span>
  quit <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> os<span class="token punctuation">.</span>Signal<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  signal<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span>quit<span class="token punctuation">,</span> os<span class="token punctuation">.</span>Interrupt<span class="token punctuation">)</span>
  <span class="token operator">&lt;-</span>quit
  log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Shutdown Server ..."</span><span class="token punctuation">)</span>

  ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
  <span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> srv<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"Server Shutdown:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Server exiting"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="在中间件使用-goroutine-禁止传递-gin-Context"><a href="#在中间件使用-goroutine-禁止传递-gin-Context" class="headerlink" title="在中间件使用 goroutine 禁止传递 gin.Context"></a>在中间件使用 goroutine 禁止传递 gin.Context</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/long_async"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建在 goroutine 中使用的副本</span>
    cCp <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 用 time.Sleep() 模拟一个长任务。</span>
      time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>

      <span class="token comment">// 请注意您使用的是复制的上下文 "cCp"，这一点很重要</span>
      log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Done! in path "</span> <span class="token operator">+</span> cCp<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/long_sync"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 用 time.Sleep() 模拟一个长任务。</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>

    <span class="token comment">// 因为没有使用 goroutine，不需要拷贝上下文</span>
    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Done! in path "</span> <span class="token operator">+</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  <span class="token comment">// 监听并在 0.0.0.0:8080 上启动服务</span>
  router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><div class="tabs" id="redirect"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#redirect-1">GET</button></li><li class="tab"><button type="button" data-href="#redirect-2">POST</button></li><li class="tab"><button type="button" data-href="#redirect-3">路由重定向</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="redirect-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go">router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  c<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusMovedPermanently<span class="token punctuation">,</span> <span class="token string">"http://www.google.com/"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="redirect-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go">router<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  c<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusFound<span class="token punctuation">,</span> <span class="token string">"/foo"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="redirect-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go">router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path <span class="token operator">=</span> <span class="token string">"/test2"</span>
    router<span class="token punctuation">.</span><span class="token function">HandleContext</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/test2"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">:</span> <span class="token string">"world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><div class="tabs" id="文件上传"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#文件上传-1">单文件</button></li><li class="tab"><button type="button" data-href="#文件上传-2">多文件</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="文件上传-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 为 multipart forms 设置较低的内存限制 (默认是 32 MiB)</span>
  router<span class="token punctuation">.</span>MaxMultipartMemory <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span>  <span class="token comment">// 8 MiB</span>
  router<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 单文件</span>
    file<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">FormFile</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span>
    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>Filename<span class="token punctuation">)</span>

    dst <span class="token operator">:=</span> <span class="token string">"./"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span>Filename
    <span class="token comment">// 上传文件至指定的完整文件路径</span>
    c<span class="token punctuation">.</span><span class="token function">SaveUploadedFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"./files/"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span>Filename<span class="token punctuation">)</span>

    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"'%s' uploaded!"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>Filename<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://localhost:8080/upload <span class="token punctuation">\</span>
  <span class="token parameter variable">-F</span> <span class="token string">"file=@/Users/appleboy/test.zip"</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: multipart/form-data"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="文件上传-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 为 multipart forms 设置较低的内存限制 (默认是 32 MiB)</span>
  router<span class="token punctuation">.</span>MaxMultipartMemory <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span>  <span class="token comment">// 8 MiB</span>
  router<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Multipart form</span>
    form<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">MultipartForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    files <span class="token operator">:=</span> form<span class="token punctuation">.</span>File<span class="token punctuation">[</span><span class="token string">"upload[]"</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> file <span class="token operator">:=</span> <span class="token keyword">range</span> files <span class="token punctuation">&#123;</span>
      log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>Filename<span class="token punctuation">)</span>

      <span class="token comment">// 上传文件至指定目录</span>
      c<span class="token punctuation">.</span><span class="token function">SaveUploadedFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"./files/"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span>Filename<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d files uploaded!"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://localhost:8080/upload <span class="token punctuation">\</span>
  <span class="token parameter variable">-F</span> <span class="token string">"upload[]=@/Users/appleboy/test1.zip"</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">-F</span> <span class="token string">"upload[]=@/Users/appleboy/test2.zip"</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: multipart/form-data"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>golang</category>
        <category>golang 框架</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>Gin</tag>
      </tags>
  </entry>
  <entry>
    <title>golang tools 之 Viper,Cobra</title>
    <url>/2022/03/13/Go/viper,cobra/</url>
    <content><![CDATA[<h2 id="Viper"><a href="#Viper" class="headerlink" title="Viper"></a>Viper</h2><br/>



<h2 id="Cobra"><a href="#Cobra" class="headerlink" title="Cobra"></a>Cobra</h2>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>golang 命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程篇（10）原子操作</title>
    <url>/2023/12/23/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87%EF%BC%8810%EF%BC%89%20%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>



<h2 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h2><p>多核系统中，由于缓存的存在，单核上的单个指令进行原子操作时，为了确保其他核不访问该原子操作的地址，提供相应指令实现锁机制，例如，x86 (LOCK CMPXCHG op1, op2), ARM (LL&#x2F;SC, Load Link&#x2F;Store Conditional)。为了让一个核执行原子操作后修改的值能及时同步给其他核，一般使用内存屏障（memory barrier）的方式，一个写内存屏障告诉处理器，必须等到写操作被刷到内存中，在进行其他操作。这个操作还会使相关 CPU 缓存失效，以便其他处理器从主存中重新拉取数据。</p>
<p>Go 提供了一个通用的原子操作 API，封装成 sync.atomic。automic 时实现 lock-free 的数据结构的基石。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Package queue provides a lock-free queue and two-Lock concurrent queue which use the algorithm proposed by Michael and Scott.</span>
<span class="token comment">// https://doi.org/10.1145/248052.248106.</span>
<span class="token comment">//</span>
<span class="token comment">// see pseudocode at https://www.cs.rochester.edu/research/synchronization/pseudocode/queues.html</span>
<span class="token comment">// It will be refactored after go generic is released.</span>
<span class="token keyword">package</span> queue

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"sync/atomic"</span>
  <span class="token string">"unsafe"</span>
<span class="token punctuation">)</span>

<span class="token comment">// LKQueue is a lock-free unbounded queue.</span>
<span class="token keyword">type</span> LKQueue<span class="token punctuation">[</span>T any<span class="token punctuation">]</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  head unsafe<span class="token punctuation">.</span>Pointer
  tail unsafe<span class="token punctuation">.</span>Pointer
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> node<span class="token punctuation">[</span>T any<span class="token punctuation">]</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  value T
  next  unsafe<span class="token punctuation">.</span>Pointer
<span class="token punctuation">&#125;</span>

<span class="token comment">// NewLKQueue returns an empty queue.</span>
<span class="token keyword">func</span> NewLKQueue<span class="token punctuation">[</span>T any<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>LKQueue<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
  n <span class="token operator">:=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>node<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>LKQueue<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>head<span class="token punctuation">:</span> n<span class="token punctuation">,</span> tail<span class="token punctuation">:</span> n<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Enqueue puts the given value v at the tail of the queue.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>q <span class="token operator">*</span>LKQueue<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Enqueue</span><span class="token punctuation">(</span>v T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  n <span class="token operator">:=</span> <span class="token operator">&amp;</span>node<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">:</span> v<span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
    tail <span class="token operator">:=</span> load<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token punctuation">.</span>tail<span class="token punctuation">)</span>
    next <span class="token operator">:=</span> load<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tail<span class="token punctuation">.</span>next<span class="token punctuation">)</span>
    <span class="token keyword">if</span> tail <span class="token operator">==</span> load<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token punctuation">.</span>tail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// are tail and next consistent?</span>
      <span class="token keyword">if</span> next <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token function">cas</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tail<span class="token punctuation">.</span>next<span class="token punctuation">,</span> next<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token function">cas</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token punctuation">.</span>tail<span class="token punctuation">,</span> tail<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token comment">// Enqueue is done.  try to swing tail to the inserted node</span>
          <span class="token keyword">return</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// tail was not pointing to the last node</span>
        <span class="token comment">// try to swing Tail to the next node</span>
        <span class="token function">cas</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token punctuation">.</span>tail<span class="token punctuation">,</span> tail<span class="token punctuation">,</span> next<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Dequeue removes and returns the value at the head of the queue.</span>
<span class="token comment">// It returns the zero value if the queue is empty.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>q <span class="token operator">*</span>LKQueue<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> T <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> t T
  <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
    head <span class="token operator">:=</span> load<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token punctuation">.</span>head<span class="token punctuation">)</span>
    tail <span class="token operator">:=</span> load<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token punctuation">.</span>tail<span class="token punctuation">)</span>
    next <span class="token operator">:=</span> load<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span>
    <span class="token keyword">if</span> head <span class="token operator">==</span> load<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token punctuation">.</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// are head, tail, and next consistent?</span>
      <span class="token keyword">if</span> head <span class="token operator">==</span> tail <span class="token punctuation">&#123;</span> <span class="token comment">// is queue empty or tail falling behind?</span>
        <span class="token keyword">if</span> next <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token comment">// is queue empty?</span>
          <span class="token keyword">return</span> t
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// tail is falling behind.  try to advance it</span>
        <span class="token function">cas</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token punctuation">.</span>tail<span class="token punctuation">,</span> tail<span class="token punctuation">,</span> next<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// read value before CAS otherwise another dequeue might free the next node</span>
        v <span class="token operator">:=</span> next<span class="token punctuation">.</span>value
        <span class="token keyword">if</span> <span class="token function">cas</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token punctuation">.</span>head<span class="token punctuation">,</span> head<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> v <span class="token comment">// Dequeue is done.  return</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 读取节点的值</span>
<span class="token keyword">func</span> load<span class="token punctuation">[</span>T any<span class="token punctuation">]</span><span class="token punctuation">(</span>p <span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>node<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>atomic<span class="token punctuation">.</span><span class="token function">LoadPointer</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 原子修改节点值</span>
<span class="token keyword">func</span> cas<span class="token punctuation">[</span>T any<span class="token punctuation">]</span><span class="token punctuation">(</span>p <span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token operator">*</span>node<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapPointer</span><span class="token punctuation">(</span>
    p<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token builtin">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><div class="tabs" id="atomic"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#atomic-1">Bool</button></li><li class="tab"><button type="button" data-href="#atomic-2">Int32</button></li><li class="tab"><button type="button" data-href="#atomic-3">Int64</button></li><li class="tab"><button type="button" data-href="#atomic-4">Pointer</button></li><li class="tab"><button type="button" data-href="#atomic-5">Uint32</button></li><li class="tab"><button type="button" data-href="#atomic-6">Uint64</button></li><li class="tab"><button type="button" data-href="#atomic-7">Uintptr</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="atomic-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> atomic

<span class="token keyword">import</span> <span class="token string">"unsafe"</span>

<span class="token comment">// A Bool is an atomic boolean value.</span>
<span class="token comment">// The zero value is false.</span>
<span class="token keyword">type</span> Bool <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token boolean">_</span> noCopy
  v <span class="token builtin">uint32</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Load atomically loads and returns the value stored in x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Bool<span class="token punctuation">)</span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">LoadUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Store atomically stores val into x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Bool<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>val <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">StoreUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> <span class="token function">b32</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Swap atomically stores new into x and returns the previous value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Bool<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">SwapUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> <span class="token function">b32</span><span class="token punctuation">(</span><span class="token builtin">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// CompareAndSwap executes the compare-and-swap operation for the boolean value x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Bool<span class="token punctuation">)</span> <span class="token function">CompareAndSwap</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>swapped <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">CompareAndSwapUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> <span class="token function">b32</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">b32</span><span class="token punctuation">(</span><span class="token builtin">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// b32 returns a uint32 0 or 1 representing b.</span>
<span class="token keyword">func</span> <span class="token function">b32</span><span class="token punctuation">(</span>b <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">uint32</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> b <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="atomic-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// An Int32 is an atomic int32. The zero value is zero.</span>
<span class="token keyword">type</span> Int32 <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token boolean">_</span> noCopy
  v <span class="token builtin">int32</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Load atomically loads and returns the value stored in x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Int32<span class="token punctuation">)</span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int32</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">LoadInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Store atomically stores val into x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Int32<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>val <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">StoreInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Swap atomically stores new into x and returns the previous value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Int32<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">SwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> <span class="token builtin">new</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// CompareAndSwap executes the compare-and-swap operation for x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Int32<span class="token punctuation">)</span> <span class="token function">CompareAndSwap</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>swapped <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Add atomically adds delta to x and returns the new value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Int32<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>delta <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// And atomically performs a bitwise AND operation on x using the bitmask</span>
<span class="token comment">// provided as mask and returns the old value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Int32<span class="token punctuation">)</span> <span class="token function">And</span><span class="token punctuation">(</span>mask <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">AndInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> mask<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Or atomically performs a bitwise OR operation on x using the bitmask</span>
<span class="token comment">// provided as mask and returns the old value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Int32<span class="token punctuation">)</span> <span class="token function">Or</span><span class="token punctuation">(</span>mask <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">OrInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> mask<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="atomic-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// An Int64 is an atomic int64. The zero value is zero.</span>
<span class="token keyword">type</span> Int64 <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token boolean">_</span> noCopy
  <span class="token boolean">_</span> align64
  v <span class="token builtin">int64</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Load atomically loads and returns the value stored in x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Int64<span class="token punctuation">)</span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int64</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">LoadInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Store atomically stores val into x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Int64<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>val <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">StoreInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Swap atomically stores new into x and returns the previous value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Int64<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">SwapInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> <span class="token builtin">new</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// CompareAndSwap executes the compare-and-swap operation for x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Int64<span class="token punctuation">)</span> <span class="token function">CompareAndSwap</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>swapped <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">CompareAndSwapInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Add atomically adds delta to x and returns the new value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Int64<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>delta <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">AddInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// And atomically performs a bitwise AND operation on x using the bitmask</span>
<span class="token comment">// provided as mask and returns the old value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Int64<span class="token punctuation">)</span> <span class="token function">And</span><span class="token punctuation">(</span>mask <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">AndInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> mask<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Or atomically performs a bitwise OR operation on x using the bitmask</span>
<span class="token comment">// provided as mask and returns the old value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Int64<span class="token punctuation">)</span> <span class="token function">Or</span><span class="token punctuation">(</span>mask <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">OrInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> mask<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// A Uint32 is an atomic uint32. The zero value is zero.</span>
<span class="token keyword">type</span> Uint32 <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token boolean">_</span> noCopy
  v <span class="token builtin">uint32</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="atomic-4"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// For testing *Pointer[T]'s methods can be inlined.</span>
<span class="token comment">// Keep in sync with cmd/compile/internal/test/inl_test.go:TestIntendedInlining.</span>
<span class="token keyword">var</span> <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Pointer<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">// A Pointer is an atomic pointer of type *T. The zero value is a nil *T.</span>
<span class="token keyword">type</span> Pointer<span class="token punctuation">[</span>T any<span class="token punctuation">]</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Mention *T in a field to disallow conversion between Pointer types.</span>
  <span class="token comment">// See go.dev/issue/56603 for more details.</span>
  <span class="token comment">// Use *T, not T, to avoid spurious recursive type definition errors.</span>
  <span class="token boolean">_</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>T

  <span class="token boolean">_</span> noCopy
  v unsafe<span class="token punctuation">.</span>Pointer
<span class="token punctuation">&#125;</span>

<span class="token comment">// Load atomically loads and returns the value stored in x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Pointer<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>T <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">LoadPointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Store atomically stores val into x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Pointer<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>val <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">StorePointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Swap atomically stores new into x and returns the previous value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Pointer<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">SwapPointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token builtin">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// CompareAndSwap executes the compare-and-swap operation for x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Pointer<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">CompareAndSwap</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token punctuation">(</span>swapped <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">CompareAndSwapPointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token builtin">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="atomic-5"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Load atomically loads and returns the value stored in x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uint32<span class="token punctuation">)</span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint32</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">LoadUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Store atomically stores val into x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uint32<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>val <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">StoreUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Swap atomically stores new into x and returns the previous value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uint32<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">SwapUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> <span class="token builtin">new</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// CompareAndSwap executes the compare-and-swap operation for x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uint32<span class="token punctuation">)</span> <span class="token function">CompareAndSwap</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>swapped <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">CompareAndSwapUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Add atomically adds delta to x and returns the new value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uint32<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>delta <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">AddUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// And atomically performs a bitwise AND operation on x using the bitmask</span>
<span class="token comment">// provided as mask and returns the old value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uint32<span class="token punctuation">)</span> <span class="token function">And</span><span class="token punctuation">(</span>mask <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">AndUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> mask<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Or atomically performs a bitwise OR operation on x using the bitmask</span>
<span class="token comment">// provided as mask and returns the old value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uint32<span class="token punctuation">)</span> <span class="token function">Or</span><span class="token punctuation">(</span>mask <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">OrUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> mask<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="atomic-6"><pre class="line-numbers language-go" data-language="go"><code class="language-go">
<span class="token comment">// A Uint64 is an atomic uint64. The zero value is zero.</span>
<span class="token keyword">type</span> Uint64 <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token boolean">_</span> noCopy
  <span class="token boolean">_</span> align64
  v <span class="token builtin">uint64</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Load atomically loads and returns the value stored in x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uint64<span class="token punctuation">)</span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint64</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">LoadUint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Store atomically stores val into x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uint64<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>val <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">StoreUint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Swap atomically stores new into x and returns the previous value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uint64<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">SwapUint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> <span class="token builtin">new</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// CompareAndSwap executes the compare-and-swap operation for x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uint64<span class="token punctuation">)</span> <span class="token function">CompareAndSwap</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>swapped <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">CompareAndSwapUint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Add atomically adds delta to x and returns the new value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uint64<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>delta <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">AddUint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// And atomically performs a bitwise AND operation on x using the bitmask</span>
<span class="token comment">// provided as mask and returns the old value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uint64<span class="token punctuation">)</span> <span class="token function">And</span><span class="token punctuation">(</span>mask <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">AndUint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> mask<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Or atomically performs a bitwise OR operation on x using the bitmask</span>
<span class="token comment">// provided as mask and returns the old value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uint64<span class="token punctuation">)</span> <span class="token function">Or</span><span class="token punctuation">(</span>mask <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">OrUint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> mask<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="atomic-7"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// A Uintptr is an atomic uintptr. The zero value is zero.</span>
<span class="token keyword">type</span> Uintptr <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token boolean">_</span> noCopy
  v <span class="token builtin">uintptr</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Load atomically loads and returns the value stored in x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uintptr<span class="token punctuation">)</span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uintptr</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">LoadUintptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Store atomically stores val into x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uintptr<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>val <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">StoreUintptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Swap atomically stores new into x and returns the previous value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uintptr<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">SwapUintptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> <span class="token builtin">new</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// CompareAndSwap executes the compare-and-swap operation for x.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uintptr<span class="token punctuation">)</span> <span class="token function">CompareAndSwap</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>swapped <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">CompareAndSwapUintptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Add atomically adds delta to x and returns the new value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uintptr<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>delta <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">AddUintptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// And atomically performs a bitwise AND operation on x using the bitmask</span>
<span class="token comment">// provided as mask and returns the old value.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uintptr<span class="token punctuation">)</span> <span class="token function">And</span><span class="token punctuation">(</span>mask <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">AndUintptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> mask<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Or atomically performs a bitwise OR operation on x using the bitmask</span>
<span class="token comment">// provided as mask and returns the updated value after the OR operation.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uintptr<span class="token punctuation">)</span> <span class="token function">Or</span><span class="token punctuation">(</span>mask <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">OrUintptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> mask<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// noCopy may be added to structs which must not be copied</span>
<span class="token comment">// after the first use.</span>
<span class="token comment">//</span>
<span class="token comment">// See https://golang.org/issues/8005#issuecomment-190753527</span>
<span class="token comment">// for details.</span>
<span class="token comment">//</span>
<span class="token comment">// Note that it must not be embedded, due to the Lock and Unlock methods.</span>
<span class="token keyword">type</span> noCopy <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">// Lock is a no-op used by -copylocks checker from `go vet`.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>noCopy<span class="token punctuation">)</span> <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>noCopy<span class="token punctuation">)</span> <span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">// align64 may be added to structs that must be 64-bit aligned.</span>
<span class="token comment">// This struct is recognized by a special case in the compiler</span>
<span class="token comment">// and will not work if copied to any other package.</span>
<span class="token keyword">type</span> align64 <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>uber-go&#x2F;atomic</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 进阶</title>
    <url>/2021/11/18/Go/go%20%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h2 id="Go-运行时"><a href="#Go-运行时" class="headerlink" title="Go 运行时"></a>Go 运行时</h2><br/>

<h2 id="调度器"><a href="#调度器" class="headerlink" title="调度器"></a>调度器</h2><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p>一个 “用户态线程” 必须要绑定一个 “内核态线程”，但是 CPU 并不知道有 “用户态线程” 的存在，它只知道它运行的是一个 “内核态线程” (Linux 的 PCB 进程控制块)。内核线程依然叫 “线程(thread)”，用户线程叫 “协程(co-routine)”。</p>
<p>协程在用户态线程即完成切换，不会陷入到内核态，这种切换非常的轻量快速。</p>
<table>
<thead>
<tr>
<th>线程</th>
<th>协程</th>
<th>Goroutine</th>
<th>Coroutine</th>
</tr>
</thead>
<tbody><tr>
<td>通常语义中的线程，指的是内核级线程</td>
<td>又称为用户级线程</td>
<td>Go 优化后的特殊 “协程”</td>
<td>更像是一种可挂起的函数</td>
</tr>
<tr>
<td>1）是操作系统最小调度单元；<br>创建、销毁、（抢占式）调度交由内核完成，CPU 需完成用户态与内核态间的切换；<br/>可充分利用多核，实现并行</td>
<td>与线程存在映射关系，为 M：1；<br/>创建、销毁、调度在用户态完成，更轻量；<br/>从属同一个内核级线程，无法并行；<br/>一个协程阻塞会导致从属同一线程的所有协程无法执行。</td>
<td>与线程的映射关系，为 M：N;<br/>可利用多个线程，实现并行<br/>通过 GMP 模型，实现和线程间的动态绑定和灵活调度（协作式）；<br/>栈空间大小可动态扩缩，默认初始化 2KB。</td>
<td>无内置调度器，需要开发者自行实现<BR/>协作式调度，需要显式挂起（co_await&#x2F;co_yield）<br/>通常使用堆分配或自定义分配器<br/>无自动栈增长机制</td>
</tr>
<tr>
<td>当 threads 切换时，需要保存各种寄存器:<br/>16 general purpose registers<br/> PC (Program Counter)<br/> SP (Stack Pointer)<br/> segment registers<br/> 16 XMM registers<br/> FP coprocessor state<br/> 16 AVX registers<br/>all MSRs etc.</td>
<td></td>
<td>设计用于大规模并发（轻松创建数千个）<br/>与 channel 深度集成<br/>内置并发安全机制</td>
<td>更偏向于异步编程模式<br/>需要额外库支持消息传递<br/>无内置并发安全保证</td>
</tr>
<tr>
<td></td>
<td></td>
<td>goroutines 切换只需保存三个寄存器：<br/>Program Counter<br/>Stack Pointer <br/>BP</td>
<td></td>
</tr>
</tbody></table>
<h4 id="goroutine-泄露"><a href="#goroutine-泄露" class="headerlink" title="goroutine 泄露"></a>goroutine 泄露</h4><p>会导致内存使用量持续增长，最终可能引发程序崩溃。</p>
<h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>1、是否有因为读写等待导致的未关闭的 channel，比如：</p>
<p>（1）读写 nil chan。</p>
<p>（2）向没有读的 chan 写数据。</p>
<p>（3）从没有写的 chan 读数据。</p>
<p>（4）代码逻辑导致的读写互相等待的 chan。</p>
<p>2、是否有 context 未取消，导致的 chan 阻塞。</p>
<p>3、未处理的 WaitGroup，没有调用 Wait。</p>
<p>4、死循环。</p>
<p>pprof 分析工具</p>
<p>访问 <code>http://localhost:6060/debug/pprof/goroutine?debug=2</code> 可以查看所有 goroutine 的堆栈信息。 <code>?debug=1</code> 查看详细列表， <code>?debug=2</code> 查看完整堆栈。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动一个 Web 界面，可视化 goroutine 的关系图</span>
go tool pprof <span class="token parameter variable">-http</span><span class="token operator">=</span>:8080 http://localhost:6060/debug/pprof/goroutine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>比较不同时间点的 profile：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取当前 goroutine 信息</span>
go tool pprof http://localhost:6060/debug/pprof/goroutine

<span class="token comment"># 对比两个时间点的 goroutine 数量</span>
go tool pprof <span class="token parameter variable">-base</span> http://localhost:6060/debug/pprof/goroutine http://localhost:6060/debug/pprof/goroutine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 pprof 输出中，关注以下模式：</p>
<p>1、阻塞的 goroutine：查找 chan receive、chan send、select 等操作。</p>
<p>2、无限循环：查找没有退出条件的 for 循环。</p>
<p>3、等待锁：查找 sync.Mutex.Lock 或 sync.RWMutex.RLock</p>
<p>4、 网络连接：查找 net.Read 或 net.Write 阻塞。</p>
<h5 id="预防措施"><a href="#预防措施" class="headerlink" title="预防措施"></a>预防措施</h5><p>1、封装 <code>go</code> func:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">HereWeGo</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
                log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"recovered panic: %v"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、使用 <code>Context</code>：为所有可能阻塞的操作提供取消机制。</p>
<p>3、监控 <code>goroutine</code> 数量：定期检查 <code>runtime.NumGoroutine()</code>。</p>
<p>4、限制并发：使用 <code>协程池</code> 或 <code>semaphore</code> 控制最大 <code>goroutine</code> 数量。</p>
<br/>

<h4 id="goroutine-生命周期管理"><a href="#goroutine-生命周期管理" class="headerlink" title="goroutine 生命周期管理"></a>goroutine 生命周期管理</h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>sync.WaitGroup</td>
<td><code>wg.Add(1)</code>：增加计数器，表示启动一个 goroutine。<br><code>wg.Done()</code>：减少计数器，表示一个 goroutine 完成任务。<br/><code>wg.Wait()</code>：阻塞主 goroutine，直到计数器归零。</td>
</tr>
<tr>
<td>Context</td>
<td><code>context.WithCancel</code>：创建一个可取消的 context。<br><code>ctx.Done()</code>：返回一个 channel，当 context 被取消时会关闭该 channel。<br><code>cancel()</code>：发送取消信号，通知所有监听该 context 的 goroutine 退出。</td>
</tr>
<tr>
<td>Channel</td>
<td>channel 可以用于控制 goroutine 的退出。</td>
</tr>
</tbody></table>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">worker</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">// 收到取消信号</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Worker %d canceled: %v\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Worker %d is working\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>
            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">worker2</span><span class="token punctuation">(</span>stopChan <span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>stopChan<span class="token punctuation">:</span> <span class="token comment">// 收到退出信号</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Worker exiting"</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Worker is working"</span><span class="token punctuation">)</span>
            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    stopChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>

    <span class="token keyword">go</span> <span class="token function">worker2</span><span class="token punctuation">(</span>stopChan<span class="token punctuation">)</span>

    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    stopChan <span class="token operator">&lt;-</span> <span class="token boolean">true</span> <span class="token comment">// 发送退出信号</span>

    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span> <span class="token comment">// 给 goroutine 一些时间退出</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Main goroutine done"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br/>

<h3 id="G-M-P-模型"><a href="#G-M-P-模型" class="headerlink" title="G-M-P 模型"></a>G-M-P 模型</h3><h4 id="Go-前期-G-M-模型"><a href="#Go-前期-G-M-模型" class="headerlink" title="Go 前期 G-M 模型"></a>Go 前期 G-M 模型</h4><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/GO/base/GM-model.png">

<p>M 想要执行、放回 G 都必须访问全局 G 队列，并且 M 有多个，即多线程访问同一资源需要加锁进行保证互斥&#x2F;同步，所以全局 G 队列是有互斥锁进行保护的。</p>
<p>调度器有以下缺点：</p>
<ul>
<li>创建、销毁、调度 G 都需要每个 M 获取锁（单一的全局 mutex（Sched.Lock）），这就形成了激烈的锁竞争。</li>
<li>M 转移 G 会造成延迟和额外的系统负载。比如当 G 中包含创建新协程的时候，M 创建了 G’，为了继续执行 G，需要把 G’ 交给 M’ 执行，也造成了很差的局部性，因为 G’ 和 G 是相关的，最好放在 M 上执行，而不是其他 M’。</li>
<li>存在 syscalls 系统调用情况下，CPU 在 M 之间的切换导致频繁的线程阻塞&#x2F;取消阻塞，增加了系统开销。</li>
</ul>
<br/>

<h4 id="G-M-P-模型-1"><a href="#G-M-P-模型-1" class="headerlink" title="G-M-P 模型"></a>G-M-P 模型</h4><p>基于 M(thread) 和 G(goroutine)之间引入新组件：P(Processor)。</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/GO/Concurrency/GoConcurrencyGMP.png">

<h5 id="go-func-函数调用流程"><a href="#go-func-函数调用流程" class="headerlink" title="go func 函数调用流程"></a>go func 函数调用流程</h5><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/GO/base/go-func-call.png">

<p><strong>初始化阶段：</strong></p>
<p>Go 运行时创建一定数量的 M 和 P，P 由 GOMAXPROCS 决定。创建出全局 Goroutine 队列，用于存放创建的 goroutine;</p>
<p><strong>调度阶段：</strong> </p>
<p>（1）创建 goroutine：go func 关键字创建出新的 goroutine，这个 goroutine 会被放入当前 P 的本地队列中，如果队列已经满了，就会放入到全局队列。</p>
<p>（2）M 执行 goroutine：每个 M 会绑定一个 P，M 会从 P 的本地队列中获取一个 goroutine 执行，如果 P 本地队列为空，M 会尝试去全局队列获取 goroutine。如果全局队列也为空，则进行工作窃取，去其他 P 的本地队列去偷取 1&#x2F;2 的 goroutine 绑定到自己的本地队列中。</p>
<p>（3）goroutine 阻塞：当一个 goroutine 发生阻塞时（如 I&#x2F;O READ&#x2F;WRITE），M 会把 goroutine 暂定放入等待队列，同时去找可运行的 goroutine 执行，如果没有可运行的 goroutine，M 会进入休眠状态。</p>
<p>（4）goroutine 恢复：当一个 阻塞的 goroutine 准备好继续执行时，会被放入某个 P 的本地队列，或者全局队列，等待调度。</p>
<p> <strong>特殊情况处理:</strong> </p>
<p>（1）系统调用：当一个 goroutine 进行系统调用时，M 会与 P 解绑，让 P 可以继续调度其他 M 执行其他 goroutine。如果系统调用是阻塞的，M 会阻塞在系统调用上；如果系统调用是非阻塞的，M 可以在系统调用完成后重新绑定 P 继续执行。</p>
<p>（2）goroutine 销毁：当一个 Goroutine 执行完毕后，它会被销毁，释放其占用的资源。</p>
<p><strong>工作窃取算法：</strong></p>
<p>使得各个 CPU 核心的负载更加均衡，避免了某些核心闲置而其他核心过载的情况，进一步提高了多核 CPU 的利用率。</p>
<h5 id="追踪-goroutine-调用"><a href="#追踪-goroutine-调用" class="headerlink" title="追踪 goroutine 调用"></a>追踪 goroutine 调用</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"os"</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"runtime/trace"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//创建trace文件</span>
    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"trace.out"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">//启动trace goroutine</span>
    err <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">defer</span> trace<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">//main</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>参考文档：</p>
<p><a href="https://www.cnblogs.com/jiujuan/p/13922551.html">https://www.cnblogs.com/jiujuan/p/13922551.html</a></p>
<p><a href="https://www.cnblogs.com/jiujuan/p/13869547.html">https://www.cnblogs.com/jiujuan/p/13869547.html</a></p>
<p>Go 语言的内存分配器借鉴了 <code>TCMalloc</code> 的设计实现高速的内存分配，它的核心理念是使用多级缓存将对象根据大小分类，并按照类别实施不同的分配策略。Go 运行时根据对象的大小将对象分成微对象、小对象和大对象3种:</p>
<table>
<thead>
<tr>
<th><strong>对象类别</strong></th>
<th><strong>分配方式</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Tiny (0, 16B)</td>
<td>Are allocated using the <code>mcache</code>’s tiny allocator. <br/>This is efficient and multiple tiny allocations are done on a <br/>single 16-byte block.</td>
</tr>
<tr>
<td>Small [16B, 32KB]</td>
<td>Are allocated on the corresponding size class(<code>mspan</code>) on <code>mcache</code> of <br/>the <code>P</code> where the <code>G</code> is running.</td>
</tr>
<tr>
<td>Large (32KB, +∞)</td>
<td>Are allocated directly on the corresponding size class of <code>mheap</code>. <br/>If the <code>mheap</code> is empty or has no page runs large enough <br/>then it allocates a new group of pages (at least 1MB) from the OS.</td>
</tr>
</tbody></table>
<br/>

<h3 id="内存管理组件"><a href="#内存管理组件" class="headerlink" title="内存管理组件"></a>内存管理组件</h3><p>分配器（Allocator）主要包含:内存管理单元（runtime.mspan）、线程缓存（runtime.mcache）、中心缓存（runtime.mcentral）和页堆 （runtime.mheap）。</p>
<table>
<thead>
<tr>
<th>对象</th>
<th>结构类型</th>
<th>角色</th>
</tr>
</thead>
<tbody><tr>
<td><strong>class</strong></td>
<td>每个 class 代表一个固定大小的对象<br/>用 span 表示</td>
<td></td>
</tr>
<tr>
<td><strong>mspan</strong></td>
<td>双链表，存储管理（一或多）页的地址<br/>虚拟地址页维度</td>
<td>管理特定的 class 对象，根据对象大小，<br/>将一个或者多个页拆分成多个块进行管理。</td>
</tr>
<tr>
<td><strong>mcache</strong></td>
<td>mspan 数组列表，<br/>线程内维度</td>
<td>动态的从 mcentral 中获取，缓存下来供各个线程（Go 中指的是 G-M-P 模型中的 Processor）使用，<br/>对于单个线程而言，为了避免直接向 mheap 频繁申请内存导致频繁加锁带来的低效。<br/>是 Go 为每个线程分配的 span 的缓存。</td>
</tr>
<tr>
<td><strong>mcentral</strong></td>
<td>空闲的 span 列表 + 非空闲的 span 列表，<br/>多线程间的维度，带锁</td>
<td>多线程之间的 mspan 缓存池。负责线程之间的 内存发放和回收。</td>
</tr>
<tr>
<td><strong>mheap</strong></td>
<td>[] *mspan 全集 + []mcentral 全集 + 堆区域的起始结束位置 <br/>运行时全局维度，带锁</td>
<td></td>
</tr>
</tbody></table>
<p>以申请 <code>size = n</code>的内存为例：</p>
<p>1、获取当前线程的私有内存 <code>mcache</code>.</p>
<p>2、size &#x3D;&gt; 合适的 <code>class ID</code>。</p>
<p>3、从 <code>mcache.alloc[classID]</code> 的链表中查询出可用的 <code>mspan</code>。</p>
<p>4、if <code>mcache</code> 没有可用的 <code>mspan</code>，从 <code>mcentral</code> 申请一个新的 <code>mspan</code> -&gt; <code>mcache</code>。</p>
<p>5、if <code>mcentral</code> 也没有可用的 <code>mspan</code>，从 <code>mheap</code> 中申请一个新的 <code>mspan</code> -&gt; <code>mcentral</code>。</p>
<p>6、从该 <code>mspan</code> 获取空闲对象地址并返回。</p>
<p>内存布局示意如下：</p>
<img src="">



<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><div class="tabs" id="memory-management-data-structure"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#memory-management-data-structure-1">mspan</button></li><li class="tab"><button type="button" data-href="#memory-management-data-structure-2">mcache</button></li><li class="tab"><button type="button" data-href="#memory-management-data-structure-3">mcentral</button></li><li class="tab"><button type="button" data-href="#memory-management-data-structure-4">mheap</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="memory-management-data-structure-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> mspan <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  next <span class="token operator">*</span>mspan     <span class="token comment">// 前驱指针</span>
  prev <span class="token operator">*</span>mspan     <span class="token comment">// 后驱指针</span>
  list <span class="token operator">*</span>mSpanList <span class="token comment">// For debugging. TODO: Remove.</span>

  startAddr <span class="token builtin">uintptr</span> <span class="token comment">// 所管理页的起始地址</span>
  npages    <span class="token builtin">uintptr</span> <span class="token comment">// 所管理的页数</span>
  <span class="token comment">// ...</span>
  nelems <span class="token builtin">uintptr</span> <span class="token comment">// 有多少个块可供分配</span>
  <span class="token comment">// ...</span>
  allocBits  <span class="token operator">*</span>gcBits <span class="token comment">// 分配位图，每一位代表一个块是否已经分配</span>
  gcmarkBits <span class="token operator">*</span>gcBits <span class="token comment">// 标记内存块被引用的情况，用于 GC</span>
  pinnerBits <span class="token operator">*</span>gcBits <span class="token comment">// bitmap for pinned objects; accessed atomically</span>
  spanclass  spanClass     <span class="token comment">// class 表中的 classID</span>
  elemsize   <span class="token builtin">uintptr</span>       <span class="token comment">// class 表中的对象大小，块大小</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="memory-management-data-structure-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// mcaches are allocated from non-GC'd memory, so any heap pointers</span>
<span class="token comment">// must be specially handled.</span>
<span class="token keyword">type</span> mcache <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token boolean">_</span> sys<span class="token punctuation">.</span>NotInHeap

  <span class="token comment">// The following members are accessed on every malloc,</span>
  <span class="token comment">// so they are grouped here for better caching.</span>
  nextSample <span class="token builtin">uintptr</span> <span class="token comment">// trigger heap sample after allocating this many bytes</span>
  scanAlloc  <span class="token builtin">uintptr</span> <span class="token comment">// bytes of scannable heap allocated</span>

  <span class="token comment">// Allocator cache for tiny objects w/o pointers.</span>
  <span class="token comment">// See "Tiny allocator" comment in malloc.go.</span>

  <span class="token comment">// tiny points to the beginning of the current tiny block, or</span>
  <span class="token comment">// nil if there is no current tiny block.</span>
  <span class="token comment">//</span>
  <span class="token comment">// tiny is a heap pointer. Since mcache is in non-GC'd memory,</span>
  <span class="token comment">// we handle it by clearing it in releaseAll during mark</span>
  <span class="token comment">// termination.</span>
  <span class="token comment">//</span>
  <span class="token comment">// tinyAllocs is the number of tiny allocations performed</span>
  <span class="token comment">// by the P that owns this mcache.</span>
  tiny       <span class="token builtin">uintptr</span>
  tinyoffset <span class="token builtin">uintptr</span>
  tinyAllocs <span class="token builtin">uintptr</span>

  <span class="token comment">// The rest is not accessed on every malloc.</span>

  alloc <span class="token punctuation">[</span>numSpanClasses<span class="token punctuation">]</span><span class="token operator">*</span>mspan <span class="token comment">// 按照 class 分组的 mspan 列表</span>

  stackcache <span class="token punctuation">[</span>_NumStackOrders<span class="token punctuation">]</span>stackfreelist

  <span class="token comment">// flushGen indicates the sweepgen during which this mcache</span>
  <span class="token comment">// was last flushed. If flushGen != mheap_.sweepgen, the spans</span>
  <span class="token comment">// in this mcache are stale and need to the flushed so they</span>
  <span class="token comment">// can be swept. This is done in acquirep.</span>
  flushGen atomic<span class="token punctuation">.</span>Uint32
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="memory-management-data-structure-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Central list of free objects of a given size.</span>
<span class="token keyword">type</span> mcentral <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token boolean">_</span>         sys<span class="token punctuation">.</span>NotInHeap
  spanclass spanClass

  <span class="token comment">// partial and full contain two mspan sets: one of swept in-use</span>
  <span class="token comment">// spans, and one of unswept in-use spans. These two trade</span>
  <span class="token comment">// roles on each GC cycle. The unswept set is drained either by</span>
  <span class="token comment">// allocation or by the background sweeper in every GC cycle,</span>
  <span class="token comment">// so only two roles are necessary.</span>
  <span class="token comment">//</span>
  <span class="token comment">// sweepgen is increased by 2 on each GC cycle, so the swept</span>
  <span class="token comment">// spans are in partial[sweepgen/2%2] and the unswept spans are in</span>
  <span class="token comment">// partial[1-sweepgen/2%2]. Sweeping pops spans from the</span>
  <span class="token comment">// unswept set and pushes spans that are still in-use on the</span>
  <span class="token comment">// swept set. Likewise, allocating an in-use span pushes it</span>
  <span class="token comment">// on the swept set.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Some parts of the sweeper can sweep arbitrary spans, and hence</span>
  <span class="token comment">// can't remove them from the unswept set, but will add the span</span>
  <span class="token comment">// to the appropriate swept list. As a result, the parts of the</span>
  <span class="token comment">// sweeper and mcentral that do consume from the unswept list may</span>
  <span class="token comment">// encounter swept spans, and these should be ignored.</span>
  partial <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>spanSet <span class="token comment">// list of spans with a free object</span>
  full    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>spanSet <span class="token comment">// list of spans with no free objects</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="memory-management-data-structure-4"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> mheap <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token boolean">_</span> sys<span class="token punctuation">.</span>NotInHeap

  <span class="token comment">// lock must only be acquired on the system stack, otherwise a g</span>
  <span class="token comment">// could self-deadlock if its stack grows with the lock held.</span>
  lock mutex

  pages pageAlloc <span class="token comment">// page allocation data structure</span>

  sweepgen <span class="token builtin">uint32</span> <span class="token comment">// sweep generation, see comment in mspan; written during STW</span>

  <span class="token comment">// allspans is a slice of all mspans ever created. Each mspan</span>
  <span class="token comment">// appears exactly once.</span>
  <span class="token comment">//</span>
  <span class="token comment">// The memory for allspans is manually managed and can be</span>
  <span class="token comment">// reallocated and move as the heap grows.</span>
  <span class="token comment">//</span>
  <span class="token comment">// In general, allspans is protected by mheap_.lock, which</span>
  <span class="token comment">// prevents concurrent access as well as freeing the backing</span>
  <span class="token comment">// store. Accesses during STW might not hold the lock, but</span>
  <span class="token comment">// must ensure that allocation cannot happen around the</span>
  <span class="token comment">// access (since that may free the backing store).</span>
  allspans <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>mspan <span class="token comment">// all spans out there</span>

  <span class="token comment">// Proportional sweep</span>
  <span class="token comment">//</span>
  <span class="token comment">// These parameters represent a linear function from gcController.heapLive</span>
  <span class="token comment">// to page sweep count. The proportional sweep system works to</span>
  <span class="token comment">// stay in the black by keeping the current page sweep count</span>
  <span class="token comment">// above this line at the current gcController.heapLive.</span>
  <span class="token comment">//</span>
  <span class="token comment">// The line has slope sweepPagesPerByte and passes through a</span>
  <span class="token comment">// basis point at (sweepHeapLiveBasis, pagesSweptBasis). At</span>
  <span class="token comment">// any given time, the system is at (gcController.heapLive,</span>
  <span class="token comment">// pagesSwept) in this space.</span>
  <span class="token comment">//</span>
  <span class="token comment">// It is important that the line pass through a point we</span>
  <span class="token comment">// control rather than simply starting at a 0,0 origin</span>
  <span class="token comment">// because that lets us adjust sweep pacing at any time while</span>
  <span class="token comment">// accounting for current progress. If we could only adjust</span>
  <span class="token comment">// the slope, it would create a discontinuity in debt if any</span>
  <span class="token comment">// progress has already been made.</span>
  pagesInUse         atomic<span class="token punctuation">.</span>Uintptr <span class="token comment">// pages of spans in stats mSpanInUse</span>
  pagesSwept         atomic<span class="token punctuation">.</span>Uint64  <span class="token comment">// pages swept this cycle</span>
  pagesSweptBasis    atomic<span class="token punctuation">.</span>Uint64  <span class="token comment">// pagesSwept to use as the origin of the sweep ratio</span>
  sweepHeapLiveBasis <span class="token builtin">uint64</span>         <span class="token comment">// value of gcController.heapLive to use as the origin of sweep ratio; written with lock, read without</span>
  sweepPagesPerByte  <span class="token builtin">float64</span>        <span class="token comment">// proportional sweep ratio; written with lock, read without</span>

  <span class="token comment">// Page reclaimer state</span>

  <span class="token comment">// reclaimIndex is the page index in allArenas of next page to</span>
  <span class="token comment">// reclaim. Specifically, it refers to page (i %</span>
  <span class="token comment">// pagesPerArena) of arena allArenas[i / pagesPerArena].</span>
  <span class="token comment">//</span>
  <span class="token comment">// If this is >= 1&lt;&lt;63, the page reclaimer is done scanning</span>
  <span class="token comment">// the page marks.</span>
  reclaimIndex atomic<span class="token punctuation">.</span>Uint64

  <span class="token comment">// reclaimCredit is spare credit for extra pages swept. Since</span>
  <span class="token comment">// the page reclaimer works in large chunks, it may reclaim</span>
  <span class="token comment">// more than requested. Any spare pages released go to this</span>
  <span class="token comment">// credit pool.</span>
  reclaimCredit atomic<span class="token punctuation">.</span>Uintptr

  <span class="token boolean">_</span> cpu<span class="token punctuation">.</span>CacheLinePad <span class="token comment">// prevents false-sharing between arenas and preceding variables</span>

  <span class="token comment">// arenas is the heap arena map. It points to the metadata for</span>
  <span class="token comment">// the heap for every arena frame of the entire usable virtual</span>
  <span class="token comment">// address space.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Use arenaIndex to compute indexes into this array.</span>
  <span class="token comment">//</span>
  <span class="token comment">// For regions of the address space that are not backed by the</span>
  <span class="token comment">// Go heap, the arena map contains nil.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Modifications are protected by mheap_.lock. Reads can be</span>
  <span class="token comment">// performed without locking; however, a given entry can</span>
  <span class="token comment">// transition from nil to non-nil at any time when the lock</span>
  <span class="token comment">// isn't held. (Entries never transitions back to nil.)</span>
  <span class="token comment">//</span>
  <span class="token comment">// In general, this is a two-level mapping consisting of an L1</span>
  <span class="token comment">// map and possibly many L2 maps. This saves space when there</span>
  <span class="token comment">// are a huge number of arena frames. However, on many</span>
  <span class="token comment">// platforms (even 64-bit), arenaL1Bits is 0, making this</span>
  <span class="token comment">// effectively a single-level map. In this case, arenas[0]</span>
  <span class="token comment">// will never be nil.</span>
  arenas <span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> arenaL1Bits<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> arenaL2Bits<span class="token punctuation">]</span><span class="token operator">*</span>heapArena

  <span class="token comment">// arenasHugePages indicates whether arenas' L2 entries are eligible</span>
  <span class="token comment">// to be backed by huge pages.</span>
  arenasHugePages <span class="token builtin">bool</span>

  <span class="token comment">// heapArenaAlloc is pre-reserved space for allocating heapArena</span>
  <span class="token comment">// objects. This is only used on 32-bit, where we pre-reserve</span>
  <span class="token comment">// this space to avoid interleaving it with the heap itself.</span>
  heapArenaAlloc linearAlloc

  <span class="token comment">// arenaHints is a list of addresses at which to attempt to</span>
  <span class="token comment">// add more heap arenas. This is initially populated with a</span>
  <span class="token comment">// set of general hint addresses, and grown with the bounds of</span>
  <span class="token comment">// actual heap arena ranges.</span>
  arenaHints <span class="token operator">*</span>arenaHint

  <span class="token comment">// arena is a pre-reserved space for allocating heap arenas</span>
  <span class="token comment">// (the actual arenas). This is only used on 32-bit.</span>
  arena linearAlloc

  <span class="token comment">// allArenas is the arenaIndex of every mapped arena. This can</span>
  <span class="token comment">// be used to iterate through the address space.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Access is protected by mheap_.lock. However, since this is</span>
  <span class="token comment">// append-only and old backing arrays are never freed, it is</span>
  <span class="token comment">// safe to acquire mheap_.lock, copy the slice header, and</span>
  <span class="token comment">// then release mheap_.lock.</span>
  allArenas <span class="token punctuation">[</span><span class="token punctuation">]</span>arenaIdx

  <span class="token comment">// sweepArenas is a snapshot of allArenas taken at the</span>
  <span class="token comment">// beginning of the sweep cycle. This can be read safely by</span>
  <span class="token comment">// simply blocking GC (by disabling preemption).</span>
  sweepArenas <span class="token punctuation">[</span><span class="token punctuation">]</span>arenaIdx

  <span class="token comment">// markArenas is a snapshot of allArenas taken at the beginning</span>
  <span class="token comment">// of the mark cycle. Because allArenas is append-only, neither</span>
  <span class="token comment">// this slice nor its contents will change during the mark, so</span>
  <span class="token comment">// it can be read safely.</span>
  markArenas <span class="token punctuation">[</span><span class="token punctuation">]</span>arenaIdx

  <span class="token comment">// curArena is the arena that the heap is currently growing</span>
  <span class="token comment">// into. This should always be physPageSize-aligned.</span>
  curArena <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    base<span class="token punctuation">,</span> end <span class="token builtin">uintptr</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// central free lists for small size classes.</span>
  <span class="token comment">// the padding makes sure that the mcentrals are</span>
  <span class="token comment">// spaced CacheLinePadSize bytes apart, so that each mcentral.lock</span>
  <span class="token comment">// gets its own cache line.</span>
  <span class="token comment">// central is indexed by spanClass.</span>
  central <span class="token punctuation">[</span>numSpanClasses<span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    mcentral mcentral
    pad      <span class="token punctuation">[</span><span class="token punctuation">(</span>cpu<span class="token punctuation">.</span>CacheLinePadSize <span class="token operator">-</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>mcentral<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">%</span>cpu<span class="token punctuation">.</span>CacheLinePadSize<span class="token punctuation">)</span> <span class="token operator">%</span> cpu<span class="token punctuation">.</span>CacheLinePadSize<span class="token punctuation">]</span><span class="token builtin">byte</span>
  <span class="token punctuation">&#125;</span>

  spanalloc              fixalloc <span class="token comment">// allocator for span*</span>
  cachealloc             fixalloc <span class="token comment">// allocator for mcache*</span>
  specialfinalizeralloc  fixalloc <span class="token comment">// allocator for specialfinalizer*</span>
  specialprofilealloc    fixalloc <span class="token comment">// allocator for specialprofile*</span>
  specialReachableAlloc  fixalloc <span class="token comment">// allocator for specialReachable</span>
  specialPinCounterAlloc fixalloc <span class="token comment">// allocator for specialPinCounter</span>
  specialWeakHandleAlloc fixalloc <span class="token comment">// allocator for specialWeakHandle</span>
  speciallock            mutex    <span class="token comment">// lock for special record allocators.</span>
  arenaHintAlloc         fixalloc <span class="token comment">// allocator for arenaHints</span>

  <span class="token comment">// User arena state.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Protected by mheap_.lock.</span>
  userArena <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// arenaHints is a list of addresses at which to attempt to</span>
    <span class="token comment">// add more heap arenas for user arena chunks. This is initially</span>
    <span class="token comment">// populated with a set of general hint addresses, and grown with</span>
    <span class="token comment">// the bounds of actual heap arena ranges.</span>
    arenaHints <span class="token operator">*</span>arenaHint

    <span class="token comment">// quarantineList is a list of user arena spans that have been set to fault, but</span>
    <span class="token comment">// are waiting for all pointers into them to go away. Sweeping handles</span>
    <span class="token comment">// identifying when this is true, and moves the span to the ready list.</span>
    quarantineList mSpanList

    <span class="token comment">// readyList is a list of empty user arena spans that are ready for reuse.</span>
    readyList mSpanList
  <span class="token punctuation">&#125;</span>

  unused <span class="token operator">*</span>specialfinalizer <span class="token comment">// never set, just here to force the specialfinalizer type into DWARF</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h3 id="栈内存管理"><a href="#栈内存管理" class="headerlink" title="栈内存管理"></a>栈内存管理</h3><p>栈内存是每个 goroutine 独有的内存空间。每个 Goroutine 的栈初始大小一般非常小，通常是 2KB 或 4KB，Go 中已经通过栈复制实现了动态扩缩栈内存的能力，最大限制在几 GB 以内。</p>
<p>栈内存的管理由编译器和运行时负责，而不是垃圾回收器。垃圾回收器主要管理的是堆内存中的对象。当函数调用时，相关变量会被压入栈中，函数返回时，这些变量会被弹出栈并回收。栈上对象的生命周期由函数调用的开始和结束决定，当函数返回时，栈上的局部变量会被自动销毁。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> g <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  stack       stack   <span class="token comment">// goroutine 使用的栈</span>
    <span class="token comment">// 下面两个成员用于栈溢出检查，实现栈的自动伸缩，抢占调度也会用到 stackguard0</span>
  stackguard0 <span class="token builtin">uintptr</span> 
  stackguard1 <span class="token builtin">uintptr</span>
    <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>



<h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><h4 id="诞生背景"><a href="#诞生背景" class="headerlink" title="诞生背景"></a>诞生背景</h4><p>Go is a value-oriented language in the tradition of C-like systems languages rather than reference-oriented language in the tradition of most managed runtime languages.</p>
<p>Value-orientation also helps with the foreign function interfaces. We have a fast FFI with C and C++. Obviously Google has a tremendous number of facilities available but they are written in C++. Go couldn’t wait to reimplement all of these things in Go so Go had to have access to these systems through the foreign function interface.</p>
<p>This one design decision has led to some of the more amazing things that have to go on with the runtime. It is probably the most important thing that differentiates Go from other GCed languages（Go can have pointers and in fact they can have interior pointers. Such pointers keep the entire value live and they are fairly common）.</p>
<p>2014， We（Google Golang Team） had to convert all of the runtime and compiler to Go. They were written in C at the time.</p>
<p>Inorder to Read Barrier free concurrency GC (no coping)， to do a tri-color concurrent algorithm.</p>
<br/>

<h4 id="工作原理概述"><a href="#工作原理概述" class="headerlink" title="工作原理概述"></a>工作原理概述</h4><div class="tabs" id="gc-工作原理"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#gc-工作原理-1">GC 工作流程</button></li><li class="tab"><button type="button" data-href="#gc-工作原理-2">三色标记法原理</button></li><li class="tab"><button type="button" data-href="#gc-工作原理-3">STW(Stop-The-World)机制</button></li><li class="tab"><button type="button" data-href="#gc-工作原理-4">混合写屏障(Write Barrier)原理</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="gc-工作原理-1"><p>1、标记阶段(Mark)：找出所有存活对象。</p>
<p>2、标记终止(Mark Termination)：短暂 STW。</p>
<p>3、清扫阶段(Sweep)：回收不可达对象内存。</p>
<p>4、空闲阶段(Idle)：等待下次 GC 触发。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gc-工作原理-2"><p>三色标记法是一种抽象模型，将对象分为三类：</p>
<p><strong>白色对象</strong>：未被 GC 访问过的对象(可能垃圾)</p>
<p><strong>灰色对象</strong>：已被 GC 访问但引用的对象还未检查</p>
<p><strong>黑色对象</strong>：已被 GC 访问且所有引用都已检查</p>
<p><strong>标记过程</strong></p>
<p>1、初始时所有对象为白色。</p>
<p>2、从根对象(栈、全局变量等)出发，将直接引用的对象标记为灰色。</p>
<p>3、从灰色对象集合中取出一个对象：</p>
<ul>
<li>将其标记为黑色</li>
<li>将其引用的白色对象标记为灰色</li>
</ul>
<p>4、重复步骤3直到没有灰色对象。</p>
<p>5、剩余的白色对象即为可回收的垃圾。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gc-工作原理-3"><p>STW 是 GC 过程中暂停所有应用线程的阶段，用于保证对象引用关系的一致性。</p>
<p><strong>Go 中 STW 的两个主要阶段</strong></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>标记开始时的初始 STW</strong></td>
<td>- 扫描栈、全局变量等根对象<br>- 开启写屏障<br>- 通常非常短暂(1ms 以内)</td>
</tr>
<tr>
<td><strong>标记结束时的 STW</strong></td>
<td>- 关闭写屏障<br/>- 重新扫描可能修改的栈<br/>- 完成最终标记</td>
</tr>
</tbody></table>
<p>Go 1.14 后，通过改进的调度器进一步减少了 STW 时间。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gc-工作原理-4"><p>Go 混合写屏障（Hybrid Write Barrier）是 GC 并发执行的关键技术，用于在用户程序运行时维护对象图的正确性。它将 Dijkstra 插入写屏障和 Yuasa 删除写屏障的优点结合起来，大幅减少了 STW（Stop-The-World）的时间（从毫秒级降至亚毫秒级）。</p>
<p><strong>核心思想</strong></p>
<p>混合写屏障结合了两种经典写屏障的优点：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Dijkstra 插入写屏障</strong><br/>确保新引用的对象被标记（防止漏标）</td>
<td>写操作：<code>*slot = ptr</code> → 先标记 <code>ptr</code> 为灰色 <br>优点：不需要追溯旧引用 <br/>缺点：保守，可能保留一些本应回收的对象</td>
</tr>
<tr>
<td><strong>Yuasa 删除写屏障</strong><br/>确保被删除引用的对象被标记（防止悬挂指针）</td>
<td>写操作：<code>*slot = ptr</code> → 先标记 <code>*slot</code> 为灰色 <br/>优点：可以回收更多垃圾 <br/>缺点：需要扫描栈的旧引用</td>
</tr>
</tbody></table>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">writePointer</span><span class="token punctuation">(</span>slot<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token function">shade</span><span class="token punctuation">(</span><span class="token operator">*</span>slot<span class="token punctuation">)</span>    <span class="token comment">// 标记旧值（Yuasa 删除屏障部分）</span>
    <span class="token function">shade</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span>      <span class="token comment">// 标记新值（Dijkstra 插入屏障部分）</span>
    <span class="token operator">*</span>slot <span class="token operator">=</span> ptr     <span class="token comment">// 实际写入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>工作示例</strong></p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">初始状态：
A -&gt; B (A 引用 B)
A -&gt; C (现在要将 A 的引用从 B 改为 C)

处理过程：
标记旧值 B（shade(B)）
标记新值 C（shade(C)）
执行实际写入 A-&gt;C

这样确保：
如果 B 不再被其他对象引用，它会被正确回收
新引用的 C 会被正确标记，不会被错误回收<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>读写屏障的作用</strong></p>
<p>1、防止黑色对象错误引用白色对象</p>
<p>2、允许 GC 与用户程序并发执行</p>
<p>3、减少 STW 时间</p>
<p><strong>混合写屏障与 GC 阶段的配合</strong></p>
<p>1、标记阶段开始：</p>
<ul>
<li>短暂 STW：开启写屏障，扫描根对象</li>
<li>然后并发标记与应用程序并行运行</li>
</ul>
<p>2、标记阶段：</p>
<ul>
<li>所有指针写入都经过写屏障</li>
<li>写屏障确保不破坏三色不变式</li>
</ul>
<p>3、标记阶段结束：</p>
<ul>
<li>短暂 STW：关闭写屏障，完成最终标记</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h4 id="回收算法"><a href="#回收算法" class="headerlink" title="回收算法"></a>回收算法</h4><p>Go 采用了标记-清除算法：从根变量开始遍历所有引用的对象，引用的对象标记为 <code>被引用</code>，没有标记的对象被回收。</p>
<br/>

<h4 id="Go-垃圾收集器的实现"><a href="#Go-垃圾收集器的实现" class="headerlink" title="Go 垃圾收集器的实现"></a>Go 垃圾收集器的实现</h4><p><a href="https://go.dev/blog/ismmkeynote">https://go.dev/blog/ismmkeynote</a></p>
<p><a href="https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html">https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html</a></p>
<h4 id="写屏障（Write-Barrier）"><a href="#写屏障（Write-Barrier）" class="headerlink" title="写屏障（Write Barrier）"></a>写屏障（Write Barrier）</h4><p>Go 的垃圾回收器使用了写屏障。在 Go 的并发垃圾回收中，写屏障确保在程序修改对象引用时，不会影响垃圾回收的标记过程。Go 的写屏障有助于保证在并发执行的情况下，对象的可达性能够被正确更新，避免了在标记阶段出现对象丢失或错误回收的情况。</p>
<p>写屏障是一种在垃圾回收（Garbage Collection，GC）系统中使用的机制，特别是在并发和增量式垃圾回收中。它的主要目的是在程序运行时修改对象引用时，确保垃圾回收器能够正确地维护对象图的一致性和完整性。当程序执行对对象引用的修改操作（如赋值操作，将一个对象的引用赋给另一个对象）时，写屏障会介入，保证垃圾回收器能够发现新的引用关系，或者在并发或增量式垃圾回收过程中，防止对象在被修改时被误回收。</p>
<h5 id="写屏障的主要作用"><a href="#写屏障的主要作用" class="headerlink" title="写屏障的主要作用"></a>写屏障的主要作用</h5><ul>
<li><strong>维护对象图一致性</strong>：在并发垃圾回收的场景下，程序的执行和垃圾回收过程是同时进行的。当程序在修改对象的引用时，可能会导致对象的可达性发生变化。写屏障可以确保这种变化被垃圾回收器及时知晓，避免对象的错误回收或引用关系的遗漏。实现更复杂的垃圾回收算法，如并发标记-清除、并发复制等，提高垃圾回收的效率。</li>
<li><strong>防止浮动垃圾和对象丢失</strong>：在并发或增量式垃圾回收中，如果没有写屏障，可能会出现一些问题。例如，在标记阶段，可能会产生浮动垃圾（对象本应被回收，但由于并发修改，变成了可达对象），或者对象丢失（对象原本可达，但由于修改操作变成了不可达而被错误回收）。写屏障可以防止这些问题的发生。</li>
</ul>
<h5 id="写屏障可能带来的开销"><a href="#写屏障可能带来的开销" class="headerlink" title="写屏障可能带来的开销"></a>写屏障可能带来的开销</h5><ul>
<li><strong>额外的指令执行成本</strong>，对于如<code>*dst = src</code> 的赋值操作，需要先执行 <code>mark(src)</code> 操作（假设这是写屏障的一部分），原本只需要一条指令完成的赋值操作，现在可能需要多条指令，如先将 <code>src</code> 压入标记队列，更新标记信息等。</li>
<li><strong>增加内存访问</strong>，增加对内存的访问次数，在执行写屏障操作时，可能需要读取和写入额外的元数据信息，如标记信息、对象可达性信息等。这些额外的内存访问会增加内存系统的压力，内存访问速度通常比 CPU 处理速度慢，过多的内存访问会导致性能下降。</li>
<li><strong>降低 CPU 缓存命中率</strong>，写屏障会引入额外的内存访问，这些额外的访问可能导致 CPU 缓存未命中，当 CPU 缓存未命中时，需要从主存中读取数据，这比从缓存中读取数据要慢几个数量级。频繁的缓存未命中会严重影响性能。</li>
</ul>
<br/>

<h4 id="GC-Pacer"><a href="#GC-Pacer" class="headerlink" title="GC Pacer"></a>GC Pacer</h4><p>GC Pacer determines when to best start a GC cycle. If the system is in a steady state and not in a phase change, marking will end just about the time memory runs out.<br><a href="https://docs.google.com/document/d/1wmjrocXIWTr1JxU-3EQBI6BK6KgtiFArkG47XK73xIQ/edit?pli=1&tab=t.0">https://docs.google.com/document/d/1wmjrocXIWTr1JxU-3EQBI6BK6KgtiFArkG47XK73xIQ/edit?pli=1&amp;tab=t.0</a></p>
<p><a href="https://go.googlesource.com/proposal/+/master/design/44167-gc-pacer-redesign.md">https://go.googlesource.com/proposal/+/master/design/44167-gc-pacer-redesign.md</a></p>
<br/>

<h4 id="回收触发时机"><a href="#回收触发时机" class="headerlink" title="回收触发时机"></a>回收触发时机</h4><table>
<thead>
<tr>
<th>类型</th>
<th>触发事件</th>
<th>检验条件</th>
</tr>
</thead>
<tbody><tr>
<td><strong>gcTriggerHeap</strong></td>
<td>分配对象是触发，<br/><code>debug.SetGCPercent(100)</code></td>
<td>堆已分配内存达到阈值</td>
</tr>
<tr>
<td><strong>gcTriggerTime</strong></td>
<td>runtime&#x2F;proc.go 中，<br/><code>var forcegcperiod int64 = 2 * 60 * 1e9</code><br/>由 <code>forcegchelper</code> 守护协程定时触发。</td>
<td>每 2 分钟触发一次</td>
</tr>
<tr>
<td><strong>gcTriggerCycle</strong></td>
<td>当没有 GC 正在进行时，应用层代码调用的 GC 会进行<br/><code>runtime.GC()</code></td>
<td>上一轮 GC 已结束，此时调用 GC() 会触发</td>
</tr>
</tbody></table>
<br/>

<h4 id="内存逃逸"><a href="#内存逃逸" class="headerlink" title="内存逃逸"></a>内存逃逸</h4><p>在 Go 中：</p>
<ul>
<li><strong>栈分配</strong>：函数局部变量通常在栈上分配，函数返回时自动释放，效率高</li>
<li><strong>堆分配</strong>：当变量需要在函数返回后继续存在，或在多个 goroutine 间共享时，需要在堆上分配</li>
</ul>
<p>当编译器无法确定一个变量是否只在当前函数中使用时，就会发生”逃逸”，即变量从栈逃逸到堆上分配。（Go 语言的对象是否逃逸，取决于使用它的上下文和 Go 语言编译器的逃逸分析算法）</p>
<h5 id="常见逃逸场景"><a href="#常见逃逸场景" class="headerlink" title="常见逃逸场景"></a>常见逃逸场景</h5><div class="tabs" id="逃逸场景"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#逃逸场景-1">返回局部变量指针</button></li><li class="tab"><button type="button" data-href="#逃逸场景-2">被闭包引用</button></li><li class="tab"><button type="button" data-href="#逃逸场景-3">发送指针到 channel</button></li><li class="tab"><button type="button" data-href="#逃逸场景-4">存储在全局变量或包级别变量中</button></li><li class="tab"><button type="button" data-href="#逃逸场景-5">接口方法调用</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="逃逸场景-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">:=</span> <span class="token number">42</span>  <span class="token comment">// x 逃逸到堆，因为返回了指针</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>x
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="逃逸场景-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    y <span class="token operator">:=</span> <span class="token number">100</span>  <span class="token comment">// y 逃逸到堆，因为被闭包引用</span>
    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> y
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="逃逸场景-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    z <span class="token operator">:=</span> <span class="token number">5</span>  <span class="token comment">// z 逃逸到堆</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ch <span class="token operator">&lt;-</span> <span class="token operator">&amp;</span>z
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="逃逸场景-4"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> global <span class="token operator">*</span><span class="token builtin">int</span>
<span class="token keyword">func</span> <span class="token function">qux</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    w <span class="token operator">:=</span> <span class="token number">10</span>  <span class="token comment">// w 逃逸到堆</span>
    global <span class="token operator">=</span> <span class="token operator">&amp;</span>w
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="逃逸场景-5"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Iface <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">callMethod</span><span class="token punctuation">(</span>i Iface<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    i<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    val <span class="token operator">:=</span> myType<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// val 可能逃逸，因为接口调用不确定</span>
    <span class="token function">callMethod</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h5 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h5><div class="tabs" id="逃逸分析"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#逃逸分析-1">基本流程</button></li><li class="tab"><button type="button" data-href="#逃逸分析-2">实现细节</button></li><li class="tab"><button type="button" data-href="#逃逸分析-3">具体分析示例</button></li><li class="tab"><button type="button" data-href="#逃逸分析-4">查看逃逸分析结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="逃逸分析-1"><p><strong>Go 的逃逸分析是编译器在编译阶段执行的一个静态分析过程</strong>，用于确定变量的内存分配位置（栈还是堆）。以下是逃逸分析的具体过程和实现细节：</p>
<p><strong>基本流程</strong></p>
<p>1、<strong>构建函数调用图</strong>：编译器首先构建程序中所有函数的调用关系图。</p>
<p>2、<strong>数据流分析</strong>：对每个函数进行数据流分析，跟踪变量的生命周期和使用方式。</p>
<p>3、<strong>逃逸判定</strong>：根据特定规则判断变量是否逃逸。</p>
<p>4、<strong>优化决策</strong>：基于逃逸分析结果决定内存分配策略。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="逃逸分析-2"><p>Go 的逃逸分析主要在 <code>cmd/compile/internal/escape</code> 包中实现，关键步骤包括：</p>
<p><strong>构建逃逸图 (Escape Graph)</strong></p>
<ul>
<li>为每个变量和表达式创建节点</li>
<li>建立节点之间的边表示”指向”关系</li>
<li>边的属性表示逃逸的可能性</li>
</ul>
<p><strong>标记逃逸</strong></p>
<p>编译器使用以下主要标记来表示逃逸状态：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>NoEscape</td>
<td>变量不会逃逸，可在栈上分配</td>
</tr>
<tr>
<td>HeapAllocated</td>
<td>变量必须分配到堆上</td>
</tr>
<tr>
<td>Leaks</td>
<td>变量可能逃逸到调用者</td>
</tr>
<tr>
<td>SelfAssign</td>
<td>自赋值，不影响逃逸分析</td>
</tr>
</tbody></table>
<p><strong>逃逸传播规则</strong></p>
<p>逃逸分析通过以下规则在逃逸图中传播逃逸状态：</p>
<p>1、<strong>赋值传播规则</strong>：</p>
<ul>
<li><code>x = y</code>：如果 y 逃逸，则 x 也逃逸</li>
<li><code>x = &amp;y</code>：y 的逃逸状态会影响 x</li>
</ul>
<p>2、<strong>指针追踪规则</strong>：</p>
<ul>
<li>任何指向逃逸变量的指针也会导致被指向变量逃逸</li>
</ul>
<p>3、<strong>函数调用规则</strong>：</p>
<ul>
<li>传递给函数的参数可能逃逸（取决于函数如何使用它们）</li>
<li>从函数返回的值可能逃逸</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="逃逸分析-3"><p>以一个简单函数为例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">:=</span> <span class="token number">42</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>x
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>逃逸分析过程：</strong></p>
<p>1、识别 <code>x</code> 是一个局部变量</p>
<p>2、发现 <code>&amp;x</code> 被返回，意味着 <code>x</code> 的指针会逃逸到函数外部</p>
<p>3、根据”返回局部变量指针导致逃逸”的规则，标记 <code>x</code> 为 <code>HeapAllocated</code>。</p>
<p>4、决定在堆上分配 <code>x</code> 的内存</p>
<p><strong>逃逸分析的实现代码层面</strong></p>
<p>在 Go 编译器源码中，主要相关文件是：</p>
<ul>
<li><code>cmd/compile/internal/escape/escape.go</code>：逃逸分析主逻辑</li>
<li><code>cmd/compile/internal/ir/node.go</code>：节点定义</li>
<li><code>cmd/compile/internal/typecheck/typecheck.go</code>：类型检查相关</li>
</ul>
<p><strong>关键数据结构：</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 逃逸分析中的位置</span>
<span class="token keyword">type</span> location <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    n         ir<span class="token punctuation">.</span>Node  <span class="token comment">// 相关的AST节点</span>
    curfn     <span class="token operator">*</span>ir<span class="token punctuation">.</span>Func <span class="token comment">// 包含的函数</span>
    escapes   <span class="token builtin">bool</span>     <span class="token comment">// 是否逃逸</span>
    heapAllocated <span class="token builtin">bool</span> <span class="token comment">// 是否必须在堆上分配</span>
    <span class="token comment">// ... 其他字段</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>逃逸分析的局限性</strong></p>
<ul>
<li><p><strong>保守性</strong>：当无法确定时，Go 会保守地选择让变量逃逸</p>
</li>
<li><p><strong>接口影响</strong>：通过接口调用的方法可能导致逃逸</p>
</li>
<li><p><strong>反射影响</strong>：使用反射可能导致编译器无法准确分析</p>
</li>
<li><p><strong>跨包分析限制</strong>：对于其他包的函数，逃逸分析可能不够精确</p>
</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="逃逸分析-4"><p>查看逃逸分析结果</p>
<p>使用 <code>-gcflags=&quot;-m&quot;</code> 可以查看详细的逃逸分析信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go build <span class="token parameter variable">-gcflags</span><span class="token operator">=</span><span class="token string">"-m=2"</span> main.go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>不同级别：</p>
<ul>
<li><code>-m=1</code>：基本逃逸信息</li>
<li><code>-m=2</code>：更详细的逃逸原因</li>
<li><code>-m=3</code>：最详细的逃逸分析信息（包含更多内部细节）</li>
</ul>
<p>逃逸分析优化示例</p>
<p>编译器会对某些模式进行优化：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">noEscape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">:=</span> <span class="token number">10</span>
    <span class="token keyword">return</span> x
<span class="token punctuation">&#125;</span>
<span class="token comment">// x 不会逃逸，栈上分配</span>

<span class="token keyword">func</span> <span class="token function">escapeToHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    y <span class="token operator">:=</span> <span class="token number">20</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>y
<span class="token punctuation">&#125;</span>
<span class="token comment">// y 逃逸到堆</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>理解逃逸分析的具体过程有助于编写更高效的 Go 代码，特别是在性能敏感的场景中。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h5 id="逃逸影响"><a href="#逃逸影响" class="headerlink" title="逃逸影响"></a>逃逸影响</h5><ul>
<li><strong>性能影响</strong>：堆分配比栈分配慢，且增加 GC 压力。</li>
<li><strong>GC 开销</strong>：堆上的对象需要垃圾回收器管理。</li>
<li><strong>缓存局部性</strong>：栈数据通常有更好的缓存局部性。</li>
</ul>
<h5 id="逃逸优化"><a href="#逃逸优化" class="headerlink" title="逃逸优化"></a>逃逸优化</h5><p><strong>避免不必要的指针返回</strong>：如果可能，返回值而非指针。</p>
<p><strong>控制变量作用域</strong>：将变量限制在尽可能小的作用域内。</p>
<p><strong>预分配切片&#x2F;映射</strong>：如果知道大小，使用 <code>make([]T, 0, capacity)</code> 预分配。</p>
<p><strong>避免在循环中创建闭包</strong>：可能导致多次堆分配。</p>
<br/>

<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><h4 id="interface-类型"><a href="#interface-类型" class="headerlink" title="interface{} 类型"></a>interface{} 类型</h4><h5 id="interface-实现原理"><a href="#interface-实现原理" class="headerlink" title="interface{} 实现原理"></a>interface{} 实现原理</h5><p>接口是 Go 语言中的一种类型，它能够出现在变量的定义、函数的入参和返回值中并对它们进行约束，不过 Go 语言中有两种略微不同的接口：</p>
<table>
<thead>
<tr>
<th>iface</th>
<th>eface</th>
</tr>
</thead>
<tbody><tr>
<td>表示包含方法的接口</td>
<td>表示不包含任何方法的 <code>interface&#123;&#125;</code> 类型</td>
</tr>
</tbody></table>
<p>与 C 语言中的 <code>void *</code> 不同，<code>interface&#123;&#125;</code> 类型<strong>不是任意类型</strong>。如果我们将类型转换成了 <code>interface&#123;&#125;</code> 类型，变量在运行期间的类型也会发生变化，获取变量类型时会得到 <code>interface&#123;&#125;</code>。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// iface 表示包含方法的接口</span>
<span class="token keyword">type</span> iface <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 16 字节</span>
  tab  <span class="token operator">*</span>itab <span class="token comment">// 表示接口和结构体关系的 tab 字段</span>
  data unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// 指向变量数据的指针</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// layout of Itab known to compilers</span>
<span class="token comment">// allocated in non-garbage-collected memory</span>
<span class="token comment">// Needs to be in sync with</span>
<span class="token comment">// ../cmd/compile/internal/reflectdata/reflect.go:/^func.WriteTabs.</span>
<span class="token keyword">type</span> itab <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// // 32 字节</span>
  inter <span class="token operator">*</span>interfacetype <span class="token comment">// 接口类型</span>
  _type <span class="token operator">*</span>_type <span class="token comment">// abi.Type, 具体类型</span>
  <span class="token comment">// 当我们想将 interface 类型转换成具体类型时，</span>
  <span class="token comment">// 可以使用该字段快速判断目标类型和具体类型 runtime._type 是否一致</span>
  hash  <span class="token builtin">uint32</span> <span class="token comment">// copy of _type.hash. Used for type switches.</span>
  <span class="token boolean">_</span>     <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
  fun   <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token builtin">uintptr</span> <span class="token comment">// variable sized. fun[0]==0 means _type does not implement inter.</span>
<span class="token punctuation">&#125;</span>



<span class="token comment">// eface 表示不包含任何方法的 interface&#123;&#125; 类型</span>
<span class="token keyword">type</span> eface <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 16 字节</span>
  _type <span class="token operator">*</span>_type
  data  unsafe<span class="token punctuation">.</span>Pointer
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> _type abi<span class="token punctuation">.</span>Type
<span class="token comment">// Type is the runtime representation of a Go type.</span>
<span class="token comment">//</span>
<span class="token comment">// Be careful about accessing this type at build time, as the version</span>
<span class="token comment">// of this type in the compiler/linker may not have the same layout</span>
<span class="token comment">// as the version in the target binary, due to pointer width</span>
<span class="token comment">// differences and any experiments. Use cmd/compile/internal/rttype</span>
<span class="token comment">// or the functions in compiletype.go to access this type instead.</span>
<span class="token comment">// (TODO: this admonition applies to every type in this package.</span>
<span class="token comment">// Put it in some shared location?)</span>
<span class="token keyword">type</span> abi<span class="token punctuation">.</span>Type <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  Size_       <span class="token builtin">uintptr</span> <span class="token comment">// 字段存储了类型占用的内存空间，为内存空间的分配提供信息</span>
  PtrBytes    <span class="token builtin">uintptr</span> <span class="token comment">// number of (prefix) bytes in the type that can contain pointers</span>
  Hash        <span class="token builtin">uint32</span>  <span class="token comment">// 字段能够帮助我们快速确定类型是否相等</span>
  TFlag       TFlag   <span class="token comment">// extra type information flags</span>
  Align_      <span class="token builtin">uint8</span>   <span class="token comment">// alignment of variable with this type</span>
  FieldAlign_ <span class="token builtin">uint8</span>   <span class="token comment">// alignment of struct field with this type</span>
  Kind_       Kind    <span class="token comment">// enumeration for C</span>
  <span class="token comment">// function for comparing objects of this type</span>
  <span class="token comment">// (ptr to object A, ptr to object B) -> ==?</span>
  <span class="token comment">// 字段用于判断当前类型的多个对象是否相等，</span>
  <span class="token comment">// 该字段是为了减少 Go 语言二进制包大小从 typeAlg 结构体中迁移过来的</span>
  Equal <span class="token keyword">func</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token builtin">bool</span>
  <span class="token comment">// GCData stores the GC type data for the garbage collector.</span>
  <span class="token comment">// If the KindGCProg bit is set in kind, GCData is a GC program.</span>
  <span class="token comment">// Otherwise it is a ptrmask bitmap. See mbitmap.go for details.</span>
  GCData    <span class="token operator">*</span><span class="token builtin">byte</span>
  Str       NameOff <span class="token comment">// string form</span>
  PtrToThis TypeOff <span class="token comment">// type for pointer to this type, may be zero</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面结构中，hash 的重要作用就是在断言时判断两个类型是不是相等。</p>
<p>汇编指令会将目标类型的 <code>hash</code> 与接口变量中的 <code>itab.hash</code> 进行比较, 如：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">type</span> Animal <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
  <span class="token function">Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Doggy <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
  <span class="token function">Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Puppy <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  Name <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Puppy<span class="token punctuation">)</span> <span class="token function">Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">// 让编译器在编译时检查派生类是否完整实现了接口类型的所有接口</span>
<span class="token keyword">var</span> <span class="token boolean">_</span> Animal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>Puppy<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span> 
<span class="token keyword">var</span> <span class="token boolean">_</span> Doggy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>Puppy<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span> 

<span class="token comment">//go:noinline</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// (1)</span>
  puppy <span class="token operator">:=</span> Puppy<span class="token punctuation">&#123;</span>
    Name<span class="token punctuation">:</span> <span class="token string">`WangCai`</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// (2)</span>
  <span class="token keyword">var</span> a Animal <span class="token operator">=</span> <span class="token operator">&amp;</span>puppy
  <span class="token comment">// (3)</span>
  <span class="token keyword">var</span> d Doggy <span class="token operator">=</span> <span class="token operator">&amp;</span>puppy
  <span class="token comment">// (4)</span>
  a<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// (5)</span>
  a<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Puppy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// (6)</span>
  d<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">TEXT main.main(SB) main.go
# (1)
# puppy :&#x3D; Puppy&#123;
#   Name: &#96;WangCai&#96;,
# &#125;
  main.go:18		MOVD 16(R28), R16	[0:0]R_USEIFACE:type:*main.Puppy [0:0]R_USEIFACE:type:*main.Puppy	
  main.go:18		SUB $16, RSP, R17	
  main.go:18		CMP R16, R17		
  main.go:18		BLS 74(PC)		
  main.go:18		MOVD.W R30, -144(RSP)	
  main.go:18		MOVD R29, -8(RSP)	
  main.go:18		SUB $8, RSP, R29
  main.go:20		STP (ZR, ZR), 112(RSP)	
  main.go:20		ADRP 0(PC), R3		[0:8]R_ADDRARM64:go:string.&quot;WangCai&quot;	
  main.go:20		ADD $0, R3, R3		
  main.go:20		MOVD R3, 112(RSP)	
  main.go:20		ORR $7, ZR, R4		
  main.go:20		MOVD R4, 120(RSP)	
  main.go:19		MOVD R3, 40(RSP)	
  main.go:19		MOVD R4, 48(RSP)
# (2)
# var a Animal &#x3D; &amp;puppy, 编译器优化，会提前判断接口类型变量对应的派生类型
  main.go:22		ADD $40, RSP, R3	
  main.go:22		MOVD R3, 128(RSP)	
# 此时，Animal 接口类型 a 包含 具体类型（Puppy）的指针
  main.go:22		ADRP 0(PC), R4		[0:8]R_ADDRARM64:go:itab.*&lt;unlinkable&gt;.Puppy,&lt;unlinkable&gt;.Animal	
  main.go:22		ADD $0, R4, R4		
  main.go:22		MOVD R4, 72(RSP)	
  main.go:22		MOVD R3, 80(RSP)
# (3)
# var d Doggy &#x3D; &amp;puppy
  main.go:23		ADD $40, RSP, R3	
  main.go:23		MOVD R3, 128(RSP)	
  main.go:23		ADRP 0(PC), R4		[0:8]R_ADDRARM64:go:itab.*&lt;unlinkable&gt;.Puppy,&lt;unlinkable&gt;.Doggy	
  main.go:23		ADD $0, R4, R4		
  main.go:23		MOVD R4, 56(RSP)	
  main.go:23		MOVD R3, 64(RSP)
# (4)
# a.Move() 	
  main.go:24		MOVD 72(RSP), R0	
  main.go:24		MOVD 80(RSP), R3	
  main.go:24		ADRP 0(PC), R4		[0:8]R_ADDRARM64:go:itab.*main.Puppy,main.Animal	
  main.go:24		ADD $0, R4, R4		
  main.go:24		CMP R4, R0		
  main.go:24		BEQ 2(PC)		
  main.go:24		JMP 38(PC)		
  main.go:24		MOVD R3, 104(RSP)	
  main.go:24		MOVD R3, R0		
  main.go:24		CALL 0(PC)		[0:4]R_CALLARM64:main.(*Puppy).Move
# (5)
# a.(*Puppy).Move()
  main.go:25		MOVD 72(RSP), R0	
  main.go:25		MOVD 80(RSP), R1	
  main.go:25		ADRP 0(PC), R27		[0:8]R_ARM64_PCREL_LDST64:go:itab.*&lt;unlinkable&gt;.Puppy,&lt;unlinkable&gt;.Animal+8	
  main.go:25		MOVD (R27), R2		
  main.go:25		ADRP 0(PC), R3		[0:8]R_ADDRARM64:go:itab.*&lt;unlinkable&gt;.Puppy,&lt;unlinkable&gt;.Animal	
  main.go:25		ADD $0, R3, R3		
  main.go:25		CMP R3, R0		
  main.go:25		BEQ 2(PC)		
  main.go:25		JMP 22(PC)		
  main.go:25		MOVD R1, 96(RSP)	
  main.go:25		MOVD R1, R0		
  main.go:25		CALL 0(PC)		[0:4]R_CALLARM64:main.(*Puppy).Move	
# (6)
# d.Move()
  main.go:26		MOVD 56(RSP), R0	
  main.go:26		MOVD 64(RSP), R1	
  main.go:26		ADRP 0(PC), R2		[0:8]R_ADDRARM64:go:itab.*main.Puppy,main.Doggy
  main.go:26		ADD $0, R2, R2		
  main.go:26		CMP R2, R0		
  main.go:26		BEQ 2(PC)		
  main.go:26		JMP 7(PC)		
  main.go:26		MOVD R1, 88(RSP)	
  main.go:26		MOVD R1, R0		
  main.go:26		CALL 0(PC)		[0:4]R_CALLARM64:main.(*Puppy).Move	
# ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于 <code>var a Animal = &amp;puppy；</code>, 如下图所示：</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/GO/base/interface-convert.png">

<br/>

<p>对于断言，a.(*Puppy).Move()， 会通过 iface 中的 hash 和 Puppy 的 hash 做比较，</p>
<p>进而获取到 Puppy 的指针，进行 Move() 函数调用。</p>
<h5 id="动态派发（Dynamic-dispatch）"><a href="#动态派发（Dynamic-dispatch）" class="headerlink" title="动态派发（Dynamic dispatch）"></a>动态派发（Dynamic dispatch）</h5><p>是在运行期间选择具体多态操作（方法或者函数）执行的过程，接口的引入为它带来了动态派发这一特性，调用接口类型的方法时，如果编译期间不能确认接口的类型，Go 语言会在运行期间决定具体调用该方法的哪个实现。使用结构体实现接口带来的开销会大于使用指针实现，而动态派发在结构体上的表现非常差，这也提醒我们应当尽量避免在性能要求很高的链路使用结构体类型实现接口。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Puppy <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">// better</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Puppy<span class="token punctuation">)</span> <span class="token function">Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  
<span class="token punctuation">&#125;</span>

<span class="token comment">// bad</span>
<span class="token comment">// func (p Puppy) Move() &#123;</span>
<span class="token comment">//  </span>
<span class="token comment">// &#125; </span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="Go-语言动态派发的实现机制"><a href="#Go-语言动态派发的实现机制" class="headerlink" title="Go 语言动态派发的实现机制"></a>Go 语言动态派发的实现机制</h5><p>Go 语言的动态派发（通过接口调用方法）是通过接口内部的虚表（virtual table，简称 itab）结构实现：</p>
<h6 id="接口的内部结构"><a href="#接口的内部结构" class="headerlink" title="接口的内部结构"></a>接口的内部结构</h6><p>接口变量实际上由两部分组成：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> iface <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    tab  <span class="token operator">*</span>itab          <span class="token comment">// 方法表指针</span>
    data unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// 实际数据的指针</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> itab <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    inter <span class="token operator">*</span>interfacetype <span class="token comment">// 接口类型信息</span>
    _type <span class="token operator">*</span>_type         <span class="token comment">// 具体值的类型信息</span>
    hash  <span class="token builtin">uint32</span>         <span class="token comment">// 类型哈希值</span>
    <span class="token boolean">_</span>     <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
    fun   <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token builtin">uintptr</span>     <span class="token comment">// 方法地址数组（可变大小）</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="动态派发的寻址过程"><a href="#动态派发的寻址过程" class="headerlink" title="动态派发的寻址过程"></a>动态派发的寻址过程</h6><p>当通过 interface（接口）调用方法时，Go 会执行以下步骤：</p>
<p>（1）<strong>查找 itab</strong>：首先通过接口类型和具体类型找到或创建对应的 itab 结构；</p>
<p>（2）<strong>方法查找</strong>：在 itab 的 <code>fun</code> 字段中查找对应方法的地址；</p>
<p>（3）<strong>调用方法</strong>：使用找到的方法地址进行调用；</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> w Writer <span class="token operator">=</span> File<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment">// 动态派发调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>编译器会将上面的调用转换为类似如下的伪代码:</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">&#x2F;&#x2F; 伪代码，实际实现是用汇编
itab :&#x3D; w.tab
methodAddr :&#x3D; itab.fun[Write方法的索引]
methodAddr(w.data, data)  &#x2F;&#x2F; 调用方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>为了提高性能：</strong></p>
<p>（1）缓存全局的 itab 表：runtime.itabTable 是一个哈希表，缓存了所有已创建的 itab，避免重复创建 itab。</p>
<p>（2）方法地址直接存储：itab 的 <code>fun</code> 字段直接存储方法地址，减少查找时间。</p>
<p>（3）编译时方法排序：接口方法和具体类型方法都按名称排序，便于快速匹配。</p>
<p><strong>查找顺序：</strong></p>
<p>（1）先在全局 itab 表中查找。</p>
<p>（2）如果找不到，则创建一个新的 itab 并添加到表中。</p>
<h6 id="方法表的构建"><a href="#方法表的构建" class="headerlink" title="方法表的构建"></a>方法表的构建</h6><p>当首次将具体类型赋值给接口时，Go 会构建方法表：</p>
<p>（1）检查具体类型是否实现了接口的所有方法。</p>
<p>（2）为接口-类型对创建 itab。</p>
<p>（3）填充 itab 的 <code>fun</code> 字段，指向具体类型的方法实现。</p>
<h6 id="与C-虚函数的对比"><a href="#与C-虚函数的对比" class="headerlink" title="与C++虚函数的对比"></a>与C++虚函数的对比</h6><p>与C++的虚函数表(vtable)类似，但也有区别：</p>
<table>
<thead>
<tr>
<th align="left">特性</th>
<th align="left">Go itab</th>
<th align="left">C++ vtable</th>
</tr>
</thead>
<tbody><tr>
<td align="left">创建时机</td>
<td align="left">首次赋值时创建</td>
<td align="left">类定义时创建</td>
</tr>
<tr>
<td align="left">存储位置</td>
<td align="left">全局表+接口变量中</td>
<td align="left">每个对象中</td>
</tr>
<tr>
<td align="left">多继承</td>
<td align="left">不支持</td>
<td align="left">支持</td>
</tr>
<tr>
<td align="left">内存占用</td>
<td align="left">较小</td>
<td align="left">较大(每个对象都有)</td>
</tr>
</tbody></table>
<br/>

<h4 id="反射定律"><a href="#反射定律" class="headerlink" title="反射定律"></a>反射定律</h4><p>Go 提供反射机制来操纵 interface{} 类型。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ValueOf</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> Value
<span class="token keyword">func</span> <span class="token function">TypeOf</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> Type

<span class="token comment">// 转成反射对象</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">4.5</span>
  t <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">// 反射对象还原</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  a <span class="token operator">:=</span> <span class="token number">100</span>
  v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  b <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// a == b</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 反射对象可以修改</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> x <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">4.5</span>
  v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span>
  v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetFloat</span><span class="token punctuation">(</span><span class="token number">3.33</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="Pointers"><a href="#Pointers" class="headerlink" title="Pointers"></a>Pointers</h3><h4 id="unsafe-Pointer-提供的方法"><a href="#unsafe-Pointer-提供的方法" class="headerlink" title="unsafe.Pointer 提供的方法"></a>unsafe.Pointer 提供的方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Alignof()</td>
<td>get the address alignment of a value.</td>
</tr>
<tr>
<td>Sizeof()</td>
<td>get the size of a value (a.k.a., the size of the type of the value).</td>
</tr>
<tr>
<td>Offsetof()</td>
<td>get the address offset of a field in a struct value.</td>
</tr>
</tbody></table>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"fmt"</span>
  <span class="token string">"unsafe"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> x <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    a <span class="token builtin">int64</span>
    b <span class="token builtin">bool</span>
    c <span class="token builtin">string</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">const</span> M<span class="token punctuation">,</span> N <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> N<span class="token punctuation">)</span> <span class="token comment">// 16 32</span>
  
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Alignof</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Alignof</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Alignof</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8</span>
  
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Offsetof</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Offsetof</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Offsetof</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 16</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>uinptr 和 unsafe.Pointer 的用法区别：</p>
<br/>



<h3 id="CGO"><a href="#CGO" class="headerlink" title="CGO"></a>CGO</h3><p><a href="https://www.linkinstars.com/post/19c0fd4e.html">https://www.linkinstars.com/post/19c0fd4e.html</a></p>
<p><a href="https://chai2010.cn/advanced-go-programming-book/ch2-cgo/ch2-08-class.html">https://chai2010.cn/advanced-go-programming-book/ch2-cgo/ch2-08-class.html</a></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程篇（14）信号量 Semaphore</title>
    <url>/2023/12/25/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87%EF%BC%8814%EF%BC%89%20%E4%BF%A1%E5%8F%B7%E9%87%8F%20Semaphore/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>

<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>信号量本质上是一个整数变量，用于表示可用资源的数量。</p>
<p>它支持两种基本操作： </p>
<p><strong>P 操作</strong>（Proberen，荷兰语，意为尝试）：也称为 <code>wait</code> 操作或 <code>acquire</code> 操作。当一个进程或线程需要访问共享资源时，会执行 P 操作。该操作会将信号量的值减 1，如果减 1 后信号量的值大于等于 0，则表示有可用资源，进程或线程可以继续执行；如果减 1 后信号量的值小于 0，则表示没有可用资源，进程或线程会被阻塞，直到有其他进程或线程释放资源。 </p>
<p><strong>V 操作</strong>（Verhogen，荷兰语，意为增加）：也称为 <code>signal</code> 操作或 <code>release</code> 操作。当一个进程或线程使用完共享资源后，会执行 V 操作。该操作会将信号量的值加 1，如果加 1 后信号量的值小于等于 0，则表示有其他进程或线程在等待资源，会唤醒一个等待的进程或线程。</p>
<p><strong>工作原理</strong> </p>
<p>信号量的工作原理基于其整数值的变化和对进程或线程的阻塞与唤醒机制。</p>
<p>具体来说： </p>
<p>1、初始化：在使用信号量之前，需要对其进行初始化，设置初始值。初始值表示可用资源的初始数量。 </p>
<p>2、P 操作：当一个进程或线程需要访问共享资源时，会执行 P 操作。如果信号量的值大于 0，说明有可用资源，进程或线程可以继续执行，并将信号量的值减 1；如果信号量的值为 0，说明没有可用资源，进程或线程会被阻塞，进入等待队列。 </p>
<p>3、V 操作：当一个进程或线程使用完共享资源后，会执行 V 操作。该操作会将信号量的值加 1。如果加 1 后信号量的值小于等于 0，说明有其他进程或线程在等待资源，会从等待队列中唤醒一个进程或线程。</p>
<p>信号量和互斥量的区别：</p>
<table>
<thead>
<tr>
<th>Mutex</th>
<th>Semaphore</th>
</tr>
</thead>
<tbody><tr>
<td>Mutex 与二元信号量功能一致</td>
<td>有二元信号量（0 和 1）和计数信号量之分</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<br/>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>利用 <code>make(chan struct&#123;&#125;, n)</code>实现互斥信号量。</p>
<p>方法一：chan 创建后，发送 n 个数据填满 channel，代表已有 n 个资源，每次读取一个数据就代表申请占用一个资源，释放资源时，向 channel 写入一个数据。</p>
<p>方法二：channel 创建后，channel 的 buffer size 即表示 n 个资源，每次占用资源就写入一个数据，释放资源就读走一个数据。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Semaphore <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  sync<span class="token punctuation">.</span>Locker
  ch <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewSemaphore</span><span class="token punctuation">(</span><span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> sync<span class="token punctuation">.</span>Locker <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token builtin">cap</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>Semaphore <span class="token punctuation">&#123;</span>
    ch<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token builtin">cap</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Semaphore<span class="token punctuation">)</span> <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  s<span class="token punctuation">.</span>ch <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Semaphore<span class="token punctuation">)</span> <span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token operator">&lt;-</span>s<span class="token punctuation">.</span>ch
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>



<h3 id="Go-官方库实现"><a href="#Go-官方库实现" class="headerlink" title="Go 官方库实现"></a>Go 官方库实现</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Copyright 2017 The Go Authors. All rights reserved.</span>
<span class="token comment">// Use of this source code is governed by a BSD-style</span>
<span class="token comment">// license that can be found in the LICENSE file.</span>

<span class="token comment">// Package semaphore provides a weighted semaphore implementation.</span>
<span class="token keyword">package</span> semaphore <span class="token comment">// import "golang.org/x/sync/semaphore"</span>

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"container/list"</span>
  <span class="token string">"context"</span>
  <span class="token string">"sync"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> waiter <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  n     <span class="token builtin">int64</span>
  ready <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// Closed when semaphore acquired.</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// NewWeighted creates a new weighted semaphore with the given</span>
<span class="token comment">// maximum combined weight for concurrent access.</span>
<span class="token keyword">func</span> <span class="token function">NewWeighted</span><span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>Weighted <span class="token punctuation">&#123;</span>
  w <span class="token operator">:=</span> <span class="token operator">&amp;</span>Weighted<span class="token punctuation">&#123;</span>size<span class="token punctuation">:</span> n<span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> w
<span class="token punctuation">&#125;</span>

<span class="token comment">// Weighted provides a way to bound concurrent access to a resource.</span>
<span class="token comment">// The callers can request access with a given weight.</span>
<span class="token keyword">type</span> Weighted <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  size    <span class="token builtin">int64</span>
  cur     <span class="token builtin">int64</span>
  mu      sync<span class="token punctuation">.</span>Mutex
  waiters list<span class="token punctuation">.</span>List
<span class="token punctuation">&#125;</span>

<span class="token comment">// Acquire acquires the semaphore with a weight of n, blocking until resources</span>
<span class="token comment">// are available or ctx is done. On success, returns nil. On failure, returns</span>
<span class="token comment">// ctx.Err() and leaves the semaphore unchanged.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Weighted<span class="token punctuation">)</span> <span class="token function">Acquire</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> n <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
  done <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>
    <span class="token comment">// ctx becoming done has "happened before" acquiring the semaphore,</span>
    <span class="token comment">// whether it became done before the call began or while we were</span>
    <span class="token comment">// waiting for the mutex. We prefer to fail even if we could acquire</span>
    <span class="token comment">// the mutex without blocking.</span>
    s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">default</span><span class="token punctuation">:</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> s<span class="token punctuation">.</span>size<span class="token operator">-</span>s<span class="token punctuation">.</span>cur <span class="token operator">>=</span> n <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Since we hold s.mu and haven't synchronized since checking done, if</span>
    <span class="token comment">// ctx becomes done before we return here, it becoming done must have</span>
    <span class="token comment">// "happened concurrently" with this call - it cannot "happen before"</span>
    <span class="token comment">// we return in this branch. So, we're ok to always acquire here.</span>
    s<span class="token punctuation">.</span>cur <span class="token operator">+=</span> n
    s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> n <span class="token operator">></span> s<span class="token punctuation">.</span>size <span class="token punctuation">&#123;</span>
    <span class="token comment">// Don't make other Acquire calls block on one that's doomed to fail.</span>
    s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;-</span>done
    <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  ready <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  w <span class="token operator">:=</span> waiter<span class="token punctuation">&#123;</span>n<span class="token punctuation">:</span> n<span class="token punctuation">,</span> ready<span class="token punctuation">:</span> ready<span class="token punctuation">&#125;</span>
  elem <span class="token operator">:=</span> s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">PushBack</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>
  s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>
    s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ready<span class="token punctuation">:</span>
      <span class="token comment">// Acquired the semaphore after we were canceled.</span>
      <span class="token comment">// Pretend we didn't and put the tokens back.</span>
      s<span class="token punctuation">.</span>cur <span class="token operator">-=</span> n
      s<span class="token punctuation">.</span><span class="token function">notifyWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
      isFront <span class="token operator">:=</span> s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> elem
      s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span>
      <span class="token comment">// If we're at the front and there're extra tokens left, notify other waiters.</span>
      <span class="token keyword">if</span> isFront <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>size <span class="token operator">></span> s<span class="token punctuation">.</span>cur <span class="token punctuation">&#123;</span>
        s<span class="token punctuation">.</span><span class="token function">notifyWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ready<span class="token punctuation">:</span>
    <span class="token comment">// Acquired the semaphore. Check that ctx isn't already done.</span>
    <span class="token comment">// We check the done channel instead of calling ctx.Err because we</span>
    <span class="token comment">// already have the channel, and ctx.Err is O(n) with the nesting</span>
    <span class="token comment">// depth of ctx.</span>
    <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>
      s<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
      <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// TryAcquire acquires the semaphore with a weight of n without blocking.</span>
<span class="token comment">// On success, returns true. On failure, returns false and leaves the semaphore unchanged.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Weighted<span class="token punctuation">)</span> <span class="token function">TryAcquire</span><span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
  s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  success <span class="token operator">:=</span> s<span class="token punctuation">.</span>size<span class="token operator">-</span>s<span class="token punctuation">.</span>cur <span class="token operator">>=</span> n <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>
  <span class="token keyword">if</span> success <span class="token punctuation">&#123;</span>
    s<span class="token punctuation">.</span>cur <span class="token operator">+=</span> n
  <span class="token punctuation">&#125;</span>
  s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> success
<span class="token punctuation">&#125;</span>

<span class="token comment">// Release releases the semaphore with a weight of n.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Weighted<span class="token punctuation">)</span> <span class="token function">Release</span><span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  s<span class="token punctuation">.</span>cur <span class="token operator">-=</span> n
  <span class="token keyword">if</span> s<span class="token punctuation">.</span>cur <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"semaphore: released more than held"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  s<span class="token punctuation">.</span><span class="token function">notifyWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Weighted<span class="token punctuation">)</span> <span class="token function">notifyWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
    next <span class="token operator">:=</span> s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> next <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">break</span> <span class="token comment">// No more waiters blocked.</span>
    <span class="token punctuation">&#125;</span>

    w <span class="token operator">:=</span> next<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span>waiter<span class="token punctuation">)</span>
    <span class="token keyword">if</span> s<span class="token punctuation">.</span>size<span class="token operator">-</span>s<span class="token punctuation">.</span>cur <span class="token operator">&lt;</span> w<span class="token punctuation">.</span>n <span class="token punctuation">&#123;</span>
      <span class="token comment">// Not enough tokens for the next waiter.  We could keep going (to try to</span>
      <span class="token comment">// find a waiter with a smaller request), but under load that could cause</span>
      <span class="token comment">// starvation for large requests; instead, we leave all remaining waiters</span>
      <span class="token comment">// blocked.</span>
      <span class="token comment">//</span>
      <span class="token comment">// Consider a semaphore used as a read-write lock, with N tokens, N</span>
      <span class="token comment">// readers, and one writer.  Each reader can Acquire(1) to obtain a read</span>
      <span class="token comment">// lock.  The writer can Acquire(N) to obtain a write lock, excluding all</span>
      <span class="token comment">// of the readers.  If we allow the readers to jump ahead in the queue,</span>
      <span class="token comment">// the writer will starve — there is always one token available for every</span>
      <span class="token comment">// reader.</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">&#125;</span>

    s<span class="token punctuation">.</span>cur <span class="token operator">+=</span> w<span class="token punctuation">.</span>n
    s<span class="token punctuation">.</span>waiters<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span>
    <span class="token function">close</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>ready<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程篇（11）channel</title>
    <url>/2023/12/24/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87%EF%BC%8811%EF%BC%89%20channel/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>

<h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>应用场景：数据传递，信息交流（生产-消费），信号通知，任务编排，互斥锁。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><a href="https://joychenno1.github.io/2021/11/13/Go/go%E5%9F%BA%E7%A1%80/">https://joychenno1.github.io/2021/11/13/Go/go%E5%9F%BA%E7%A1%80/</a></p>
<br>

<h2 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h2><p>1、避免导致阻塞的情况，避免 goroutine 泄漏：</p>
<table>
<thead>
<tr>
<th></th>
<th>nil chan</th>
<th>not emtpy chan</th>
<th>empty chan</th>
<th>full buffered chan</th>
<th>not full buffered chan</th>
<th>closed chan</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;-chan</td>
<td><strong>block</strong></td>
<td>can read value</td>
<td><strong>block</strong></td>
<td>can read value</td>
<td>can read value</td>
<td>after read the rest of value(s), then return nil</td>
</tr>
<tr>
<td>chan&lt;-</td>
<td><strong>block</strong></td>
<td>can write value</td>
<td>can write value</td>
<td><strong>block</strong></td>
<td>can write value</td>
<td><strong>panic</strong></td>
</tr>
<tr>
<td>close</td>
<td><strong>panic</strong></td>
<td>normally close</td>
<td>normally close</td>
<td>normally close</td>
<td>normally close</td>
<td><strong>panic</strong></td>
</tr>
</tbody></table>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// goroutine 泄漏</span>
<span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span>timeout <span class="token operator">*</span>time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
  ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// unbuffered chan</span>
  
  <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 业务层耗时</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>timeout <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    ch <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 阻塞等到接受者读取才会释放 goroutine ！！！</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  
  <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> result <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>
    	<span class="token keyword">return</span> <span class="token boolean">true</span>
    
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>
    	<span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token comment">// 没来的及接收 ch 的值就 return 出去了</span>
  <span class="token punctuation">&#125;</span>
  
<span class="token punctuation">&#125;</span>

<span class="token comment">// 解决上面出现的 goroutine 泄漏的问题，可以使用带缓冲的 chan， 使对应 goroutine 不阻塞</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程篇（15） 并发请求合并利器 SingleFlight</title>
    <url>/2023/12/26/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87%EF%BC%8815%EF%BC%89%20%E5%90%88%E5%B9%B6%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82%20SingleFlight/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他 go 并发编程知识学习的汇总，持续完善中。</p>
<br/>



<h2 id="SingleFlight"><a href="#SingleFlight" class="headerlink" title="SingleFlight"></a>SingleFlight</h2><table>
<thead>
<tr>
<th>sync.Once</th>
<th>SingleFlight</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>go 官方实现</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Copyright 2013 The Go Authors. All rights reserved.</span>
<span class="token comment">// Use of this source code is governed by a BSD-style</span>
<span class="token comment">// license that can be found in the LICENSE file.</span>

<span class="token comment">// Package singleflight provides a duplicate function call suppression</span>
<span class="token comment">// mechanism.</span>
<span class="token keyword">package</span> singleflight <span class="token comment">// import "golang.org/x/sync/singleflight"</span>

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"bytes"</span>
  <span class="token string">"errors"</span>
  <span class="token string">"fmt"</span>
  <span class="token string">"runtime"</span>
  <span class="token string">"runtime/debug"</span>
  <span class="token string">"sync"</span>
<span class="token punctuation">)</span>

<span class="token comment">// errGoexit indicates the runtime.Goexit was called in</span>
<span class="token comment">// the user given function.</span>
<span class="token keyword">var</span> errGoexit <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"runtime.Goexit was called"</span><span class="token punctuation">)</span>

<span class="token comment">// A panicError is an arbitrary value recovered from a panic</span>
<span class="token comment">// with the stack trace during the execution of given function.</span>
<span class="token keyword">type</span> panicError <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  value <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  stack <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Error implements error interface.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>panicError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%v\n\n%s"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>value<span class="token punctuation">,</span> p<span class="token punctuation">.</span>stack<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>panicError<span class="token punctuation">)</span> <span class="token function">Unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
  err<span class="token punctuation">,</span> ok <span class="token operator">:=</span> p<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">error</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> err
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">newPanicError</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
  stack <span class="token operator">:=</span> debug<span class="token punctuation">.</span><span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// The first line of the stack trace is of the form "goroutine N [status]:"</span>
  <span class="token comment">// but by the time the panic reaches Do the goroutine may no longer exist</span>
  <span class="token comment">// and its status will have changed. Trim out the misleading line.</span>
  <span class="token keyword">if</span> line <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">IndexByte</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> line <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    stack <span class="token operator">=</span> stack<span class="token punctuation">[</span>line<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>panicError<span class="token punctuation">&#123;</span>value<span class="token punctuation">:</span> v<span class="token punctuation">,</span> stack<span class="token punctuation">:</span> stack<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// call is an in-flight or completed singleflight.Do call</span>
<span class="token keyword">type</span> call <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  wg sync<span class="token punctuation">.</span>WaitGroup

  <span class="token comment">// These fields are written once before the WaitGroup is done</span>
  <span class="token comment">// and are only read after the WaitGroup is done.</span>
  val <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  err <span class="token builtin">error</span>

  <span class="token comment">// These fields are read and written with the singleflight</span>
  <span class="token comment">// mutex held before the WaitGroup is done, and are read but</span>
  <span class="token comment">// not written after the WaitGroup is done.</span>
  dups  <span class="token builtin">int</span>
  chans <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">chan</span><span class="token operator">&lt;-</span> Result
<span class="token punctuation">&#125;</span>

<span class="token comment">// Group represents a class of work and forms a namespace in</span>
<span class="token comment">// which units of work can be executed with duplicate suppression.</span>
<span class="token keyword">type</span> Group <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  mu sync<span class="token punctuation">.</span>Mutex       <span class="token comment">// protects m</span>
  m  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>call <span class="token comment">// lazily initialized</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Result holds the results of Do, so they can be passed</span>
<span class="token comment">// on a channel.</span>
<span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  Val    <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  Err    <span class="token builtin">error</span>
  Shared <span class="token builtin">bool</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Do executes and returns the results of the given function, making</span>
<span class="token comment">// sure that only one execution is in-flight for a given key at a</span>
<span class="token comment">// time. If a duplicate comes in, the duplicate caller waits for the</span>
<span class="token comment">// original to complete and receives the same results.</span>
<span class="token comment">// The return value shared indicates whether v was given to multiple callers.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">,</span> shared <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> g<span class="token punctuation">.</span>m <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    g<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>call<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> c<span class="token punctuation">,</span> ok <span class="token operator">:=</span> g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span>dups<span class="token operator">++</span>
    g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>panicError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
      <span class="token function">panic</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>err <span class="token operator">==</span> errGoexit <span class="token punctuation">&#123;</span>
      runtime<span class="token punctuation">.</span><span class="token function">Goexit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err<span class="token punctuation">,</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span>
  c <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span>
  c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> c
  g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  g<span class="token punctuation">.</span><span class="token function">doCall</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> key<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>
  <span class="token keyword">return</span> c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err<span class="token punctuation">,</span> c<span class="token punctuation">.</span>dups <span class="token operator">></span> <span class="token number">0</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// DoChan is like Do but returns a channel that will receive the</span>
<span class="token comment">// results when they are ready.</span>
<span class="token comment">//</span>
<span class="token comment">// The returned channel will not be closed.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">DoChan</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> Result <span class="token punctuation">&#123;</span>
  ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Result<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> g<span class="token punctuation">.</span>m <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    g<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>call<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> c<span class="token punctuation">,</span> ok <span class="token operator">:=</span> g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span>dups<span class="token operator">++</span>
    c<span class="token punctuation">.</span>chans <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>chans<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>
    g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> ch
  <span class="token punctuation">&#125;</span>
  c <span class="token operator">:=</span> <span class="token operator">&amp;</span>call<span class="token punctuation">&#123;</span>chans<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">chan</span><span class="token operator">&lt;-</span> Result<span class="token punctuation">&#123;</span>ch<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
  c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> c
  g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">go</span> g<span class="token punctuation">.</span><span class="token function">doCall</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> key<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>

  <span class="token keyword">return</span> ch
<span class="token punctuation">&#125;</span>

<span class="token comment">// doCall handles the single call for a key.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">doCall</span><span class="token punctuation">(</span>c <span class="token operator">*</span>call<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  normalReturn <span class="token operator">:=</span> <span class="token boolean">false</span>
  recovered <span class="token operator">:=</span> <span class="token boolean">false</span>

  <span class="token comment">// use double-defer to distinguish panic from runtime.Goexit,</span>
  <span class="token comment">// more details see https://golang.org/cl/134395</span>
  <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// the given function invoked runtime.Goexit</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>normalReturn <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>recovered <span class="token punctuation">&#123;</span>
      c<span class="token punctuation">.</span>err <span class="token operator">=</span> errGoexit
    <span class="token punctuation">&#125;</span>

    g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">==</span> c <span class="token punctuation">&#123;</span>
      <span class="token function">delete</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>m<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>panicError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
      <span class="token comment">// In order to prevent the waiting channels from being blocked forever,</span>
      <span class="token comment">// needs to ensure that this panic cannot be recovered.</span>
      <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>chans<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">go</span> <span class="token function">panic</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// Keep this goroutine around so that it will appear in the crash dump.</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">panic</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>err <span class="token operator">==</span> errGoexit <span class="token punctuation">&#123;</span>
      <span class="token comment">// Already in the process of goexit, no need to call again</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Normal return</span>
      <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ch <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>chans <span class="token punctuation">&#123;</span>
        ch <span class="token operator">&lt;-</span> Result<span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err<span class="token punctuation">,</span> c<span class="token punctuation">.</span>dups <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token operator">!</span>normalReturn <span class="token punctuation">&#123;</span>
        <span class="token comment">// Ideally, we would wait to take a stack trace until we've determined</span>
        <span class="token comment">// whether this is a panic or a runtime.Goexit.</span>
        <span class="token comment">//</span>
        <span class="token comment">// Unfortunately, the only way we can distinguish the two is to see</span>
        <span class="token comment">// whether the recover stopped the goroutine from terminating, and by</span>
        <span class="token comment">// the time we know that, the part of the stack trace relevant to the</span>
        <span class="token comment">// panic has been discarded.</span>
        <span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
          c<span class="token punctuation">.</span>err <span class="token operator">=</span> <span class="token function">newPanicError</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    normalReturn <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token operator">!</span>normalReturn <span class="token punctuation">&#123;</span>
    recovered <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Forget tells the singleflight to forget about a key.  Future calls</span>
<span class="token comment">// to Do for this key will call the function rather than waiting for</span>
<span class="token comment">// an earlier call to complete.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Forget</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">delete</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>m<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="groupcache-框架-解决缓存击穿问题"><a href="#groupcache-框架-解决缓存击穿问题" class="headerlink" title="groupcache 框架 (解决缓存击穿问题)"></a>groupcache 框架 (解决缓存击穿问题)</h4><p>groupcache 是 Go 语言编写的分布式缓存系统，采用了多种策略来有效解决缓存击穿问题。</p>
<p> <strong>单键多请求合并</strong>： groupcache 具备将针对同一个键的多个并发请求合并为一个请求的能力。当大量请求同时访问一个刚刚过期的热门键时，groupcache 会把这些请求合并起来，只让其中一个请求去数据源（如数据库）获取数据，其他请求则等待这个请求完成并将数据存入缓存后，再从缓存中获取数据。 </p>
<p><strong>原理：</strong> 在 groupcache 里，有一个 SingleFlight 机制。当多个 goroutine 同时请求同一个键时，SingleFlight 会让第一个到达的 goroutine 去执行实际的数据获取操作，而其他 goroutine 会等待这个操作完成。一旦第一个 goroutine 获取到数据并将其存入缓存，其他等待的 goroutine 就可以直接从缓存中获取该数据，无需再次访问数据源。</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程篇（1） Go 并发编程和调度器</title>
    <url>/2023/12/15/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87%EF%BC%881%EF%BC%89%20Go%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%92%8C%E8%B0%83%E5%BA%A6%E5%99%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他 go 并发编程知识学习的汇总，持续完善中。</p>
<br/>



<h2 id="并发-vs-并行"><a href="#并发-vs-并行" class="headerlink" title="并发 vs 并行"></a>并发 vs 并行</h2><p>  并发的本质是要设计一个结构，可以<strong>使程序的不同计算模块并发地执行</strong>。这些模块的执行，对于<strong>单核 CPU</strong>，并发地执行（不能并行地执行），在一定的时间段内，他们都可以占用 CPU 时间片，每个模块都可以被执行；对于<strong>多核 CPU</strong>，这些模块可能真的是并行的。总之，<strong>并发的目标之一就是能利用并行（多核）的能力</strong>，但是并行的目标并不是并发。</p>
<p>  我们在设计并发程序的时候，经常要进行并发单元的设计，并且要进行<strong>并发模块之间</strong>的<strong>数据同步</strong>和<strong>消息传递</strong>，甚至要<strong>编排</strong>任务，让它们<strong>按照固定的流程执行</strong>。</p>
<br/>



<h3 id="并发编程的优化是有上限的"><a href="#并发编程的优化是有上限的" class="headerlink" title="并发编程的优化是有上限的"></a>并发编程的优化是有上限的</h3><p>  提升系统的一部分性能对整个系统的性能有多大影响？根据阿姆达尔定律:</p>
<pre class="line-numbers language-math" data-language="math"><code class="language-math">S &#x3D; \frac&#123;1&#125;&#123; (1-α) + α&#x2F;k&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>

<p>   假设原来系统执行一个程序需要的时间为 T, 其中某一部分占用的时间百分比为 α, 如果这一部分的性能提升 k 倍，则整个系统执行此程序需要的时间会变为：</p>
<pre class="line-numbers language-math" data-language="math"><code class="language-math">T&#39; &#x3D; \text&#123;不能并发执行的部分耗时&#125; + \text&#123;并发提升后所需耗时&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>

<p>加速比（系统性能提升的倍数 T&#x2F;T’）：</p>
<pre class="line-numbers language-math" data-language="math"><code class="language-math">S &#x3D; \frac&#123;1&#125;&#123; (1-α) + α&#x2F;k&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<br/>

<p>  在设计并发程序的时候，尽量让可并发的部分在整个系统中占较大（α ↑），得到更大加速比。尽量减少串行部分，k ↑。</p>
<br/>

<h3 id="Go-并发不一定最快"><a href="#Go-并发不一定最快" class="headerlink" title="Go 并发不一定最快"></a>Go 并发不一定最快</h3><p>使用一个快排程序进行对比，<strong>并行不一定快过串行</strong>的情况：</p>
<div class="tabs" id="point"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#point-1">串行快排</button></li><li class="tab"><button type="button" data-href="#point-2">并行快排</button></li><li class="tab"><button type="button" data-href="#point-3">优化过的并行快排</button></li><li class="tab"><button type="button" data-href="#point-4">压测代码</button></li><li class="tab"><button type="button" data-href="#point-5">压测结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="point-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> quicksort

<span class="token keyword">func</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> start <span class="token operator">></span> end <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  p <span class="token operator">:=</span> <span class="token function">partition</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
  <span class="token function">quick_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> start<span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">quick_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">partition</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 将最后一个值作为分界值</span>
  pivot <span class="token operator">:=</span> a<span class="token punctuation">[</span>end<span class="token punctuation">]</span>
  i <span class="token operator">:=</span> start <span class="token operator">-</span> <span class="token number">1</span>
  <span class="token keyword">for</span> j <span class="token operator">:=</span> start<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 如果小于分界值，挪到左边</span>
    <span class="token keyword">if</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot <span class="token punctuation">&#123;</span>
      i<span class="token operator">++</span>
      a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="point-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> quicksort

<span class="token keyword">func</span> <span class="token function">ConcurrencyQuickSort</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token builtin">int</span><span class="token punctuation">,</span> done <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> start <span class="token operator">>=</span> end <span class="token punctuation">&#123;</span>
    done <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  p <span class="token operator">:=</span> <span class="token function">partition</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
  childDone <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token comment">// 启动一个 goroutine，快排左边</span>
  <span class="token keyword">go</span> <span class="token function">ConcurrencyQuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> start<span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> childDone<span class="token punctuation">)</span>
  <span class="token comment">// 启动一个 goroutine，快排右边</span>
  <span class="token keyword">go</span> <span class="token function">ConcurrencyQuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> childDone<span class="token punctuation">)</span>

  <span class="token operator">&lt;-</span>childDone
  <span class="token operator">&lt;-</span>childDone
  done <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="point-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> quicksort

<span class="token keyword">func</span> <span class="token function">ImprovedConcurrencyQuickSort</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token builtin">int</span><span class="token punctuation">,</span> 
                                  done <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> depth <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> start <span class="token operator">>=</span> end <span class="token punctuation">&#123;</span>
    done <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  depth<span class="token operator">--</span>
  p <span class="token operator">:=</span> <span class="token function">partition</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
  <span class="token keyword">if</span> depth <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    childDone <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token comment">// 启动一个 goroutine，快排左边</span>
    <span class="token keyword">go</span> <span class="token function">ImprovedConcurrencyQuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> start<span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> childDone<span class="token punctuation">,</span> depth<span class="token punctuation">)</span>
    <span class="token comment">// 启动一个 goroutine，快排右边</span>
    <span class="token keyword">go</span> <span class="token function">ImprovedConcurrencyQuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> childDone<span class="token punctuation">,</span> depth<span class="token punctuation">)</span>

    <span class="token operator">&lt;-</span>childDone
    <span class="token operator">&lt;-</span>childDone
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> start<span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  done <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> start <span class="token operator">></span> end <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  p <span class="token operator">:=</span> <span class="token function">partition</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
  <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> start<span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="point-4"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"fmt"</span>
  <span class="token string">"main/quick_sort"</span>
  <span class="token string">"math/rand"</span>
  <span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">benchmark</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">benchmark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixMicro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">var</span> <span class="token punctuation">(</span>
    n         <span class="token operator">=</span> <span class="token number">10000000</span>
    testData1 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
    testData2 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
    testData3 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
  <span class="token punctuation">)</span>

  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
    val <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>
    testData1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>testData1<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
    testData2 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>testData2<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
    testData3 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>testData3<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    timeNow <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`串行快排耗时:`</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>timeNow<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    quick_sort<span class="token punctuation">.</span><span class="token function">QuickSort</span><span class="token punctuation">(</span>testData1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>testData1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    timeNow <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`并行快排耗时:`</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>timeNow<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> quick_sort<span class="token punctuation">.</span><span class="token function">ConcurrencyQuickSort</span><span class="token punctuation">(</span>testData2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>testData2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> done<span class="token punctuation">)</span>
    <span class="token operator">&lt;-</span>done
  <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    timeNow <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`优化过的并行快排耗时:`</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>timeNow<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> quick_sort<span class="token punctuation">.</span><span class="token function">ImprovedConcurrencyQuickSort</span><span class="token punctuation">(</span>testData3<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>testData3<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> done<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;-</span>done
  <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="point-5"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./benchmark          
串行快排耗时: <span class="token number">826</span>.007458ms
并行快排耗时: <span class="token number">2</span>.669086625s
优化过的并行快排耗时: <span class="token number">480</span>.616209ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<p> <strong>结论：</strong> Go1.19 后会根据 goroutine 栈的使用率来初始化新的 goroutine 栈的大小，goroutine 的栈大小不再是固定的 2KB。因为创建新的 goroutine 会伴随着栈的分配，损耗性能；同时，大量 goroutine 在调度和垃圾回收检查时会占用一定时间。<strong>所以并发设计上，需要控制 goroutine 的数量，充分利用并发优势的同时又可以减少管理太多 goroutine 带来的损耗。</strong></p>
<br/>

<h3 id="Go-运行时调度器（G-M-P）"><a href="#Go-运行时调度器（G-M-P）" class="headerlink" title="Go 运行时调度器（G-M-P）"></a>Go 运行时调度器（G-M-P）</h3><p><strong>上下文切换（context switch）</strong></p>
<p>系统会在中断、系统调用时执行线程上下问切换，线程上下文切换是一种昂贵的操作，操作系统需要将用<strong>户态-&gt;内核态</strong>，保存要切换线程的执行状态，将一些重要寄存器的值和进程状态保存在线程控制块数据结构中。当恢复线程运行时，需要将这些状态加载到寄存器中，从<strong>内核态-&gt;用户态</strong>。</p>
<p><strong>goroutine 调度</strong>是由 <strong>Go 运行时</strong>控制的，每个编译的 Go 程序都会附加一个很小的 Go 运行时，负责<strong>内存分配</strong>、<strong>goroutine 调度</strong>和<strong>卡机回收</strong>。goroutine 会<strong>和某个线程绑定</strong>，它是用户态的，并且初始的栈比较小。所以它的上下文切换比较小，大致上，可以认为 goroutine 的上下文切换开销是线程上下文切换开销的十分之一。</p>
<p><strong>G-M-P 模型</strong></p>
<table>
<thead>
<tr>
<th align="left">G</th>
<th align="left">M</th>
<th>P</th>
</tr>
</thead>
<tbody><tr>
<td align="left">表示 goroutine，存储与 goroutine 相关的信息，如栈、状态、要执行的函数等。</td>
<td align="left">表示执行计算资源单元，Go 会把它和操作系统的线程对应，只有 P 和 M 绑定之后，才能让 P 的本地队列中的 goroutine 运行起来。</td>
<td>表示逻辑 processor，非指 CPU 的处理器！！！ P 负责把 M 和 G 捏合起来，让一系列的 goroutine 在某个 M 上顺序执行。默认情况下，NumberOf(P) &#x3D; CPU 逻辑数。I&#x2F;O敏感场景下，可以使用 <strong>runtime.GOMAXPROCS</strong> 改变它。</td>
</tr>
</tbody></table>
<p>G-M-P 模型示意图</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/GO/Concurrency/GoConcurrencyGMP.png">

<br/>

<p>运行 Go 程序时：</p>
<p>1、会调用 Go 运行时的一个函数完成<strong>运行时</strong>的初始化工作（调度器初始化、垃圾回收等）。最开始会创建 <strong>m0</strong> 和 <strong>g0</strong>，完成调度器初始化的工作，为 <strong>main.main</strong> 生成一个 <strong>goroutine</strong>，并且被 m0 执行。</p>
<p>2、<strong>Go 运行时</strong>会启动 n 个 P 和 M，并且把 P 和 M 捏合在一起，除非有阻塞的 I&#x2F;O 导致 P 和 M 解绑， P 再找到新的 M。</p>
<p><strong>对于每个 P：</strong></p>
<p>（1）都有自己的本地队列，他会顺序执行它本地的 goroutine 队列；</p>
<p>（2）每 61 次或者本地队列没有可执行的 goroutine 时，会从全局队列找到一个 goroutine 来执行，避免全局队列 goroutine 没有机会执行；</p>
<p>（3）它也会从其他的 goroutine 队列窃取一半的 goroutine 过来，让工作均衡。</p>
<p>3、<strong>对于 timer 和 netpoll：</strong></p>
<p>timer 经过几次演化，它的四叉堆依附在 P 上， P 在调度的时候，会检查这个四叉堆上面是否有 timer 需要触发，同时也会窃取 timer。</p>
<p>调度器也会检查 netpoll，对于那些网络 I&#x2F;O 已经就绪的 goroutine，也会有机会执行 read&#x2F;write 操作。</p>
<p><strong>Symmon</strong> 是一个独立的 goroutine，不依附在任何  P 上，而是运行在一个独立的 M 中，定时运行一次，检查与网络 I&#x2F;O 相关的 goroutine和那些长时间运行（&gt;10 ms）的 goroutine，避免某个 goroutine 长时间占用计算资源。</p>
<p>Go 1.14 之后，实现了<strong>基于信号的抢占式调度</strong>，向正在运行的 goroutine 所绑定的 M 发出 <strong>SIGURG</strong> 信号，信号处理函数会进行调度，让其他 goroutine 有机会执行。</p>
<p><strong>m0 和 g0 是两个特殊的对象：</strong></p>
<table>
<thead>
<tr>
<th>m0</th>
<th>g0</th>
</tr>
</thead>
<tbody><tr>
<td>m0 是 Go 程序启动时的第一个线程，也是主线程。<br/>m0 在全局变量中，其他一般的 M 都是运行时的局部变量。</td>
<td>g0 是调度用的 goroutine， 每个 M 都只有一个 g0。<br/>g0 的栈是系统分配的，在 Linux 上栈大小默认固定为 8MB，不能扩展和缩小。<br/>而通常的 goroutine 栈的大小默认是 2KB（Go 1.19 改成了根据历史使用自动调整的方式），它们的栈大小可以扩展。<br/>一个 goroutine 运行完成后，后者新建一个 goroutine 时，调度器会先被切换到 g0 上，让 g0 负责调度。</td>
</tr>
</tbody></table>
<p>对于 m0 绑定的那个 g0，也是放在全局变量中的。</p>
<p>GMP 模型中协程的调度和分配本质就是一种<code>percpu 模式</code>，均匀且充分的进行分配，达到高效的并发执行。</p>
<br/>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程篇（2） 互斥锁 Mutex</title>
    <url>/2023/12/11/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87%EF%BC%882%EF%BC%89%20%E4%BA%92%E6%96%A5%E9%94%81%20Mutex/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他 go 并发编程知识学习的汇总，持续完善中。</p>
<br/>



<h3 id="竞争条件与数据竞争"><a href="#竞争条件与数据竞争" class="headerlink" title="竞争条件与数据竞争"></a>竞争条件与数据竞争</h3><p>stackoverflow 上面的提问:[<a href="https://stackoverflow.com/questions/11276259/are-data-races-and-race-condition-actually-the-same-thing-in-context-of-conc">Are “data races” and “race condition” actually the same thing in context of concurrent programming</a>]</p>
<p><strong>Data race</strong> and <strong>race condition</strong> are not the same thing in the context of concurrent programming. A data race happens when two threads access the same mutable object without synchronization, while a race condition happens when the order of events affects the correctness of the program.</p>
<p>A data race can cause a race condition, but not always. A race condition can also occur without a data race. Both are problems with atomicity and they can be solved by synchronization mechanisms like locks or serial queues.</p>
<table>
<thead>
<tr>
<th>竞争条件</th>
<th>数据竞争</th>
</tr>
</thead>
<tbody><tr>
<td>指的是在多线程环境中，由于操作顺序不确定性导致的程序执行结果的不确定性。</td>
<td>指的是在多线程环境中，由于操作顺序的不确定性导致数据的不一致问题。</td>
</tr>
<tr>
<td>例如：两个线程同时对一个变量进行读写，那么执行顺序将会对最终结果产生影响。<br/>外部时序或者排序的不确定性产生竞争条件。<br/>对于并发编程，我们经常无法精准控制 goroutine 的运行顺序，我们只能接受这样的竞争条件。</td>
<td>数据竞争是不能接受的，它会导致结果非预期问题。</td>
</tr>
</tbody></table>
<p>竞争条件是一种状态，数据竞争是一种问题。</p>
<p>举例说明：</p>
<div class="tabs" id="data-race-example"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#data-race-example-1">存在数据竞争，不存在竞争条件</button></li><li class="tab"><button type="button" data-href="#data-race-example-2">不存在数据竞争，不存在竞争条件</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="data-race-example-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 账户转账例子</span>
<span class="token keyword">func</span> <span class="token function">transfer</span><span class="token punctuation">(</span>amount <span class="token builtin">int64</span><span class="token punctuation">,</span> accountFrom<span class="token punctuation">,</span> acountTo <span class="token operator">*</span>Acount<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// step 1</span>
  balance <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">LoadInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>accountFrom<span class="token punctuation">.</span>Banlance<span class="token punctuation">)</span> <span class="token comment">// 原子操作，读取</span>
  <span class="token keyword">if</span> balance <span class="token operator">&lt;</span> amount <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// step 2</span>
  atomic<span class="token punctuation">.</span><span class="token function">AddInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>accountTo<span class="token punctuation">.</span>Balance<span class="token punctuation">,</span> amount<span class="token punctuation">)</span>        <span class="token comment">// 原子操作 加</span>
  <span class="token comment">// step 3</span>
  atomic<span class="token punctuation">.</span><span class="token function">AddInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>accountFrom<span class="token punctuation">.</span>Balance<span class="token punctuation">,</span> <span class="token operator">-</span>amount<span class="token punctuation">)</span>     <span class="token comment">// 原子操作 减</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在多线程并发下，没有数据竞争问题，对于用户的余额操作都是原子操作，不会出现部分被修改的情况，账户的钱不会凭空消失。</p>
<p>但是会存在竞争条件的问题，无法预测 <code>step2</code> 和 <code>step3</code> 的顺序，假设有 2 个 goroutine 都进入到了 <code>step2，假设 </code>step1&#96;的余额他们都都到了相同的100w:</p>
<table>
<thead>
<tr>
<th>G1</th>
<th>G2</th>
</tr>
</thead>
<tbody><tr>
<td>转走 70w</td>
<td>转走 50 w</td>
</tr>
</tbody></table>
<p>最后的结果就是，账户的余额是 -20w，这是不符合预期的。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="data-race-example-2"><p>为了解决竞争条件的问题，需要 <code>mutex</code> 对临界资源互斥</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> txMutex sync<span class="token punctuation">.</span>Mutex

<span class="token keyword">func</span> <span class="token function">transfer</span><span class="token punctuation">(</span>amount <span class="token builtin">int64</span><span class="token punctuation">,</span> accountFrom<span class="token punctuation">,</span> accountTo <span class="token operator">*</span>Account<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
  txMutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">defer</span> txMutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  
  balance <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">LoadInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>accountFrom<span class="token punctuation">.</span>Banlance<span class="token punctuation">)</span> <span class="token comment">// 原子操作，读取</span>
  <span class="token keyword">if</span> balance <span class="token operator">&lt;</span> amount <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// step 2</span>
  atomic<span class="token punctuation">.</span><span class="token function">AddInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>accountTo<span class="token punctuation">.</span>Balance<span class="token punctuation">,</span> amount<span class="token punctuation">)</span>        <span class="token comment">// 原子操作 加</span>
  <span class="token comment">// step 3</span>
  atomic<span class="token punctuation">.</span><span class="token function">AddInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>accountFrom<span class="token punctuation">.</span>Balance<span class="token punctuation">,</span> <span class="token operator">-</span>amount<span class="token punctuation">)</span>     <span class="token comment">// 原子操作 减</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h2 id="Mutex-使用"><a href="#Mutex-使用" class="headerlink" title="Mutex 使用"></a>Mutex 使用</h2><ul>
<li>Lock(): 获取锁。</li>
<li>Unlock(): 释放锁。</li>
<li>TryLock(): 尝试获取锁。</li>
</ul>
<p>使用 Mutex 的实例 m 保护<strong>临界区</strong>。当一个 goroutine 想进入临界区时，调用 m.Lock() 获取锁。</p>
<p>如果这个 goroutine 获取了锁，它就持有了锁 m。如果此时 m 被其他 goroutine 锁持有，请求的 goroutine 就会被阻塞，等待其它 goroutine 释放锁。</p>
<p>持有锁的 goroutine 退出临界区时，需要调用 m.UnLock() 释放锁。在 Go 语言中，几时一个 goroutine 没有持有锁，它也可以释放一个 Mutex，但是最好不要这么做！！！<strong>谁持有，谁释放！！！</strong>。</p>
<p><strong>如果直接释放一个未加锁的 Mutex，会直接报 panic</strong>。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestUnLockPanic</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> m sync<span class="token punctuation">.</span>Mutex
  m<span class="token punctuation">.</span><span class="token function">UnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 未加锁的情况下直接强制释放！！！</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>当一个 goroutine 调用 Mutex.Lock() 方法时，如果锁被其它 goroutine 所持有，这个 goroutine 会被阻塞。在某些场景下，我们不想让此 goroutine 阻塞，而是允许它放弃进入临界区去做其它的事情，<strong>这个时候就可以使用 TryLock() 了</strong>。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestTryLock</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> m sync<span class="token punctuation">.</span>Mutex
  <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    m<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    m<span class="token punctuation">.</span><span class="token function">UnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  
  time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
  
  <span class="token comment">// 尝试获取锁，大概率获取不成功</span>
  <span class="token keyword">if</span> m<span class="token punctuation">.</span><span class="token function">TryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">`try lock success`</span><span class="token punctuation">)</span>
    m<span class="token punctuation">.</span><span class="token function">UnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">`try lock failed`</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Mutex 地道的使用方式是使用它的零值，而不是显示初始化一个 Mutex 变量。</p>
<br/>

<p><strong>Go 内置数据竞争检查器（data race detector）</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> <span class="token parameter variable">-race</span> mypackage
go run <span class="token parameter variable">-race</span> main.go
go build <span class="token parameter variable">-race</span> config_server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br/>

<h2 id="Mutex-实现"><a href="#Mutex-实现" class="headerlink" title="Mutex 实现"></a>Mutex 实现</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> sync

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"internal/race"</span>
  <span class="token string">"sync/atomic"</span>
  <span class="token string">"unsafe"</span>
<span class="token punctuation">)</span>

<span class="token comment">// Provided by runtime via linkname.</span>
<span class="token keyword">func</span> <span class="token function">throw</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>

<span class="token comment">// A Mutex is a mutual exclusion lock.</span>
<span class="token comment">// The zero value for a Mutex is an unlocked mutex.</span>
<span class="token comment">//</span>
<span class="token comment">// A Mutex must not be copied after first use.</span>
<span class="token comment">//</span>
<span class="token comment">// In the terminology of the Go memory model,</span>
<span class="token comment">// the n'th call to Unlock “synchronizes before” the m'th call to Lock</span>
<span class="token comment">// for any n &lt; m.</span>
<span class="token comment">// A successful call to TryLock is equivalent to a call to Lock.</span>
<span class="token comment">// A failed call to TryLock does not establish any “synchronizes before”</span>
<span class="token comment">// relation at all.</span>
<span class="token keyword">type</span> Mutex <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  state <span class="token builtin">int32</span>
  sema  <span class="token builtin">uint32</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// A Locker represents an object that can be locked and unlocked.</span>
<span class="token keyword">type</span> Locker <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
  <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
  mutexLocked <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token boolean">iota</span> <span class="token comment">// mutex is locked</span>
  mutexWoken
  mutexStarving
  mutexWaiterShift <span class="token operator">=</span> <span class="token boolean">iota</span>

  <span class="token comment">// Mutex fairness.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Mutex can be in 2 modes of operations: normal and starvation.</span>
  <span class="token comment">// In normal mode waiters are queued in FIFO order, but a woken up waiter</span>
  <span class="token comment">// does not own the mutex and competes with new arriving goroutines over</span>
  <span class="token comment">// the ownership. New arriving goroutines have an advantage -- they are</span>
  <span class="token comment">// already running on CPU and there can be lots of them, so a woken up</span>
  <span class="token comment">// waiter has good chances of losing. In such case it is queued at front</span>
  <span class="token comment">// of the wait queue. If a waiter fails to acquire the mutex for more than 1ms,</span>
  <span class="token comment">// it switches mutex to the starvation mode.</span>
  <span class="token comment">//</span>
  <span class="token comment">// In starvation mode ownership of the mutex is directly handed off from</span>
  <span class="token comment">// the unlocking goroutine to the waiter at the front of the queue.</span>
  <span class="token comment">// New arriving goroutines don't try to acquire the mutex even if it appears</span>
  <span class="token comment">// to be unlocked, and don't try to spin. Instead they queue themselves at</span>
  <span class="token comment">// the tail of the wait queue.</span>
  <span class="token comment">//</span>
  <span class="token comment">// If a waiter receives ownership of the mutex and sees that either</span>
  <span class="token comment">// (1) it is the last waiter in the queue, or (2) it waited for less than 1 ms,</span>
  <span class="token comment">// it switches mutex back to normal operation mode.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Normal mode has considerably better performance as a goroutine can acquire</span>
  <span class="token comment">// a mutex several times in a row even if there are blocked waiters.</span>
  <span class="token comment">// Starvation mode is important to prevent pathological cases of tail latency.</span>
  starvationThresholdNs <span class="token operator">=</span> <span class="token number">1e6</span>
<span class="token punctuation">)</span>

<span class="token comment">// Lock locks m.</span>
<span class="token comment">// If the lock is already in use, the calling goroutine</span>
<span class="token comment">// blocks until the mutex is available.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Mutex<span class="token punctuation">)</span> <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Fast path: grab unlocked mutex.</span>
  <span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mutexLocked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>
      race<span class="token punctuation">.</span><span class="token function">Acquire</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// Slow path (outlined so that the fast path can be inlined)</span>
  m<span class="token punctuation">.</span><span class="token function">lockSlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// TryLock tries to lock m and reports whether it succeeded.</span>
<span class="token comment">//</span>
<span class="token comment">// Note that while correct uses of TryLock do exist, they are rare,</span>
<span class="token comment">// and use of TryLock is often a sign of a deeper problem</span>
<span class="token comment">// in a particular use of mutexes.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Mutex<span class="token punctuation">)</span> <span class="token function">TryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
  old <span class="token operator">:=</span> m<span class="token punctuation">.</span>state
  <span class="token keyword">if</span> old<span class="token operator">&amp;</span><span class="token punctuation">(</span>mutexLocked<span class="token operator">|</span>mutexStarving<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// There may be a goroutine waiting for the mutex, but we are</span>
  <span class="token comment">// running now and can try to grab the mutex before that</span>
  <span class="token comment">// goroutine wakes up.</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>state<span class="token punctuation">,</span> old<span class="token punctuation">,</span> old<span class="token operator">|</span>mutexLocked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>
    race<span class="token punctuation">.</span><span class="token function">Acquire</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Mutex<span class="token punctuation">)</span> <span class="token function">lockSlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> waitStartTime <span class="token builtin">int64</span>
  starving <span class="token operator">:=</span> <span class="token boolean">false</span>
  awoke <span class="token operator">:=</span> <span class="token boolean">false</span>
  iter <span class="token operator">:=</span> <span class="token number">0</span>
  old <span class="token operator">:=</span> m<span class="token punctuation">.</span>state
  <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Don't spin in starvation mode, ownership is handed off to waiters</span>
    <span class="token comment">// so we won't be able to acquire the mutex anyway.</span>
    <span class="token keyword">if</span> old<span class="token operator">&amp;</span><span class="token punctuation">(</span>mutexLocked<span class="token operator">|</span>mutexStarving<span class="token punctuation">)</span> <span class="token operator">==</span> mutexLocked <span class="token operator">&amp;&amp;</span> <span class="token function">runtime_canSpin</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Active spinning makes sense.</span>
      <span class="token comment">// Try to set mutexWoken flag to inform Unlock</span>
      <span class="token comment">// to not wake other blocked goroutines.</span>
      <span class="token keyword">if</span> <span class="token operator">!</span>awoke <span class="token operator">&amp;&amp;</span> old<span class="token operator">&amp;</span>mutexWoken <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> old<span class="token operator">>></span>mutexWaiterShift <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
        atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>state<span class="token punctuation">,</span> old<span class="token punctuation">,</span> old<span class="token operator">|</span>mutexWoken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        awoke <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token punctuation">&#125;</span>
      <span class="token function">runtime_doSpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      iter<span class="token operator">++</span>
      old <span class="token operator">=</span> m<span class="token punctuation">.</span>state
      <span class="token keyword">continue</span>
    <span class="token punctuation">&#125;</span>
    <span class="token builtin">new</span> <span class="token operator">:=</span> old
    <span class="token comment">// Don't try to acquire starving mutex, new arriving goroutines must queue.</span>
    <span class="token keyword">if</span> old<span class="token operator">&amp;</span>mutexStarving <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
      <span class="token builtin">new</span> <span class="token operator">|=</span> mutexLocked
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> old<span class="token operator">&amp;</span><span class="token punctuation">(</span>mutexLocked<span class="token operator">|</span>mutexStarving<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
      <span class="token builtin">new</span> <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> mutexWaiterShift
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// The current goroutine switches mutex to starvation mode.</span>
    <span class="token comment">// But if the mutex is currently unlocked, don't do the switch.</span>
    <span class="token comment">// Unlock expects that starving mutex has waiters, which will not</span>
    <span class="token comment">// be true in this case.</span>
    <span class="token keyword">if</span> starving <span class="token operator">&amp;&amp;</span> old<span class="token operator">&amp;</span>mutexLocked <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
      <span class="token builtin">new</span> <span class="token operator">|=</span> mutexStarving
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> awoke <span class="token punctuation">&#123;</span>
      <span class="token comment">// The goroutine has been woken from sleep,</span>
      <span class="token comment">// so we need to reset the flag in either case.</span>
      <span class="token keyword">if</span> <span class="token builtin">new</span><span class="token operator">&amp;</span>mutexWoken <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"sync: inconsistent mutex state"</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token builtin">new</span> <span class="token operator">&amp;^=</span> mutexWoken
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>state<span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> old<span class="token operator">&amp;</span><span class="token punctuation">(</span>mutexLocked<span class="token operator">|</span>mutexStarving<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">break</span> <span class="token comment">// locked the mutex with CAS</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">// If we were already waiting before, queue at the front of the queue.</span>
      queueLifo <span class="token operator">:=</span> waitStartTime <span class="token operator">!=</span> <span class="token number">0</span>
      <span class="token keyword">if</span> waitStartTime <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        waitStartTime <span class="token operator">=</span> <span class="token function">runtime_nanotime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token function">runtime_SemacquireMutex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>sema<span class="token punctuation">,</span> queueLifo<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
      starving <span class="token operator">=</span> starving <span class="token operator">||</span> <span class="token function">runtime_nanotime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>waitStartTime <span class="token operator">></span> starvationThresholdNs
      old <span class="token operator">=</span> m<span class="token punctuation">.</span>state
      <span class="token keyword">if</span> old<span class="token operator">&amp;</span>mutexStarving <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// If this goroutine was woken and mutex is in starvation mode,</span>
        <span class="token comment">// ownership was handed off to us but mutex is in somewhat</span>
        <span class="token comment">// inconsistent state: mutexLocked is not set and we are still</span>
        <span class="token comment">// accounted as waiter. Fix that.</span>
        <span class="token keyword">if</span> old<span class="token operator">&amp;</span><span class="token punctuation">(</span>mutexLocked<span class="token operator">|</span>mutexWoken<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> old<span class="token operator">>></span>mutexWaiterShift <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
          <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"sync: inconsistent mutex state"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        delta <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span>mutexLocked <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>mutexWaiterShift<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token operator">!</span>starving <span class="token operator">||</span> old<span class="token operator">>></span>mutexWaiterShift <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>
          <span class="token comment">// Exit starvation mode.</span>
          <span class="token comment">// Critical to do it here and consider wait time.</span>
          <span class="token comment">// Starvation mode is so inefficient, that two goroutines</span>
          <span class="token comment">// can go lock-step infinitely once they switch mutex</span>
          <span class="token comment">// to starvation mode.</span>
          delta <span class="token operator">-=</span> mutexStarving
        <span class="token punctuation">&#125;</span>
        atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>state<span class="token punctuation">,</span> delta<span class="token punctuation">)</span>
        <span class="token keyword">break</span>
      <span class="token punctuation">&#125;</span>
      awoke <span class="token operator">=</span> <span class="token boolean">true</span>
      iter <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      old <span class="token operator">=</span> m<span class="token punctuation">.</span>state
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>
    race<span class="token punctuation">.</span><span class="token function">Acquire</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Unlock unlocks m.</span>
<span class="token comment">// It is a run-time error if m is not locked on entry to Unlock.</span>
<span class="token comment">//</span>
<span class="token comment">// A locked Mutex is not associated with a particular goroutine.</span>
<span class="token comment">// It is allowed for one goroutine to lock a Mutex and then</span>
<span class="token comment">// arrange for another goroutine to unlock it.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Mutex<span class="token punctuation">)</span> <span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>
    <span class="token boolean">_</span> <span class="token operator">=</span> m<span class="token punctuation">.</span>state
    race<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// Fast path: drop lock bit.</span>
  <span class="token builtin">new</span> <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token operator">-</span>mutexLocked<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token builtin">new</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Outlined slow path to allow inlining the fast path.</span>
    <span class="token comment">// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.</span>
    m<span class="token punctuation">.</span><span class="token function">unlockSlow</span><span class="token punctuation">(</span><span class="token builtin">new</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Mutex<span class="token punctuation">)</span> <span class="token function">unlockSlow</span><span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">new</span><span class="token operator">+</span>mutexLocked<span class="token punctuation">)</span><span class="token operator">&amp;</span>mutexLocked <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"sync: unlock of unlocked mutex"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token builtin">new</span><span class="token operator">&amp;</span>mutexStarving <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    old <span class="token operator">:=</span> <span class="token builtin">new</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// If there are no waiters or a goroutine has already</span>
      <span class="token comment">// been woken or grabbed the lock, no need to wake anyone.</span>
      <span class="token comment">// In starvation mode ownership is directly handed off from unlocking</span>
      <span class="token comment">// goroutine to the next waiter. We are not part of this chain,</span>
      <span class="token comment">// since we did not observe mutexStarving when we unlocked the mutex above.</span>
      <span class="token comment">// So get off the way.</span>
      <span class="token keyword">if</span> old<span class="token operator">>></span>mutexWaiterShift <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> old<span class="token operator">&amp;</span><span class="token punctuation">(</span>mutexLocked<span class="token operator">|</span>mutexWoken<span class="token operator">|</span>mutexStarving<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">// Grab the right to wake someone.</span>
      <span class="token builtin">new</span> <span class="token operator">=</span> <span class="token punctuation">(</span>old <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>mutexWaiterShift<span class="token punctuation">)</span> <span class="token operator">|</span> mutexWoken
      <span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>state<span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">runtime_Semrelease</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>sema<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">&#125;</span>
      old <span class="token operator">=</span> m<span class="token punctuation">.</span>state
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Starving mode: handoff mutex ownership to the next waiter, and yield</span>
    <span class="token comment">// our time slice so that the next waiter can start to run immediately.</span>
    <span class="token comment">// Note: mutexLocked is not set, the waiter will set it after wakeup.</span>
    <span class="token comment">// But mutex is still considered locked if mutexStarving is set,</span>
    <span class="token comment">// so new coming goroutines won't acquire it.</span>
    <span class="token function">runtime_Semrelease</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>sema<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h2 id="使用原则"><a href="#使用原则" class="headerlink" title="使用原则"></a>使用原则</h2><p>1、谁持有，谁释放。保证 goroutine 不要去释放自己未持有的锁。</p>
<p>2、mutex 无需初始化，优雅使用默认零值。</p>
<p>3、生产环境中，一旦发现 go 程序僵住，利用 pprof groutine 检查。</p>
<p>4、Mutex 不支持锁重入，不要锁上加锁。</p>
<p>5、Mutex 进行封装，作为某个结构体的成员变量，实现相应的线程安全的数据结构。</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程篇（18） 限流</title>
    <url>/2024/01/17/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87%EF%BC%8818%EF%BC%89%20%E9%99%90%E6%B5%81/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他 go 并发编程知识学习的汇总，持续完善中。</p>
<br/>



<h2 id="令牌桶（Token-Bucket）限流算法"><a href="#令牌桶（Token-Bucket）限流算法" class="headerlink" title="令牌桶（Token Bucket）限流算法"></a>令牌桶（Token Bucket）限流算法</h2><p>令牌桶算法是网络流量整形和速率限制中最常用的一种算法。</p>
<p><strong>实现思路：</strong></p>
<p>（1）大小固定的令牌桶，以恒定的速率源源不断的产生令牌 token。</p>
<p>（2）如果令牌不被消耗，或者说令牌产生速率 &gt; 令牌被消费的速率，令牌就会不断堆积，直到令牌桶填满。后面产生的令牌会从令牌桶溢出。</p>
<p>（3）对于请求，一个请求消耗一个令牌，可以根据权重设置一个请求所消耗的令牌数量。</p>
<p>（4）当令牌桶中的令牌少于请求的令牌时，不会删除令牌，请求被丢弃或者做其他返回。</p>
<p>可以看出，令牌桶能应对于突发的大量请求，它们都能获得令牌，而后面来的请求能做有效格挡。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>基于 <code>golang.org/x/time/rate</code> 和 <code>Redis</code> 实现令牌桶算法:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"context"</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"strconv"</span>
    <span class="token string">"time"</span>

    <span class="token string">"github.com/go-redis/redis/v9"</span>
    <span class="token string">"golang.org/x/time/rate"</span>
<span class="token punctuation">)</span>

<span class="token comment">// TokenBucket 定义分布式令牌桶结构体</span>
<span class="token keyword">type</span> TokenBucket <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    client     <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client
    key        <span class="token builtin">string</span>
    limiter    <span class="token operator">*</span>rate<span class="token punctuation">.</span>Limiter
    lastUpdate time<span class="token punctuation">.</span>Time
<span class="token punctuation">&#125;</span>

<span class="token comment">// NewTokenBucket 创建一个新的分布式令牌桶</span>
<span class="token keyword">func</span> <span class="token function">NewTokenBucket</span><span class="token punctuation">(</span>client <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> r rate<span class="token punctuation">.</span>Limit<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>TokenBucket <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>TokenBucket<span class="token punctuation">&#123;</span>
        client<span class="token punctuation">:</span>     client<span class="token punctuation">,</span>
        key<span class="token punctuation">:</span>        key<span class="token punctuation">,</span>
        limiter<span class="token punctuation">:</span>    rate<span class="token punctuation">.</span><span class="token function">NewLimiter</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span>
        lastUpdate<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Allow 判断请求是否允许通过</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>tb <span class="token operator">*</span>TokenBucket<span class="token punctuation">)</span> <span class="token function">Allow</span><span class="token punctuation">(</span>tokens <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
    ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    elapsed <span class="token operator">:=</span> now<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>tb<span class="token punctuation">.</span>lastUpdate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    tb<span class="token punctuation">.</span>lastUpdate <span class="token operator">=</span> now

    <span class="token comment">// 计算应添加的令牌数量</span>
    addedTokens <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>elapsed <span class="token operator">*</span> <span class="token function">float64</span><span class="token punctuation">(</span>tb<span class="token punctuation">.</span>limiter<span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// 从 Redis 获取当前令牌数量</span>
    currentTokensStr<span class="token punctuation">,</span> err <span class="token operator">:=</span> tb<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> tb<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> currentTokens <span class="token builtin">int</span>
    <span class="token keyword">if</span> err <span class="token operator">==</span> redis<span class="token punctuation">.</span>Nil <span class="token punctuation">&#123;</span>
        currentTokens <span class="token operator">=</span> tb<span class="token punctuation">.</span>limiter<span class="token punctuation">.</span><span class="token function">Burst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Error getting tokens from Redis: %v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        currentTokens<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>currentTokensStr<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 计算新的令牌数量</span>
    newTokens <span class="token operator">:=</span> currentTokens <span class="token operator">+</span> addedTokens
    <span class="token keyword">if</span> newTokens <span class="token operator">></span> tb<span class="token punctuation">.</span>limiter<span class="token punctuation">.</span><span class="token function">Burst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        newTokens <span class="token operator">=</span> tb<span class="token punctuation">.</span>limiter<span class="token punctuation">.</span><span class="token function">Burst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 判断是否有足够的令牌</span>
    <span class="token keyword">if</span> newTokens <span class="token operator">&lt;</span> tokens <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 更新 Redis 中的令牌数量</span>
    newTokens <span class="token operator">-=</span> tokens
    err <span class="token operator">=</span> tb<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> tb<span class="token punctuation">.</span>key<span class="token punctuation">,</span> newTokens<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Error updating tokens in Redis: %v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 连接 Redis</span>
    client <span class="token operator">:=</span> redis<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>Options<span class="token punctuation">&#123;</span>
        Addr<span class="token punctuation">:</span>     <span class="token string">"localhost:6379"</span><span class="token punctuation">,</span>
        Password<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
        DB<span class="token punctuation">:</span>       <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

    <span class="token comment">// 创建一个分布式令牌桶</span>
    tb <span class="token operator">:=</span> <span class="token function">NewTokenBucket</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token string">"distributed_token_bucket"</span><span class="token punctuation">,</span> rate<span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>

    <span class="token comment">// 模拟请求</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> tb<span class="token punctuation">.</span><span class="token function">Allow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Request %d allowed\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Request %d blocked\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><code>golang.org/x/time/rate</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Copyright 2015 The Go Authors. All rights reserved.</span>
<span class="token comment">// Use of this source code is governed by a BSD-style</span>
<span class="token comment">// license that can be found in the LICENSE file.</span>

<span class="token comment">// Package rate provides a rate limiter.</span>
<span class="token keyword">package</span> rate

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"context"</span>
  <span class="token string">"fmt"</span>
  <span class="token string">"math"</span>
  <span class="token string">"sync"</span>
  <span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token comment">// Limit defines the maximum frequency of some events.</span>
<span class="token comment">// Limit is represented as number of events per second.</span>
<span class="token comment">// A zero Limit allows no events.</span>
<span class="token keyword">type</span> Limit <span class="token builtin">float64</span>

<span class="token comment">// Inf is the infinite rate limit; it allows all events (even if burst is zero).</span>
<span class="token keyword">const</span> Inf <span class="token operator">=</span> <span class="token function">Limit</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>MaxFloat64<span class="token punctuation">)</span>

<span class="token comment">// Every converts a minimum time interval between events to a Limit.</span>
<span class="token keyword">func</span> <span class="token function">Every</span><span class="token punctuation">(</span>interval time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> Limit <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> interval <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> Inf
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token function">Limit</span><span class="token punctuation">(</span>interval<span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// A Limiter controls how frequently events are allowed to happen.</span>
<span class="token comment">// It implements a "token bucket" of size b, initially full and refilled</span>
<span class="token comment">// at rate r tokens per second.</span>
<span class="token comment">// Informally, in any large enough time interval, the Limiter limits the</span>
<span class="token comment">// rate to r tokens per second, with a maximum burst size of b events.</span>
<span class="token comment">// As a special case, if r == Inf (the infinite rate), b is ignored.</span>
<span class="token comment">// See https://en.wikipedia.org/wiki/Token_bucket for more about token buckets.</span>
<span class="token comment">//</span>
<span class="token comment">// The zero value is a valid Limiter, but it will reject all events.</span>
<span class="token comment">// Use NewLimiter to create non-zero Limiters.</span>
<span class="token comment">//</span>
<span class="token comment">// Limiter has three main methods, Allow, Reserve, and Wait.</span>
<span class="token comment">// Most callers should use Wait.</span>
<span class="token comment">//</span>
<span class="token comment">// Each of the three methods consumes a single token.</span>
<span class="token comment">// They differ in their behavior when no token is available.</span>
<span class="token comment">// If no token is available, Allow returns false.</span>
<span class="token comment">// If no token is available, Reserve returns a reservation for a future token</span>
<span class="token comment">// and the amount of time the caller must wait before using it.</span>
<span class="token comment">// If no token is available, Wait blocks until one can be obtained</span>
<span class="token comment">// or its associated context.Context is canceled.</span>
<span class="token comment">//</span>
<span class="token comment">// The methods AllowN, ReserveN, and WaitN consume n tokens.</span>
<span class="token comment">//</span>
<span class="token comment">// Limiter is safe for simultaneous use by multiple goroutines.</span>
<span class="token keyword">type</span> Limiter <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  mu     sync<span class="token punctuation">.</span>Mutex
  limit  Limit
  burst  <span class="token builtin">int</span>
  tokens <span class="token builtin">float64</span>
  <span class="token comment">// last is the last time the limiter's tokens field was updated</span>
  last time<span class="token punctuation">.</span>Time
  <span class="token comment">// lastEvent is the latest time of a rate-limited event (past or future)</span>
  lastEvent time<span class="token punctuation">.</span>Time
<span class="token punctuation">&#125;</span>

<span class="token comment">// Limit returns the maximum overall event rate.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">Limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Limit <span class="token punctuation">&#123;</span>
  lim<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">defer</span> lim<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> lim<span class="token punctuation">.</span>limit
<span class="token punctuation">&#125;</span>

<span class="token comment">// Burst returns the maximum burst size. Burst is the maximum number of tokens</span>
<span class="token comment">// that can be consumed in a single call to Allow, Reserve, or Wait, so higher</span>
<span class="token comment">// Burst values allow more events to happen at once.</span>
<span class="token comment">// A zero Burst allows no events, unless limit == Inf.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">Burst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
  lim<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">defer</span> lim<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> lim<span class="token punctuation">.</span>burst
<span class="token punctuation">&#125;</span>

<span class="token comment">// TokensAt returns the number of tokens available at time t.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">TokensAt</span><span class="token punctuation">(</span>t time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
  lim<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  tokens <span class="token operator">:=</span> lim<span class="token punctuation">.</span><span class="token function">advance</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token comment">// does not mutate lim</span>
  lim<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> tokens
<span class="token punctuation">&#125;</span>

<span class="token comment">// Tokens returns the number of tokens available now.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">Tokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> lim<span class="token punctuation">.</span><span class="token function">TokensAt</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// NewLimiter returns a new Limiter that allows events up to rate r and permits</span>
<span class="token comment">// bursts of at most b tokens.</span>
<span class="token keyword">func</span> <span class="token function">NewLimiter</span><span class="token punctuation">(</span>r Limit<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Limiter <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>Limiter<span class="token punctuation">&#123;</span>
    limit<span class="token punctuation">:</span>  r<span class="token punctuation">,</span>
    burst<span class="token punctuation">:</span>  b<span class="token punctuation">,</span>
    tokens<span class="token punctuation">:</span> <span class="token function">float64</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Allow reports whether an event may happen now.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">Allow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> lim<span class="token punctuation">.</span><span class="token function">AllowN</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// AllowN reports whether n events may happen at time t.</span>
<span class="token comment">// Use this method if you intend to drop / skip events that exceed the rate limit.</span>
<span class="token comment">// Otherwise use Reserve or Wait.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">AllowN</span><span class="token punctuation">(</span>t time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> lim<span class="token punctuation">.</span><span class="token function">reserveN</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ok
<span class="token punctuation">&#125;</span>

<span class="token comment">// A Reservation holds information about events that are permitted by a Limiter to happen after a delay.</span>
<span class="token comment">// A Reservation may be canceled, which may enable the Limiter to permit additional events.</span>
<span class="token keyword">type</span> Reservation <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  ok        <span class="token builtin">bool</span>
  lim       <span class="token operator">*</span>Limiter
  tokens    <span class="token builtin">int</span>
  timeToAct time<span class="token punctuation">.</span>Time
  <span class="token comment">// This is the Limit at reservation time, it can change later.</span>
  limit Limit
<span class="token punctuation">&#125;</span>

<span class="token comment">// OK returns whether the limiter can provide the requested number of tokens</span>
<span class="token comment">// within the maximum wait time.  If OK is false, Delay returns InfDuration, and</span>
<span class="token comment">// Cancel does nothing.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Reservation<span class="token punctuation">)</span> <span class="token function">OK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> r<span class="token punctuation">.</span>ok
<span class="token punctuation">&#125;</span>

<span class="token comment">// Delay is shorthand for DelayFrom(time.Now()).</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Reservation<span class="token punctuation">)</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>Duration <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">DelayFrom</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// InfDuration is the duration returned by Delay when a Reservation is not OK.</span>
<span class="token keyword">const</span> InfDuration <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>MaxInt64<span class="token punctuation">)</span>

<span class="token comment">// DelayFrom returns the duration for which the reservation holder must wait</span>
<span class="token comment">// before taking the reserved action.  Zero duration means act immediately.</span>
<span class="token comment">// InfDuration means the limiter cannot grant the tokens requested in this</span>
<span class="token comment">// Reservation within the maximum wait time.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Reservation<span class="token punctuation">)</span> <span class="token function">DelayFrom</span><span class="token punctuation">(</span>t time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> time<span class="token punctuation">.</span>Duration <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>r<span class="token punctuation">.</span>ok <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> InfDuration
  <span class="token punctuation">&#125;</span>
  delay <span class="token operator">:=</span> r<span class="token punctuation">.</span>timeToAct<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
  <span class="token keyword">if</span> delay <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> delay
<span class="token punctuation">&#125;</span>

<span class="token comment">// Cancel is shorthand for CancelAt(time.Now()).</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Reservation<span class="token punctuation">)</span> <span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  r<span class="token punctuation">.</span><span class="token function">CancelAt</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// CancelAt indicates that the reservation holder will not perform the reserved action</span>
<span class="token comment">// and reverses the effects of this Reservation on the rate limit as much as possible,</span>
<span class="token comment">// considering that other reservations may have already been made.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Reservation<span class="token punctuation">)</span> <span class="token function">CancelAt</span><span class="token punctuation">(</span>t time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>r<span class="token punctuation">.</span>ok <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  r<span class="token punctuation">.</span>lim<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">defer</span> r<span class="token punctuation">.</span>lim<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> r<span class="token punctuation">.</span>lim<span class="token punctuation">.</span>limit <span class="token operator">==</span> Inf <span class="token operator">||</span> r<span class="token punctuation">.</span>tokens <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> r<span class="token punctuation">.</span>timeToAct<span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// calculate tokens to restore</span>
  <span class="token comment">// The duration between lim.lastEvent and r.timeToAct tells us how many tokens were reserved</span>
  <span class="token comment">// after r was obtained. These tokens should not be restored.</span>
  restoreTokens <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>tokens<span class="token punctuation">)</span> <span class="token operator">-</span> r<span class="token punctuation">.</span>limit<span class="token punctuation">.</span><span class="token function">tokensFromDuration</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>lim<span class="token punctuation">.</span>lastEvent<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>timeToAct<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> restoreTokens <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// advance time to now</span>
  tokens <span class="token operator">:=</span> r<span class="token punctuation">.</span>lim<span class="token punctuation">.</span><span class="token function">advance</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
  <span class="token comment">// calculate new number of tokens</span>
  tokens <span class="token operator">+=</span> restoreTokens
  <span class="token keyword">if</span> burst <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>lim<span class="token punctuation">.</span>burst<span class="token punctuation">)</span><span class="token punctuation">;</span> tokens <span class="token operator">></span> burst <span class="token punctuation">&#123;</span>
    tokens <span class="token operator">=</span> burst
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// update state</span>
  r<span class="token punctuation">.</span>lim<span class="token punctuation">.</span>last <span class="token operator">=</span> t
  r<span class="token punctuation">.</span>lim<span class="token punctuation">.</span>tokens <span class="token operator">=</span> tokens
  <span class="token keyword">if</span> r<span class="token punctuation">.</span>timeToAct <span class="token operator">==</span> r<span class="token punctuation">.</span>lim<span class="token punctuation">.</span>lastEvent <span class="token punctuation">&#123;</span>
    prevEvent <span class="token operator">:=</span> r<span class="token punctuation">.</span>timeToAct<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>limit<span class="token punctuation">.</span><span class="token function">durationFromTokens</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span><span class="token operator">-</span>r<span class="token punctuation">.</span>tokens<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>prevEvent<span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      r<span class="token punctuation">.</span>lim<span class="token punctuation">.</span>lastEvent <span class="token operator">=</span> prevEvent
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Reserve is shorthand for ReserveN(time.Now(), 1).</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">Reserve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Reservation <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> lim<span class="token punctuation">.</span><span class="token function">ReserveN</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ReserveN returns a Reservation that indicates how long the caller must wait before n events happen.</span>
<span class="token comment">// The Limiter takes this Reservation into account when allowing future events.</span>
<span class="token comment">// The returned Reservation’s OK() method returns false if n exceeds the Limiter's burst size.</span>
<span class="token comment">// Usage example:</span>
<span class="token comment">//</span>
<span class="token comment">//	r := lim.ReserveN(time.Now(), 1)</span>
<span class="token comment">//	if !r.OK() &#123;</span>
<span class="token comment">//	  // Not allowed to act! Did you remember to set lim.burst to be > 0 ?</span>
<span class="token comment">//	  return</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//	time.Sleep(r.Delay())</span>
<span class="token comment">//	Act()</span>
<span class="token comment">//</span>
<span class="token comment">// Use this method if you wish to wait and slow down in accordance with the rate limit without dropping events.</span>
<span class="token comment">// If you need to respect a deadline or cancel the delay, use Wait instead.</span>
<span class="token comment">// To drop or skip events exceeding rate limit, use Allow instead.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">ReserveN</span><span class="token punctuation">(</span>t time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Reservation <span class="token punctuation">&#123;</span>
  r <span class="token operator">:=</span> lim<span class="token punctuation">.</span><span class="token function">reserveN</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> InfDuration<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>r
<span class="token punctuation">&#125;</span>

<span class="token comment">// Wait is shorthand for WaitN(ctx, 1).</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">Wait</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> lim<span class="token punctuation">.</span><span class="token function">WaitN</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// WaitN blocks until lim permits n events to happen.</span>
<span class="token comment">// It returns an error if n exceeds the Limiter's burst size, the Context is</span>
<span class="token comment">// canceled, or the expected wait time exceeds the Context's Deadline.</span>
<span class="token comment">// The burst limit is ignored if the rate limit is Inf.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">WaitN</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// The test code calls lim.wait with a fake timer generator.</span>
  <span class="token comment">// This is the real timer generator.</span>
  newTimer <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>d time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">&lt;-</span><span class="token keyword">chan</span> time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    timer <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
    <span class="token keyword">return</span> timer<span class="token punctuation">.</span>C<span class="token punctuation">,</span> timer<span class="token punctuation">.</span>Stop<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> lim<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> n<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newTimer<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// wait is the internal implementation of WaitN.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">wait</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">,</span> t time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> newTimer <span class="token keyword">func</span><span class="token punctuation">(</span>d time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">&lt;-</span><span class="token keyword">chan</span> time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
  lim<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  burst <span class="token operator">:=</span> lim<span class="token punctuation">.</span>burst
  limit <span class="token operator">:=</span> lim<span class="token punctuation">.</span>limit
  lim<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> n <span class="token operator">></span> burst <span class="token operator">&amp;&amp;</span> limit <span class="token operator">!=</span> Inf <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"rate: Wait(n=%d) exceeds limiter's burst %d"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> burst<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// Check if ctx is already cancelled</span>
  <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">default</span><span class="token punctuation">:</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// Determine wait limit</span>
  waitLimit <span class="token operator">:=</span> InfDuration
  <span class="token keyword">if</span> deadline<span class="token punctuation">,</span> ok <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
    waitLimit <span class="token operator">=</span> deadline<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// Reserve</span>
  r <span class="token operator">:=</span> lim<span class="token punctuation">.</span><span class="token function">reserveN</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> waitLimit<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>r<span class="token punctuation">.</span>ok <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"rate: Wait(n=%d) would exceed context deadline"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// Wait if necessary</span>
  delay <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">DelayFrom</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
  <span class="token keyword">if</span> delay <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
  <span class="token punctuation">&#125;</span>
  ch<span class="token punctuation">,</span> stop<span class="token punctuation">,</span> advance <span class="token operator">:=</span> <span class="token function">newTimer</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
  <span class="token keyword">defer</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">advance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// only has an effect when testing</span>
  <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>
    <span class="token comment">// We can proceed.</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
  <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">// Context was canceled before we could proceed.  Cancel the</span>
    <span class="token comment">// reservation, which may permit other events to proceed sooner.</span>
    r<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// SetLimit is shorthand for SetLimitAt(time.Now(), newLimit).</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">SetLimit</span><span class="token punctuation">(</span>newLimit Limit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lim<span class="token punctuation">.</span><span class="token function">SetLimitAt</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newLimit<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// SetLimitAt sets a new Limit for the limiter. The new Limit, and Burst, may be violated</span>
<span class="token comment">// or underutilized by those which reserved (using Reserve or Wait) but did not yet act</span>
<span class="token comment">// before SetLimitAt was called.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">SetLimitAt</span><span class="token punctuation">(</span>t time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> newLimit Limit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lim<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">defer</span> lim<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  tokens <span class="token operator">:=</span> lim<span class="token punctuation">.</span><span class="token function">advance</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>

  lim<span class="token punctuation">.</span>last <span class="token operator">=</span> t
  lim<span class="token punctuation">.</span>tokens <span class="token operator">=</span> tokens
  lim<span class="token punctuation">.</span>limit <span class="token operator">=</span> newLimit
<span class="token punctuation">&#125;</span>

<span class="token comment">// SetBurst is shorthand for SetBurstAt(time.Now(), newBurst).</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">SetBurst</span><span class="token punctuation">(</span>newBurst <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lim<span class="token punctuation">.</span><span class="token function">SetBurstAt</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newBurst<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// SetBurstAt sets a new burst size for the limiter.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">SetBurstAt</span><span class="token punctuation">(</span>t time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> newBurst <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lim<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">defer</span> lim<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  tokens <span class="token operator">:=</span> lim<span class="token punctuation">.</span><span class="token function">advance</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>

  lim<span class="token punctuation">.</span>last <span class="token operator">=</span> t
  lim<span class="token punctuation">.</span>tokens <span class="token operator">=</span> tokens
  lim<span class="token punctuation">.</span>burst <span class="token operator">=</span> newBurst
<span class="token punctuation">&#125;</span>

<span class="token comment">// reserveN is a helper method for AllowN, ReserveN, and WaitN.</span>
<span class="token comment">// maxFutureReserve specifies the maximum reservation wait duration allowed.</span>
<span class="token comment">// reserveN returns Reservation, not *Reservation, to avoid allocation in AllowN and WaitN.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">reserveN</span><span class="token punctuation">(</span>t time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">,</span> maxFutureReserve time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> Reservation <span class="token punctuation">&#123;</span>
  lim<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">defer</span> lim<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> lim<span class="token punctuation">.</span>limit <span class="token operator">==</span> Inf <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> Reservation<span class="token punctuation">&#123;</span>
      ok<span class="token punctuation">:</span>        <span class="token boolean">true</span><span class="token punctuation">,</span>
      lim<span class="token punctuation">:</span>       lim<span class="token punctuation">,</span>
      tokens<span class="token punctuation">:</span>    n<span class="token punctuation">,</span>
      timeToAct<span class="token punctuation">:</span> t<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  tokens <span class="token operator">:=</span> lim<span class="token punctuation">.</span><span class="token function">advance</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>

  <span class="token comment">// Calculate the remaining number of tokens resulting from the request.</span>
  tokens <span class="token operator">-=</span> <span class="token function">float64</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>

  <span class="token comment">// Calculate the wait duration</span>
  <span class="token keyword">var</span> waitDuration time<span class="token punctuation">.</span>Duration
  <span class="token keyword">if</span> tokens <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    waitDuration <span class="token operator">=</span> lim<span class="token punctuation">.</span>limit<span class="token punctuation">.</span><span class="token function">durationFromTokens</span><span class="token punctuation">(</span><span class="token operator">-</span>tokens<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// Decide result</span>
  ok <span class="token operator">:=</span> n <span class="token operator">&lt;=</span> lim<span class="token punctuation">.</span>burst <span class="token operator">&amp;&amp;</span> waitDuration <span class="token operator">&lt;=</span> maxFutureReserve

  <span class="token comment">// Prepare reservation</span>
  r <span class="token operator">:=</span> Reservation<span class="token punctuation">&#123;</span>
    ok<span class="token punctuation">:</span>    ok<span class="token punctuation">,</span>
    lim<span class="token punctuation">:</span>   lim<span class="token punctuation">,</span>
    limit<span class="token punctuation">:</span> lim<span class="token punctuation">.</span>limit<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> ok <span class="token punctuation">&#123;</span>
    r<span class="token punctuation">.</span>tokens <span class="token operator">=</span> n
    r<span class="token punctuation">.</span>timeToAct <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>waitDuration<span class="token punctuation">)</span>

    <span class="token comment">// Update state</span>
    lim<span class="token punctuation">.</span>last <span class="token operator">=</span> t
    lim<span class="token punctuation">.</span>tokens <span class="token operator">=</span> tokens
    lim<span class="token punctuation">.</span>lastEvent <span class="token operator">=</span> r<span class="token punctuation">.</span>timeToAct
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> r
<span class="token punctuation">&#125;</span>

<span class="token comment">// advance calculates and returns an updated number of tokens for lim</span>
<span class="token comment">// resulting from the passage of time.</span>
<span class="token comment">// lim is not changed.</span>
<span class="token comment">// advance requires that lim.mu is held.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lim <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">advance</span><span class="token punctuation">(</span>t time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">(</span>newTokens <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  last <span class="token operator">:=</span> lim<span class="token punctuation">.</span>last
  <span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    last <span class="token operator">=</span> t
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// Calculate the new number of tokens, due to time that passed.</span>
  elapsed <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span>
  delta <span class="token operator">:=</span> lim<span class="token punctuation">.</span>limit<span class="token punctuation">.</span><span class="token function">tokensFromDuration</span><span class="token punctuation">(</span>elapsed<span class="token punctuation">)</span>
  tokens <span class="token operator">:=</span> lim<span class="token punctuation">.</span>tokens <span class="token operator">+</span> delta
  <span class="token keyword">if</span> burst <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>lim<span class="token punctuation">.</span>burst<span class="token punctuation">)</span><span class="token punctuation">;</span> tokens <span class="token operator">></span> burst <span class="token punctuation">&#123;</span>
    tokens <span class="token operator">=</span> burst
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> tokens
<span class="token punctuation">&#125;</span>

<span class="token comment">// durationFromTokens is a unit conversion function from the number of tokens to the duration</span>
<span class="token comment">// of time it takes to accumulate them at a rate of limit tokens per second.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>limit Limit<span class="token punctuation">)</span> <span class="token function">durationFromTokens</span><span class="token punctuation">(</span>tokens <span class="token builtin">float64</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>Duration <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> limit <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> InfDuration
  <span class="token punctuation">&#125;</span>

  duration <span class="token operator">:=</span> <span class="token punctuation">(</span>tokens <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">float64</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>

  <span class="token comment">// Cap the duration to the maximum representable int64 value, to avoid overflow.</span>
  <span class="token keyword">if</span> duration <span class="token operator">></span> <span class="token function">float64</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>MaxInt64<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> InfDuration
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// tokensFromDuration is a unit conversion function from a time duration to the number of tokens</span>
<span class="token comment">// which could be accumulated during that duration at a rate of limit tokens per second.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>limit Limit<span class="token punctuation">)</span> <span class="token function">tokensFromDuration</span><span class="token punctuation">(</span>d time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> limit <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> d<span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">float64</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h2 id="漏桶（Leaky-Bucket）限流算法"><a href="#漏桶（Leaky-Bucket）限流算法" class="headerlink" title="漏桶（Leaky Bucket）限流算法"></a>漏桶（Leaky Bucket）限流算法</h2><p>一个具有一定容量的漏桶，底部有孔，以固定的速率处理请求（水以一定的速率流出）。</p>
<p>调用者以随机的速率向漏桶中放入请求，注入速度可能小于流出速度也可能大于流出速度，也可能存在突发事件，某一时刻有很大的一个流入速度，漏桶算法处理：</p>
<p>如果桶满，后续请求丢弃，漏桶溢出。</p>
<p>如果注入速度总是小于流出速度（入不敷出），请求正常处理。</p>
<p>如果注入速度总是大于流出速度（处理不过来了），后续请求丢弃。</p>
<p>对于突发请求，因为漏桶具备一定缓存总用，所以一定情况下可以削峰填谷，平滑处理。</p>
<p>本质上，漏桶就是一个以固定速率处理请求且带有缓存的队列。</p>
<p><strong>令牌桶算法和漏桶算法的区别：</strong></p>
<p>令牌桶算法能够在限制请求处理速率的同时允许设定的某种程度的并发请求处理；</p>
<p>漏桶算法是强制限制请求的处理速率，任何时刻的突发请求都会进行平滑处理。</p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p><code>uber-go/ratelimit</code></p>
<br/>



<h2 id="限流算法的选择"><a href="#限流算法的选择" class="headerlink" title="限流算法的选择"></a>限流算法的选择</h2><p><strong>漏桶算法</strong>强制限制数据的<strong>输出速率</strong>，平滑突发流量。</p>
<p><strong>令牌桶算法</strong>允许一定程度的<strong>突发流量</strong>（只要桶中有足够令牌）。</p>
<table>
<thead>
<tr>
<th align="left"><strong>特性</strong></th>
<th align="left"><strong>漏桶算法</strong></th>
<th align="left"><strong>令牌桶算法</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"></td>
<td align="left">想象一个底部有固定漏孔的桶，无论流入速率如何，数据（水）都以<strong>恒定速率</strong>从桶底漏出。</td>
<td align="left">系统以固定速率向桶中添加令牌（Token），每个请求需要消耗一个令牌才能被处理。如果桶空，则拒绝或排队请求。</td>
</tr>
<tr>
<td align="left">工作流程对比</td>
<td align="left">1、数据包到达时，放入桶（队列）中。 <br>2、桶以固定速率（如每秒10个包）漏出数据包。 <br>3、如果桶满，新数据包被丢弃或排队（取决于实现）。</td>
<td align="left">1、系统以固定速率（如每秒 10 个）生成令牌并存入桶中，直到桶满。<br>2、请求到达时，消耗一个令牌。若令牌不足，则拒绝请求。<br>3、允许短时间内消耗所有令牌（如突发 100 个请求，只要桶中有 100 个令牌）。</td>
</tr>
<tr>
<td align="left"><strong>速率控制对象</strong></td>
<td align="left">限制<strong>输出速率</strong>（恒定）</td>
<td align="left">限制<strong>平均输入速率</strong>（允许突发）</td>
</tr>
<tr>
<td align="left"><strong>桶的容量</strong></td>
<td align="left">存储待处理的数据包</td>
<td align="left">存储令牌（Token）</td>
</tr>
<tr>
<td align="left"><strong>突发流量处理</strong></td>
<td align="left">无法处理突发，输出速率严格固定</td>
<td align="left">可处理突发（消耗桶内令牌）</td>
</tr>
<tr>
<td align="left"><strong>实现复杂度</strong></td>
<td align="left">较简单（仅需队列和固定速率漏出）</td>
<td align="left">稍复杂（需管理令牌生成和消耗）</td>
</tr>
<tr>
<td align="left"><strong>典型应用</strong></td>
<td align="left">流量整形（如视频流平滑）</td>
<td align="left">速率限制（如 API 限流\Redis 限流）</td>
</tr>
</tbody></table>
<br/>

<h2 id="分布式限流"><a href="#分布式限流" class="headerlink" title="分布式限流"></a>分布式限流</h2><h3 id="基于漏桶算法的-Redis-限流"><a href="#基于漏桶算法的-Redis-限流" class="headerlink" title="基于漏桶算法的 Redis 限流"></a>基于漏桶算法的 Redis 限流</h3><p><code>go-redis/redis_rate</code></p>
<div class="tabs" id="redis-rate"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#redis-rate-1">redis_rate</button></li><li class="tab"><button type="button" data-href="#redis-rate-2">redis_rate Example</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="redis-rate-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> redis_rate

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"context"</span>
  <span class="token string">"fmt"</span>
  <span class="token string">"strconv"</span>
  <span class="token string">"time"</span>

  <span class="token string">"github.com/redis/go-redis/v9"</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> redisPrefix <span class="token operator">=</span> <span class="token string">"rate:"</span>

<span class="token keyword">type</span> rediser <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
  <span class="token function">Eval</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> script <span class="token builtin">string</span><span class="token punctuation">,</span> keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">*</span>redis<span class="token punctuation">.</span>Cmd
  <span class="token function">EvalSha</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> sha1 <span class="token builtin">string</span><span class="token punctuation">,</span> keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">*</span>redis<span class="token punctuation">.</span>Cmd
  <span class="token function">ScriptExists</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> hashes <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>redis<span class="token punctuation">.</span>BoolSliceCmd
  <span class="token function">ScriptLoad</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> script <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>redis<span class="token punctuation">.</span>StringCmd
  <span class="token function">Del</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> keys <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>redis<span class="token punctuation">.</span>IntCmd

  <span class="token function">EvalRO</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> script <span class="token builtin">string</span><span class="token punctuation">,</span> keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">*</span>redis<span class="token punctuation">.</span>Cmd
  <span class="token function">EvalShaRO</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> sha1 <span class="token builtin">string</span><span class="token punctuation">,</span> keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">*</span>redis<span class="token punctuation">.</span>Cmd
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Limit <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  Rate   <span class="token builtin">int</span>
  Burst  <span class="token builtin">int</span>
  Period time<span class="token punctuation">.</span>Duration
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>l Limit<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d req/%s (burst %d)"</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>Rate<span class="token punctuation">,</span> <span class="token function">fmtDur</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>Period<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>Burst<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>l Limit<span class="token punctuation">)</span> <span class="token function">IsZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> l <span class="token operator">==</span> Limit<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">fmtDur</span><span class="token punctuation">(</span>d time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> d <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">"s"</span>
  <span class="token keyword">case</span> time<span class="token punctuation">.</span>Minute<span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">"m"</span>
  <span class="token keyword">case</span> time<span class="token punctuation">.</span>Hour<span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">"h"</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> d<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">PerSecond</span><span class="token punctuation">(</span>rate <span class="token builtin">int</span><span class="token punctuation">)</span> Limit <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> Limit<span class="token punctuation">&#123;</span>
    Rate<span class="token punctuation">:</span>   rate<span class="token punctuation">,</span>
    Period<span class="token punctuation">:</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
    Burst<span class="token punctuation">:</span>  rate<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">PerMinute</span><span class="token punctuation">(</span>rate <span class="token builtin">int</span><span class="token punctuation">)</span> Limit <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> Limit<span class="token punctuation">&#123;</span>
    Rate<span class="token punctuation">:</span>   rate<span class="token punctuation">,</span>
    Period<span class="token punctuation">:</span> time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span>
    Burst<span class="token punctuation">:</span>  rate<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">PerHour</span><span class="token punctuation">(</span>rate <span class="token builtin">int</span><span class="token punctuation">)</span> Limit <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> Limit<span class="token punctuation">&#123;</span>
    Rate<span class="token punctuation">:</span>   rate<span class="token punctuation">,</span>
    Period<span class="token punctuation">:</span> time<span class="token punctuation">.</span>Hour<span class="token punctuation">,</span>
    Burst<span class="token punctuation">:</span>  rate<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ------------------------------------------------------------------------------</span>

<span class="token comment">// Limiter controls how frequently events are allowed to happen.</span>
<span class="token keyword">type</span> Limiter <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  rdb rediser
<span class="token punctuation">&#125;</span>

<span class="token comment">// NewLimiter returns a new Limiter.</span>
<span class="token keyword">func</span> <span class="token function">NewLimiter</span><span class="token punctuation">(</span>rdb rediser<span class="token punctuation">)</span> <span class="token operator">*</span>Limiter <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>Limiter<span class="token punctuation">&#123;</span>
    rdb<span class="token punctuation">:</span> rdb<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Allow is a shortcut for AllowN(ctx, key, limit, 1).</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l Limiter<span class="token punctuation">)</span> <span class="token function">Allow</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> limit Limit<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Result<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> l<span class="token punctuation">.</span><span class="token function">AllowN</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// AllowN reports whether n events may happen at time now.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l Limiter<span class="token punctuation">)</span> <span class="token function">AllowN</span><span class="token punctuation">(</span>
  ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span>
  key <span class="token builtin">string</span><span class="token punctuation">,</span>
  limit Limit<span class="token punctuation">,</span>
  n <span class="token builtin">int</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Result<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  values <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>limit<span class="token punctuation">.</span>Burst<span class="token punctuation">,</span> limit<span class="token punctuation">.</span>Rate<span class="token punctuation">,</span> limit<span class="token punctuation">.</span>Period<span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">&#125;</span>
  v<span class="token punctuation">,</span> err <span class="token operator">:=</span> allowN<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> l<span class="token punctuation">.</span>rdb<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>redisPrefix <span class="token operator">+</span> key<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> values<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
  <span class="token punctuation">&#125;</span>

  values <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  retryAfter<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
  <span class="token punctuation">&#125;</span>

  resetAfter<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
  <span class="token punctuation">&#125;</span>

  res <span class="token operator">:=</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">&#123;</span>
    Limit<span class="token punctuation">:</span>      limit<span class="token punctuation">,</span>
    Allowed<span class="token punctuation">:</span>    <span class="token function">int</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Remaining<span class="token punctuation">:</span>  <span class="token function">int</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    RetryAfter<span class="token punctuation">:</span> <span class="token function">dur</span><span class="token punctuation">(</span>retryAfter<span class="token punctuation">)</span><span class="token punctuation">,</span>
    ResetAfter<span class="token punctuation">:</span> <span class="token function">dur</span><span class="token punctuation">(</span>resetAfter<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// AllowAtMost reports whether at most n events may happen at time now.</span>
<span class="token comment">// It returns number of allowed events that is less than or equal to n.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l Limiter<span class="token punctuation">)</span> <span class="token function">AllowAtMost</span><span class="token punctuation">(</span>
  ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span>
  key <span class="token builtin">string</span><span class="token punctuation">,</span>
  limit Limit<span class="token punctuation">,</span>
  n <span class="token builtin">int</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Result<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  values <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>limit<span class="token punctuation">.</span>Burst<span class="token punctuation">,</span> limit<span class="token punctuation">.</span>Rate<span class="token punctuation">,</span> limit<span class="token punctuation">.</span>Period<span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">&#125;</span>
  v<span class="token punctuation">,</span> err <span class="token operator">:=</span> allowAtMost<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> l<span class="token punctuation">.</span>rdb<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>redisPrefix <span class="token operator">+</span> key<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> values<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
  <span class="token punctuation">&#125;</span>

  values <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  retryAfter<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
  <span class="token punctuation">&#125;</span>

  resetAfter<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
  <span class="token punctuation">&#125;</span>

  res <span class="token operator">:=</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">&#123;</span>
    Limit<span class="token punctuation">:</span>      limit<span class="token punctuation">,</span>
    Allowed<span class="token punctuation">:</span>    <span class="token function">int</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Remaining<span class="token punctuation">:</span>  <span class="token function">int</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    RetryAfter<span class="token punctuation">:</span> <span class="token function">dur</span><span class="token punctuation">(</span>retryAfter<span class="token punctuation">)</span><span class="token punctuation">,</span>
    ResetAfter<span class="token punctuation">:</span> <span class="token function">dur</span><span class="token punctuation">(</span>resetAfter<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Reset gets a key and reset all limitations and previous usages</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>Limiter<span class="token punctuation">)</span> <span class="token function">Reset</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> l<span class="token punctuation">.</span>rdb<span class="token punctuation">.</span><span class="token function">Del</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> redisPrefix<span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">dur</span><span class="token punctuation">(</span>f <span class="token builtin">float64</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>Duration <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> f <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>f <span class="token operator">*</span> <span class="token function">float64</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Limit is the limit that was used to obtain this result.</span>
  Limit Limit

  <span class="token comment">// Allowed is the number of events that may happen at time now.</span>
  Allowed <span class="token builtin">int</span>

  <span class="token comment">// Remaining is the maximum number of requests that could be</span>
  <span class="token comment">// permitted instantaneously for this key given the current</span>
  <span class="token comment">// state. For example, if a rate limiter allows 10 requests per</span>
  <span class="token comment">// second and has already received 6 requests for this key this</span>
  <span class="token comment">// second, Remaining would be 4.</span>
  Remaining <span class="token builtin">int</span>

  <span class="token comment">// RetryAfter is the time until the next request will be permitted.</span>
  <span class="token comment">// It should be -1 unless the rate limit has been exceeded.</span>
  RetryAfter time<span class="token punctuation">.</span>Duration

  <span class="token comment">// ResetAfter is the time until the RateLimiter returns to its</span>
  <span class="token comment">// initial state for a given key. For example, if a rate limiter</span>
  <span class="token comment">// manages requests per second and received one request 200ms ago,</span>
  <span class="token comment">// Reset would return 800ms. You can also think of this as the time</span>
  <span class="token comment">// until Limit and Remaining will be equal.</span>
  ResetAfter time<span class="token punctuation">.</span>Duration
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="redis-rate-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> redis_rate_test

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"context"</span>
  <span class="token string">"fmt"</span>

  <span class="token string">"github.com/redis/go-redis/v9"</span>

  <span class="token string">"github.com/go-redis/redis_rate/v10"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">ExampleNewLimiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  rdb <span class="token operator">:=</span> redis<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>Options<span class="token punctuation">&#123;</span>
    Addr<span class="token punctuation">:</span> <span class="token string">"localhost:6379"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token boolean">_</span> <span class="token operator">=</span> rdb<span class="token punctuation">.</span><span class="token function">FlushDB</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  limiter <span class="token operator">:=</span> redis_rate<span class="token punctuation">.</span><span class="token function">NewLimiter</span><span class="token punctuation">(</span>rdb<span class="token punctuation">)</span>
  res<span class="token punctuation">,</span> err <span class="token operator">:=</span> limiter<span class="token punctuation">.</span><span class="token function">Allow</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"project:123"</span><span class="token punctuation">,</span> redis_rate<span class="token punctuation">.</span><span class="token function">PerSecond</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"allowed"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>Allowed<span class="token punctuation">,</span> <span class="token string">"remaining"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>Remaining<span class="token punctuation">)</span>
  <span class="token comment">// Output: allowed 1 remaining 9</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h3 id="grpc-限流"><a href="#grpc-限流" class="headerlink" title="grpc 限流"></a>grpc 限流</h3><p><code>https://github.com/grpc-ecosystem/go-grpc-middleware</code> 中定了可以设置 grpc-go 的限流中间件。默认使用 token bucket 算法，可以自行实现 leaky bucket 算法。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"context"</span>
    <span class="token string">"log"</span>
    <span class="token string">"net"</span>

    <span class="token string">"google.golang.org/grpc"</span>
    <span class="token string">"google.golang.org/grpc/codes"</span>
    <span class="token string">"google.golang.org/grpc/status"</span>
    <span class="token string">"golang.org/x/time/rate"</span>
    pb <span class="token string">"your_package/proto"</span> <span class="token comment">// 替换为实际的 proto 包路径</span>
<span class="token punctuation">)</span>

<span class="token comment">// 定义限流器</span>
<span class="token keyword">var</span> limiter <span class="token operator">=</span> rate<span class="token punctuation">.</span><span class="token function">NewLimiter</span><span class="token punctuation">(</span>rate<span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 每秒 10 个请求，令牌桶容量 100</span>

<span class="token comment">// 实现服务接口</span>
<span class="token keyword">type</span> server <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    pb<span class="token punctuation">.</span>UnimplementedYourServiceServer
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>server<span class="token punctuation">)</span> <span class="token function">YourMethod</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> in <span class="token operator">*</span>pb<span class="token punctuation">.</span>YourRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>pb<span class="token punctuation">.</span>YourResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>limiter<span class="token punctuation">.</span><span class="token function">Allow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> status<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>codes<span class="token punctuation">.</span>ResourceExhausted<span class="token punctuation">,</span> <span class="token string">"rate limit exceeded"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 处理请求</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>YourResponse<span class="token punctuation">&#123;</span>Message<span class="token punctuation">:</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> in<span class="token punctuation">.</span>Name<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    lis<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">":50051"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"failed to listen: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    s <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    pb<span class="token punctuation">.</span><span class="token function">RegisterYourServiceServer</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>server<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"server listening at %v"</span><span class="token punctuation">,</span> lis<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"failed to serve: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程篇（4）-任务编排 WaitGroup</title>
    <url>/2023/12/15/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87%EF%BC%884%EF%BC%89%20%E4%BB%BB%E5%8A%A1%E7%BC%96%E6%8E%92%20WaitGroup/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他 go 并发编程知识学习的汇总，持续完善中。</p>
<br/>

<h2 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h2><p>允许一个 goroutine 等待其他多个 goroutine 执行完毕后再继续执行。</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> <span class="token punctuation">(</span>
    wg   sync<span class="token punctuation">.</span>WaitGroup
    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">`baidu.com`</span><span class="token punctuation">,</span> <span class="token string">`bing.com`</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">)</span>
  
  wg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> urls <span class="token punctuation">&#123;</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      
      resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
      <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>sync.WaitGroup 通过维护一个等待的 goroutine 数量，利用原子操作保证并发安全，使用信号量机制实现 goroutine 的阻塞和唤醒，从而实现了等待一组 goroutine 完成的功能。</p>
<div class="tabs" id="waitgroup-implement"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#waitgroup-implement-1">WaitGroup</button></li><li class="tab"><button type="button" data-href="#waitgroup-implement-2">Add</button></li><li class="tab"><button type="button" data-href="#waitgroup-implement-3">Wait</button></li><li class="tab"><button type="button" data-href="#waitgroup-implement-4">Done</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="waitgroup-implement-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> WaitGroup <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  noCopy noCopy       <span class="token comment">// 用于辅助 vet 工具检查是否可以通过 copy 复制 WaitGroup</span>
  <span class="token comment">// 为了保证并发安全，WaitGroup 在更新等待的 goroutine 数量时使用了原子操作。</span>
  <span class="token comment">// 原子操作可以确保在多 goroutine 环境下，对共享变量的读写操作是线程安全的。</span>
  state atomic<span class="token punctuation">.</span>Uint64 <span class="token comment">// high 32 bits are value of counter, low 32 bits are waiter count.</span>
  <span class="token comment">// WaitGroup 使用了信号量机制来实现 goroutine 的阻塞和唤醒。</span>
  <span class="token comment">// 当等待的 goroutine 数量不为 0 时，调用 Wait 方法的 goroutine 会被阻塞，</span>
  <span class="token comment">// 直到等待的 goroutine 数量变为 0 时，通过信号量唤醒所有等待的 goroutine。</span>
  sema  <span class="token builtin">uint32</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Note that it must not be embedded, due to the Lock and Unlock methods.</span>
<span class="token keyword">type</span> noCopy <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">// Lock is a no-op used by -copylocks checker from `go vet`.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>noCopy<span class="token punctuation">)</span> <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>noCopy<span class="token punctuation">)</span> <span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="waitgroup-implement-2"><p>Add 方法会将传入的 delta 值累加到等待的 goroutine 数量上。如果 delta 为负数，相当于减少等待的 goroutine 数量。当累加后等待的 goroutine 数量变为 0 时，会唤醒所有正在等待的 goroutine。</p>
<p>计数器的值大于 0 或者 waiter 的数量等于 0， 不做处理直接返回。如果计数器值为 0 &amp;&amp; 还有 waiter 被阻塞，则把 state 的计数清零，并唤醒那些被阻塞的 waiter。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>wg <span class="token operator">*</span>WaitGroup<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>delta <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> delta <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Synchronize decrements with Wait.</span>
      race<span class="token punctuation">.</span><span class="token function">ReleaseMerge</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>wg<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    race<span class="token punctuation">.</span><span class="token function">Disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> race<span class="token punctuation">.</span><span class="token function">Enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  state <span class="token operator">:=</span> wg<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span>
  v <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span>state <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span>
  w <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
  <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token operator">&amp;&amp;</span> delta <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> v <span class="token operator">==</span> <span class="token function">int32</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// The first increment must be synchronized with Wait.</span>
    <span class="token comment">// Need to model this as a read, because there can be</span>
    <span class="token comment">// several concurrent wg.counter transitions from 0.</span>
    race<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wg<span class="token punctuation">.</span>sema<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> v <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"sync: negative WaitGroup counter"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> w <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> delta <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> v <span class="token operator">==</span> <span class="token function">int32</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"sync: WaitGroup misuse: Add called concurrently with Wait"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> v <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> w <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// This goroutine has set counter to 0 when waiters > 0.</span>
  <span class="token comment">// Now there can't be concurrent mutations of state:</span>
  <span class="token comment">// - Adds must not happen concurrently with Wait,</span>
  <span class="token comment">// - Wait does not increment waiters if it sees counter == 0.</span>
  <span class="token comment">// Still do a cheap sanity check to detect WaitGroup misuse.</span>
  <span class="token keyword">if</span> wg<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> state <span class="token punctuation">&#123;</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"sync: WaitGroup misuse: Add called concurrently with Wait"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// Reset waiters count to 0.</span>
  wg<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">;</span> w <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> w<span class="token operator">--</span> <span class="token punctuation">&#123;</span>
    <span class="token function">runtime_Semrelease</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wg<span class="token punctuation">.</span>sema<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="waitgroup-implement-3"><p>Wait 方法用于阻塞当前 goroutine，直到所有等待的 goroutine 都完成工作。Wait 方法会检查等待的 goroutine 数量是否为 0。如果不为 0，当前 goroutine 会进入睡眠状态，直到等待的 goroutine 数量变为 0 时被唤醒。</p>
<p>检查计数器的值 v， v &#x3D;&#x3D; 0 则返回，不发生阻塞，否则，利用原子操作 state, 把本 goroutine 加入 waiter 中，加入成功就阻塞等待被唤醒，反之，循环检查（可能有同时多个 waiter 调用 Wait 方法）。 </p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>wg <span class="token operator">*</span>WaitGroup<span class="token punctuation">)</span> <span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>
    race<span class="token punctuation">.</span><span class="token function">Disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
    state <span class="token operator">:=</span> wg<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    v <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span>state <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span>
    w <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
    <span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Counter is 0, no need to wait.</span>
      <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>
        race<span class="token punctuation">.</span><span class="token function">Enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        race<span class="token punctuation">.</span><span class="token function">Acquire</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>wg<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// Increment waiters count.</span>
    <span class="token keyword">if</span> wg<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">CompareAndSwap</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> state<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token operator">&amp;&amp;</span> w <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// Wait must be synchronized with the first Add.</span>
        <span class="token comment">// Need to model this is as a write to race with the read in Add.</span>
        <span class="token comment">// As a consequence, can do the write only for the first waiter,</span>
        <span class="token comment">// otherwise concurrent Waits will race with each other.</span>
        race<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wg<span class="token punctuation">.</span>sema<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token function">runtime_Semacquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wg<span class="token punctuation">.</span>sema<span class="token punctuation">)</span>
      <span class="token keyword">if</span> wg<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"sync: WaitGroup is reused before previous Wait has returned"</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>
        race<span class="token punctuation">.</span><span class="token function">Enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        race<span class="token punctuation">.</span><span class="token function">Acquire</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>wg<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="waitgroup-implement-4"><p>Done 方法用于通知 WaitGroup 一个 goroutine 已经完成了它的工作。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Done decrements the WaitGroup counter by one.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>wg <span class="token operator">*</span>WaitGroup<span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h2 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h2><p>1、确保 Add(delta) 和 defer Done() 的次数一致。</p>
<p>2、不能复制它。</p>
<br/>

<h2 id="errgroup-Group"><a href="#errgroup-Group" class="headerlink" title="errgroup.Group"></a>errgroup.Group</h2><p>与 Context 集成，error（如果有错误，返回第一个出现的错误，如果想要所有任务的错误，需要自行存储） 能向 Wait 传播。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"bufio"</span>
  <span class="token string">"fmt"</span>
  <span class="token string">"golang.org/x/sync/errgroup"</span>
  <span class="token string">"io"</span>
  <span class="token string">"io/fs"</span>
  <span class="token string">"os"</span>
  <span class="token string">"path/filepath"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> FileMergePipeline <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  FileReader
  FileWriter
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> FileWriter <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  outFile <span class="token operator">*</span>os<span class="token punctuation">.</span>File
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> FileReader <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  srcFileChan  <span class="token keyword">chan</span> <span class="token builtin">string</span>
  readGroup    <span class="token operator">*</span>errgroup<span class="token punctuation">.</span>Group
  maxChunkSize <span class="token builtin">int</span>
  numOfWorkers <span class="token builtin">int</span>
  transformer  <span class="token keyword">chan</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Option <span class="token keyword">func</span><span class="token punctuation">(</span>p <span class="token operator">*</span>FileMergePipeline<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">WithMaxChunkSize</span><span class="token punctuation">(</span>size <span class="token builtin">int</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>p <span class="token operator">*</span>FileMergePipeline<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    p<span class="token punctuation">.</span>FileReader<span class="token punctuation">.</span>maxChunkSize <span class="token operator">=</span> size
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">WithMaxNumOfWorker</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>p <span class="token operator">*</span>FileMergePipeline<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    p<span class="token punctuation">.</span>FileReader<span class="token punctuation">.</span>numOfWorkers <span class="token operator">=</span> n
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">WithOutFle</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>p <span class="token operator">*</span>FileMergePipeline<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    outFile<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// ...</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>
    p<span class="token punctuation">.</span>FileWriter<span class="token punctuation">.</span>outFile <span class="token operator">=</span> outFile
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewFileReader</span><span class="token punctuation">(</span>options <span class="token operator">...</span>Option<span class="token punctuation">)</span> FileMergePipeline <span class="token punctuation">&#123;</span>
  p <span class="token operator">:=</span> FileMergePipeline<span class="token punctuation">&#123;</span>
    FileReader<span class="token punctuation">:</span> FileReader<span class="token punctuation">&#123;</span>
      srcFileChan<span class="token punctuation">:</span>  <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      numOfWorkers<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      maxChunkSize<span class="token punctuation">:</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">,</span>
      readGroup<span class="token punctuation">:</span>    <span class="token operator">&amp;</span>errgroup<span class="token punctuation">.</span>Group<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      transformer<span class="token punctuation">:</span>  <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> opt <span class="token operator">:=</span> <span class="token keyword">range</span> options <span class="token punctuation">&#123;</span>
    <span class="token function">opt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  p<span class="token punctuation">.</span>readGroup<span class="token punctuation">.</span><span class="token function">SetLimit</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>numOfWorkers<span class="token punctuation">)</span>
  <span class="token keyword">return</span> p
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>FileMergePipeline<span class="token punctuation">)</span> <span class="token function">Prepared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>outFile <span class="token operator">!=</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>FileReader<span class="token punctuation">)</span> <span class="token function">Finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">close</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>transformer<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>FileReader<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 打开单个文件，读取</span>
  file<span class="token punctuation">,</span> fileErr <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
  <span class="token keyword">if</span> fileErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">return</span> fileErr
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReaderSize</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> w<span class="token punctuation">.</span>maxChunkSize<span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
    buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> w<span class="token punctuation">.</span>maxChunkSize<span class="token punctuation">)</span>
    size<span class="token punctuation">,</span> readErr <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>
    <span class="token keyword">if</span> readErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// ...</span>
      <span class="token keyword">return</span> readErr
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> readErr <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">&#123;</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> size <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
      w<span class="token punctuation">.</span>transformer <span class="token operator">&lt;-</span> buf<span class="token punctuation">[</span><span class="token punctuation">:</span>size<span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> size <span class="token operator">&lt;</span> w<span class="token punctuation">.</span>maxChunkSize <span class="token punctuation">&#123;</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>FileMergePipeline<span class="token punctuation">)</span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 阻塞等待，遍历 chan 不断写入目标文件</span>
  <span class="token keyword">for</span> chunk <span class="token operator">:=</span> <span class="token keyword">range</span> p<span class="token punctuation">.</span>FileReader<span class="token punctuation">.</span>transformer <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span>FileWriter<span class="token punctuation">.</span>outFile<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// ...</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`write err:`</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
      <span class="token keyword">return</span> err
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span>FileWriter<span class="token punctuation">.</span>outFile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`dest file close err:`</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token keyword">return</span> err
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  pipeline <span class="token operator">:=</span> <span class="token function">NewFileReader</span><span class="token punctuation">(</span>
    <span class="token function">WithOutFle</span><span class="token punctuation">(</span><span class="token string">`/Users/chenjianyang/Documents/Projects/Go/design_patterns/main/test1`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">WithMaxNumOfWorker</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">WithMaxChunkSize</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>pipeline<span class="token punctuation">.</span><span class="token function">Prepared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  pipeline<span class="token punctuation">.</span>readGroup<span class="token punctuation">.</span><span class="token function">Go</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span>srcFileChan<span class="token punctuation">)</span>
    <span class="token keyword">return</span> filepath<span class="token punctuation">.</span><span class="token function">Walk</span><span class="token punctuation">(</span><span class="token string">`/Users/chenjianyang/Documents/Projects/Go/design_patterns/main/testdata`</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> info fs<span class="token punctuation">.</span>FileInfo<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> info <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> info<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">//</span>
      <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span>
      <span class="token punctuation">&#125;</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
      pipeline<span class="token punctuation">.</span>srcFileChan <span class="token operator">&lt;-</span> path
      <span class="token keyword">return</span> <span class="token boolean">nil</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token comment">// 并发 Map 阶段</span>
  <span class="token keyword">for</span> path <span class="token operator">:=</span> <span class="token keyword">range</span> pipeline<span class="token punctuation">.</span>srcFileChan <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`receive from srcChan: `</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>
    pipeline<span class="token punctuation">.</span>readGroup<span class="token punctuation">.</span><span class="token function">Go</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
          <span class="token comment">//</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> pipeline<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// Reduce 阶段，阻塞等待有数据可以读入新的文件路径</span>
  <span class="token function">hereWeGo</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    err <span class="token operator">:=</span> pipeline<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">//...</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> err <span class="token operator">:=</span> pipeline<span class="token punctuation">.</span>readGroup<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
  pipeline<span class="token punctuation">.</span><span class="token function">Finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 通知消费者，所有文件读取完毕</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">hereWeGo</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// print err</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="使用规则："><a href="#使用规则：" class="headerlink" title="使用规则："></a>使用规则：</h3><p>1、对于并发任务，确定好 errorgroup 控制的对象。</p>
<p>2、如果并发数过多，使用 errorgroup.SetLimit() 控制。</p>
<p>3、可以为 WaitGroup 实现一个超时功能：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">  <span class="token comment">// 要求手写代码</span>
  <span class="token comment">// 要求 sync.WaitGroup 支持 timeout 功能</span>
  <span class="token comment">// 如果 timeout 到了超时时间返回 true</span>
  <span class="token comment">// 如果 WaitGroup 自然结束返回 false</span>
<span class="token keyword">func</span> <span class="token function">WaitTimeout</span><span class="token punctuation">(</span>wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
  ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">go</span> time<span class="token punctuation">.</span><span class="token function">AfterFunc</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ch <span class="token operator">&lt;-</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    ch <span class="token operator">&lt;-</span> <span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  
  <span class="token keyword">return</span> <span class="token operator">&lt;-</span> ch
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程篇（五） 条件变量 Condition</title>
    <url>/2023/12/16/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87%EF%BC%885%EF%BC%89%20%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F%20Cond/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>

<h2 id="Cond"><a href="#Cond" class="headerlink" title="Cond"></a>Cond</h2><p>用于等待某个条件的一组 goroutine， 当条件变为 true 时，其中一个或者一组 goroutine 被唤醒。使用场景较少，使用 chan 可以代替 Cond 的功能，更为地道。</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"sync"</span>
<span class="token punctuation">)</span>

<span class="token comment">// Task 定义任务类型</span>
<span class="token keyword">type</span> Task <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// ThreadPool 线程池结构体</span>
<span class="token keyword">type</span> ThreadPool <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    tasks    <span class="token keyword">chan</span> Task
    wg       sync<span class="token punctuation">.</span>WaitGroup
    cond     <span class="token operator">*</span>sync<span class="token punctuation">.</span>Cond
    mutex    sync<span class="token punctuation">.</span>Mutex
    stopped  <span class="token builtin">bool</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// NewThreadPool 创建一个新的线程池</span>
<span class="token keyword">func</span> <span class="token function">NewThreadPool</span><span class="token punctuation">(</span>size <span class="token builtin">int</span><span class="token punctuation">,</span> capacity <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ThreadPool <span class="token punctuation">&#123;</span>
    pool <span class="token operator">:=</span> <span class="token operator">&amp;</span>ThreadPool<span class="token punctuation">&#123;</span>
       tasks<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Task<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
    pool<span class="token punctuation">.</span>cond <span class="token operator">=</span> sync<span class="token punctuation">.</span><span class="token function">NewCond</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token punctuation">.</span>mutex<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
       pool<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
       <span class="token keyword">go</span> pool<span class="token punctuation">.</span><span class="token function">worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> pool
<span class="token punctuation">&#125;</span>

<span class="token comment">// worker 工作 goroutine</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>ThreadPool<span class="token punctuation">)</span> <span class="token function">worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">defer</span> p<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
       p<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token comment">// 当任务队列为空且线程池未停止时，等待任务</span>
       <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>tasks<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>p<span class="token punctuation">.</span>stopped <span class="token punctuation">&#123;</span>
          p<span class="token punctuation">.</span>cond<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token punctuation">&#125;</span>
       <span class="token comment">// 如果线程池已停止且任务队列为空，退出循环</span>
       <span class="token keyword">if</span> p<span class="token punctuation">.</span>stopped <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>tasks<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
          p<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token keyword">break</span>
       <span class="token punctuation">&#125;</span>
       <span class="token comment">// 从任务队列中取出一个任务</span>
       task <span class="token operator">:=</span> <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>tasks
       p<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token comment">// 执行任务</span>
       <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Submit 提交任务到线程池</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>ThreadPool<span class="token punctuation">)</span> <span class="token function">Submit</span><span class="token punctuation">(</span>task Task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    p<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 如果线程池已停止，不接受新任务</span>
    <span class="token keyword">if</span> p<span class="token punctuation">.</span>stopped <span class="token punctuation">&#123;</span>
       p<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>
    p<span class="token punctuation">.</span>tasks <span class="token operator">&lt;-</span> task
    <span class="token comment">// 通知一个等待的工作 goroutine 有新任务</span>
    p<span class="token punctuation">.</span>cond<span class="token punctuation">.</span><span class="token function">Signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Shutdown 关闭线程池</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>ThreadPool<span class="token punctuation">)</span> <span class="token function">Shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    p<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>stopped <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token comment">// 通知所有等待的工作 goroutine 线程池已停止</span>
    p<span class="token punctuation">.</span>cond<span class="token punctuation">.</span><span class="token function">Broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 等待所有工作 goroutine 完成任务</span>
    p<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>tasks<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建一个包含 3 个工作 goroutine，任务队列容量为 5 的线程池</span>
    pool <span class="token operator">:=</span> <span class="token function">NewThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token comment">// 提交一些任务</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
       index <span class="token operator">:=</span> i
       pool<span class="token punctuation">.</span><span class="token function">Submit</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Task %d is running\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>
       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 关闭线程池</span>
    pool<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ThreadPool is shut down"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><div class="tabs" id="cond"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#cond-1">Cond</button></li><li class="tab"><button type="button" data-href="#cond-2">Broadcast</button></li><li class="tab"><button type="button" data-href="#cond-3">Signal</button></li><li class="tab"><button type="button" data-href="#cond-4">Wait</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="cond-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Cond implements a condition variable, a rendezvous point</span>
<span class="token comment">// for goroutines waiting for or announcing the occurrence</span>
<span class="token comment">// of an event.</span>
<span class="token comment">//</span>
<span class="token comment">// Each Cond has an associated Locker L (often a [*Mutex] or [*RWMutex]),</span>
<span class="token comment">// which must be held when changing the condition and</span>
<span class="token comment">// when calling the [Cond.Wait] method.</span>
<span class="token comment">//</span>
<span class="token comment">// A Cond must not be copied after first use.</span>
<span class="token comment">//</span>
<span class="token comment">// In the terminology of [the Go memory model], Cond arranges that</span>
<span class="token comment">// a call to [Cond.Broadcast] or [Cond.Signal] “synchronizes before” any Wait call</span>
<span class="token comment">// that it unblocks.</span>
<span class="token comment">//</span>
<span class="token comment">// For many simple use cases, users will be better off using channels than a</span>
<span class="token comment">// Cond (Broadcast corresponds to closing a channel, and Signal corresponds to</span>
<span class="token comment">// sending on a channel).</span>
<span class="token comment">//</span>
<span class="token comment">// For more on replacements for [sync.Cond], see [Roberto Clapis's series on</span>
<span class="token comment">// advanced concurrency patterns], as well as [Bryan Mills's talk on concurrency</span>
<span class="token comment">// patterns].</span>
<span class="token comment">//</span>
<span class="token comment">// [the Go memory model]: https://go.dev/ref/mem</span>
<span class="token comment">// [Roberto Clapis's series on advanced concurrency patterns]: https://blogtitle.github.io/categories/concurrency/</span>
<span class="token comment">// [Bryan Mills's talk on concurrency patterns]: https://drive.google.com/file/d/1nPdvhB0PutEJzdCq5ms6UI58dp50fcAN/view</span>
<span class="token keyword">type</span> Cond <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  noCopy noCopy

  <span class="token comment">// L is held while observing or changing the condition</span>
  L Locker

  notify  notifyList
  checker copyChecker
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cond-2"><p>Broacast 允许调用者唤醒所有等待此 Cond 的 goroutine。调用后会清空等待队列，把等待的 goroutine 全部唤醒，对应 C++ 的 condition_variable.notify_all().</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cond<span class="token punctuation">)</span> <span class="token function">Broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  c<span class="token punctuation">.</span>checker<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">runtime_notifyListNotifyAll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>notify<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cond-3"><p>Signal 允许调用者唤醒一个等待此 Cond 的 goroutine。对应 C++ 的 condition_variable.notify_one().</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Signal() does not affect goroutine scheduling priority; if other goroutines</span>
<span class="token comment">// are attempting to lock c.L, they may be awoken before a "waiting" goroutine.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cond<span class="token punctuation">)</span> <span class="token function">Signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  c<span class="token punctuation">.</span>checker<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">runtime_notifyListNotifyOne</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>notify<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cond-4"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Wait atomically unlocks c.L and suspends execution</span>
<span class="token comment">// of the calling goroutine. After later resuming execution,</span>
<span class="token comment">// Wait locks c.L before returning. Unlike in other systems,</span>
<span class="token comment">// Wait cannot return unless awoken by [Cond.Broadcast] or [Cond.Signal].</span>
<span class="token comment">//</span>
<span class="token comment">// Because c.L is not locked while Wait is waiting, the caller</span>
<span class="token comment">// typically cannot assume that the condition is true when</span>
<span class="token comment">// Wait returns. Instead, the caller should Wait in a loop:</span>
<span class="token comment">//</span>
<span class="token comment">//	c.L.Lock()</span>
<span class="token comment">//	for !condition() &#123;</span>
<span class="token comment">//	    c.Wait()</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//	... make use of condition ...</span>
<span class="token comment">//	c.L.Unlock()</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cond<span class="token punctuation">)</span> <span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  c<span class="token punctuation">.</span>checker<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  t <span class="token operator">:=</span> <span class="token function">runtime_notifyListAdd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>notify<span class="token punctuation">)</span>
  c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">runtime_notifyListWait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>notify<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
  c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><p>1、调用 Cond.Wait() 时，一定要加锁：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span>L<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>2、唤醒之后必须要检查判断条件，条件是否满足需要调用 Wait 的 goroutine 负责。</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 基础</title>
    <url>/2021/11/13/Go/go%20%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="go-语言官方文档以及库"><a href="#go-语言官方文档以及库" class="headerlink" title="go 语言官方文档以及库"></a>go 语言官方文档以及库</h2><p><a href="https://go.dev/doc/effective_go">https://go.dev/doc/effective_go</a></p>
<p><code>标准库</code>：<a href="https://pkg.go.dev/std">https://pkg.go.dev/std</a></p>
<p><code>实验性预发布</code>: <a href="https://cs.opensource.google/go/x/exp">https://cs.opensource.google/go/x/exp</a></p>
<p><code>go101</code>: <a href="https://go101.org/quizzes/101.html">https://go101.org/quizzes/101.html</a></p>
<br/>

<h2 id="go-命令"><a href="#go-命令" class="headerlink" title="go 命令"></a>go 命令</h2><p><a href="https://pkg.go.dev/cmd/go">https://pkg.go.dev/cmd/go</a></p>
<br/>

<h2 id="go-数据结构"><a href="#go-数据结构" class="headerlink" title="go 数据结构"></a>go 数据结构</h2><h3 id="chan"><a href="#chan" class="headerlink" title="chan"></a>chan</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><div class="tabs" id="chan-useage"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#chan-useage-1">生产消费模式</button></li><li class="tab"><button type="button" data-href="#chan-useage-2">多管道监听</button></li><li class="tab"><button type="button" data-href="#chan-useage-3">大量管道监听</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="chan-useage-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">producer</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
            ch <span class="token operator">&lt;-</span> i <span class="token comment">// 将数据发送到通道</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`producing...`</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span> <span class="token comment">// 模拟生产过程</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token comment">// 关闭通道</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">consumer</span><span class="token punctuation">(</span>ch <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> done <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`consuming...`</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span> <span class="token comment">// 模拟消费过程</span>
    <span class="token punctuation">&#125;</span>
    done <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 通知主线程消费者已完成</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// 创建带缓冲的通道</span>
    done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 用于通知主线程消费者已完成</span>

    <span class="token keyword">go</span> <span class="token function">producer</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token comment">// 启动生产者goroutine</span>
    <span class="token keyword">go</span> <span class="token function">consumer</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token comment">// 启动消费者goroutine</span>

    <span class="token comment">// 主线程等待消费者完成</span>
    <span class="token operator">&lt;-</span>done

    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"消费者已完成"</span><span class="token punctuation">)</span>
    <span class="token comment">// 主线程结束，程序退出</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="chan-useage-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 默认情况下，读/写 channel 都是阻塞模式，</span>
<span class="token comment">// 只有在 select 语句组成的多路复用分支中，</span>
<span class="token comment">// 与 channel 的交互会变成非阻塞模式：</span>
<span class="token comment">// 非阻塞模式下，读/写 channel 方法通过一个 bool 型的响应参数，用以标识是否读取/写入成功.</span>
<span class="token comment">// 能立即完成读取/写入操作的条件下，非阻塞模式下会返回 true, 进入到 select 的 case.</span>
ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token keyword">select</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> <span class="token operator">&lt;-</span> ch<span class="token punctuation">:</span>
  <span class="token keyword">default</span><span class="token punctuation">:</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 阻塞模式</span>
<span class="token operator">&lt;-</span> ch

<span class="token keyword">for</span> data<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">&#123;</span>
  
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> data <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">&#123;</span>
  
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token keyword">range</span> ch <span class="token punctuation">&#123;</span>
  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="chan-useage-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"reflect"</span>
    <span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建两个通道</span>
    ch1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
    ch2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>

    <span class="token comment">// 定义两个 reflect.SelectCase 实例</span>
    cases <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>SelectCase<span class="token punctuation">&#123;</span>
       <span class="token punctuation">&#123;</span>
          Dir<span class="token punctuation">:</span>  reflect<span class="token punctuation">.</span>SelectRecv<span class="token punctuation">,</span>
          Chan<span class="token punctuation">:</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>ch1<span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
       <span class="token punctuation">&#123;</span>
          Dir<span class="token punctuation">:</span>  reflect<span class="token punctuation">.</span>SelectRecv<span class="token punctuation">,</span>
          Chan<span class="token punctuation">:</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 启动两个 goroutine 分别向通道发送数据</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
       ch1 <span class="token operator">&lt;-</span> <span class="token number">1</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
       ch2 <span class="token operator">&lt;-</span> <span class="token number">2</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 使用 reflect.Select 进行选择</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
       chosen<span class="token punctuation">,</span> recv<span class="token punctuation">,</span> ok <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>cases<span class="token punctuation">)</span>
       <span class="token keyword">if</span> ok <span class="token punctuation">&#123;</span>
          fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Case %d received: %v\n"</span><span class="token punctuation">,</span> chosen<span class="token punctuation">,</span> recv<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
          fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Case %d is closed\n"</span><span class="token punctuation">,</span> chosen<span class="token punctuation">)</span>
       <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<p>除此外，对于读取 chan 内容， 常用的有 select 和 for-range 两种方式，它们的区别如下：</p>
<table>
<thead>
<tr>
<th>for data :&#x3D; range chan</th>
<th>select { case data &lt;- chan: }</th>
</tr>
</thead>
<tbody><tr>
<td><strong>单通道处理：</strong><code>for-range</code> 循环专门用于从单个通道中持续读取数据，直到该通道被关闭且所有数据都已被读取。</td>
<td><strong>多通道监听：</strong> <code>select</code> 语句可以同时监听多个通道的操作（包括接收和发送），<br/>当其中一个通道准备好（有数据可接收或可以发送数据）时，<br/>对应的 <code>case</code> 分支就会执行。如果有多个通道同时准备好，<br/> <code>select</code> 会随机选择一个 <code>case</code> 分支执行。</td>
</tr>
<tr>
<td><strong>阻塞性：</strong><code>for-range</code> 循环会阻塞，直到通道中有数据可接收或通道被关闭。当通道被关闭时，<code>for-range</code> 循环会自动结束。</td>
<td><strong>非阻塞性：</strong>如果 <code>select</code> 语句中包含 <code>default</code> 分支，当没有通道准备好时，会立即执行 <code>default</code> 分支，不会阻塞当前 <code>goroutine</code>；如果没有 <code>default</code> 分支，<code>select</code> 会阻塞，直到有一个通道准备好。</td>
</tr>
<tr>
<td><strong>持续读取：</strong><code>for-range</code> 会持续从通道中读取数据，直到通道关闭，适合用于需要不断处理通道中数据的场景。</td>
<td><strong>单次操作</strong>：<code>select</code> 语句只会执行一次，执行完一个 <code>case</code> 分支后，<code>select</code> 语句就结束了。如果需要持续监听通道，需要将 <code>select</code> 语句放在循环中。<code>select</code> 语句只会执行一次，执行完一个 <code>case</code> 分支后，<code>select</code> 语句就结束了。如果需要持续监听通道，需要将 <code>select</code> 语句放在循环中。</td>
</tr>
</tbody></table>
<h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><h5 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h5><p>管道（channel）由队列，类型信息，协程等待队列（读、写）组成，本质是一个多生产者、多消费者模式。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> hchan <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  qcount   <span class="token builtin">uint</span>           <span class="token comment">// total data in the queue</span>
  dataqsiz <span class="token builtin">uint</span>           <span class="token comment">// size of the circular queue</span>
  buf      unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// points to an array of dataqsiz elements</span>
  elemsize <span class="token builtin">uint16</span>
  closed   <span class="token builtin">uint32</span> <span class="token comment">// 标识 chan 是否关闭</span>
  timer    <span class="token operator">*</span>timer <span class="token comment">// timer feeding this chan</span>
  elemtype <span class="token operator">*</span>_type <span class="token comment">// element type</span>
  sendx    <span class="token builtin">uint</span>   <span class="token comment">// send index</span>
  recvx    <span class="token builtin">uint</span>   <span class="token comment">// receive index</span>
  recvq    waitq  <span class="token comment">// list of recv waiters</span>
  sendq    waitq  <span class="token comment">// list of send waiters</span>

  <span class="token comment">// lock protects all fields in hchan, as well as several</span>
  <span class="token comment">// fields in sudogs blocked on this channel.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Do not change another G's status while holding this lock</span>
  <span class="token comment">// (in particular, do not ready a G), as this can deadlock</span>
  <span class="token comment">// with stack shrinking.</span>
  lock mutex <span class="token comment">// 互斥锁，chan 不允许并发读写</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> waitq <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  first <span class="token operator">*</span>sudog
  last  <span class="token operator">*</span>sudog
<span class="token punctuation">&#125;</span>

<span class="token comment">// 用于包装协程的节点</span>
<span class="token comment">// g：goroutine，协程；</span>
<span class="token comment">// next：队列中的下一个节点；</span>
<span class="token comment">// prev：队列中的前一个节点；</span>
<span class="token comment">// elem: 读取/写入 channel 的数据的容器;</span>
<span class="token comment">// isSelect：标识当前协程是否处在 select 多路复用的流程中；</span>
<span class="token comment">// c：标识与当前 sudog 交互的 chan.</span>
<span class="token keyword">type</span> sudog <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// The following fields are protected by the hchan.lock of the</span>
  <span class="token comment">// channel this sudog is blocking on. shrinkstack depends on</span>
  <span class="token comment">// this for sudogs involved in channel ops.</span>

  g <span class="token operator">*</span>g

  next <span class="token operator">*</span>sudog
  prev <span class="token operator">*</span>sudog
  elem unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// data element (may point to stack)</span>

  <span class="token comment">// The following fields are never accessed concurrently.</span>
  <span class="token comment">// For channels, waitlink is only accessed by g.</span>
  <span class="token comment">// For semaphores, all fields (including the ones above)</span>
  <span class="token comment">// are only accessed when holding a semaRoot lock.</span>

  acquiretime <span class="token builtin">int64</span>
  releasetime <span class="token builtin">int64</span>
  ticket      <span class="token builtin">uint32</span>

  <span class="token comment">// isSelect indicates g is participating in a select, so</span>
  <span class="token comment">// g.selectDone must be CAS'd to win the wake-up race.</span>
  isSelect <span class="token builtin">bool</span>

  <span class="token comment">// success indicates whether communication over channel c</span>
  <span class="token comment">// succeeded. It is true if the goroutine was awoken because a</span>
  <span class="token comment">// value was delivered over channel c, and false if awoken</span>
  <span class="token comment">// because c was closed.</span>
  success <span class="token builtin">bool</span>

  <span class="token comment">// waiters is a count of semaRoot waiting list other than head of list,</span>
  <span class="token comment">// clamped to a uint16 to fit in unused space.</span>
  <span class="token comment">// Only meaningful at the head of the list.</span>
  <span class="token comment">// (If we wanted to be overly clever, we could store a high 16 bits</span>
  <span class="token comment">// in the second entry in the list.)</span>
  waiters <span class="token builtin">uint16</span>

  parent   <span class="token operator">*</span>sudog <span class="token comment">// semaRoot binary tree</span>
  waitlink <span class="token operator">*</span>sudog <span class="token comment">// g.waiting list or semaRoot</span>
  waittail <span class="token operator">*</span>sudog <span class="token comment">// semaRoot</span>
  c        <span class="token operator">*</span>hchan <span class="token comment">// channel</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/GO/base/make-chan.png">

<h5 id="管道操作"><a href="#管道操作" class="headerlink" title="管道操作"></a>管道操作</h5><div class="tabs" id="channel-operations"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#channel-operations-1">创建管道</button></li><li class="tab"><button type="button" data-href="#channel-operations-2">带缓冲 chan 读写数据 图示</button></li><li class="tab"><button type="button" data-href="#channel-operations-3">关闭 chan</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="channel-operations-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 判断申请内存空间大小是否越界，mem 大小为 element 类型大小与 element 个数相乘后得到，</span>
<span class="token comment">// 仅当无缓冲型 channel 时，因个数为 0 导致大小为 0；</span>
<span class="token comment">// 根据类型，初始 channel，分为 无缓冲型、有缓冲元素为 struct 型、有缓冲元素为 pointer 型 channel;</span>
<span class="token comment">// 倘若为无缓冲型，则仅申请一个大小为默认值 hchanSize = 96 的空间用来标识 chan 自身大小，具体看定义：</span>
<span class="token comment">// hchanSize = unsafe.Sizeof(hchan&#123;&#125;) + uintptr(-int(unsafe.Sizeof(hchan&#123;&#125;))&amp;(maxAlign-1))</span>
<span class="token comment">// 如若有缓冲的 struct 型，则一次性分配好 （hchanSize = 96 + mem） 大小的空间，并且调整 chan 的 buf 指向 mem 的起始位置；</span>
<span class="token comment">// 倘若为有缓冲的 pointer 型，则分别申请 chan 和 buf 的空间，两者无需连续；</span>
<span class="token comment">// 对 channel 的其余字段进行初始化，包括元素类型大小、元素类型、容量以及锁的初始化.</span>
<span class="token keyword">func</span> <span class="token function">makechan</span><span class="token punctuation">(</span>t <span class="token operator">*</span>chantype<span class="token punctuation">,</span> size <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>hchan <span class="token punctuation">&#123;</span>
    elem <span class="token operator">:=</span> t<span class="token punctuation">.</span>Elem

    <span class="token comment">// compiler checks this but be safe.</span>
    <span class="token keyword">if</span> elem<span class="token punctuation">.</span>Size_ <span class="token operator">>=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token punctuation">&#123;</span>
      <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"makechan: invalid channel element type"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> hchanSize<span class="token operator">%</span>maxAlign <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> elem<span class="token punctuation">.</span>Align_ <span class="token operator">></span> maxAlign <span class="token punctuation">&#123;</span>
      <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"makechan: bad alignment"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>Size_<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">></span> maxAlloc<span class="token operator">-</span>hchanSize <span class="token operator">||</span> size <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
      <span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">plainError</span><span class="token punctuation">(</span><span class="token string">"makechan: size out of range"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Hchan does not contain pointers interesting for GC when elements stored in buf do not contain pointers.</span>
    <span class="token comment">// buf points into the same allocation, elemtype is persistent.</span>
    <span class="token comment">// SudoG's are referenced from their owning thread so they can't be collected.</span>
    <span class="token comment">// TODO(dvyukov,rlh): Rethink when collector can move allocated objects.</span>
    <span class="token keyword">var</span> c <span class="token operator">*</span>hchan
    <span class="token keyword">switch</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> mem <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
      <span class="token comment">// Queue or element size is zero.</span>
      c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>hchan<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">mallocgc</span><span class="token punctuation">(</span>hchanSize<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token comment">// Race detector uses this location for synchronization.</span>
      c<span class="token punctuation">.</span>buf <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">raceaddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token operator">!</span>elem<span class="token punctuation">.</span><span class="token function">Pointers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token comment">// Elements do not contain pointers.</span>
      <span class="token comment">// Allocate hchan and buf in one call.</span>
      c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>hchan<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">mallocgc</span><span class="token punctuation">(</span>hchanSize<span class="token operator">+</span>mem<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      c<span class="token punctuation">.</span>buf <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> hchanSize<span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
      <span class="token comment">// Elements contain pointers.</span>
      c <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>hchan<span class="token punctuation">)</span>
      c<span class="token punctuation">.</span>buf <span class="token operator">=</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    c<span class="token punctuation">.</span>elemsize <span class="token operator">=</span> <span class="token function">uint16</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>Size_<span class="token punctuation">)</span>
    c<span class="token punctuation">.</span>elemtype <span class="token operator">=</span> elem
    c<span class="token punctuation">.</span>dataqsiz <span class="token operator">=</span> <span class="token function">uint</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>
    <span class="token function">lockInit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">,</span> lockRankHchan<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> c
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="channel-operations-2"><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/GO/base/send-write-chan.png">

<p>特别的：</p>
<p>1、<strong>对于向 nil 的 chan 发送&#x2F;接收数据，会造成永久阻塞(引发死锁)。</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="channel-operations-3"><p>关闭时:</p>
<p>(1) 会把 recvq 中的 goroutine 全部唤醒，这些 goroutine 获取的数据均为对应类型的零值；</p>
<p>(2) 同时会把 sendq 队列的 goroutine 唤醒，全部触发 panic.</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">closechan</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 关闭未初始化过的 channel 会 panic；</span>
    <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">plainError</span><span class="token punctuation">(</span><span class="token string">"close of nil channel"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
    <span class="token keyword">if</span> c<span class="token punctuation">.</span>closed <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">plainError</span><span class="token punctuation">(</span><span class="token string">"close of closed channel"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    c<span class="token punctuation">.</span>closed <span class="token operator">=</span> <span class="token number">1</span>

    <span class="token keyword">var</span> glist gList
    <span class="token comment">// release all readers</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
        sg <span class="token operator">:=</span> c<span class="token punctuation">.</span>recvq<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> sg <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> sg<span class="token punctuation">.</span>elem <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            <span class="token function">typedmemclr</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> sg<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>
            sg<span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token boolean">nil</span>
        <span class="token punctuation">&#125;</span>
        gp <span class="token operator">:=</span> sg<span class="token punctuation">.</span>g
        gp<span class="token punctuation">.</span>param <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>sg<span class="token punctuation">)</span>
        sg<span class="token punctuation">.</span>success <span class="token operator">=</span> <span class="token boolean">false</span>
        glist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>gp<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// release all writers (they will panic)</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
        sg <span class="token operator">:=</span> c<span class="token punctuation">.</span>sendq<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> sg <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">&#125;</span>
        sg<span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token boolean">nil</span>
        gp <span class="token operator">:=</span> sg<span class="token punctuation">.</span>g
        gp<span class="token punctuation">.</span>param <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>sg<span class="token punctuation">)</span>
        sg<span class="token punctuation">.</span>success <span class="token operator">=</span> <span class="token boolean">false</span>
        glist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>gp<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>

    <span class="token comment">// Ready all Gs now that we've dropped the channel lock.</span>
    <span class="token keyword">for</span> <span class="token operator">!</span>glist<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        gp <span class="token operator">:=</span> glist<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        gp<span class="token punctuation">.</span>schedlink <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token function">goready</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>对于已关闭的 chan，写入操作会引发 panic。</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">chansend1</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> elem unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">chansend</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">getcallerpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">chansend</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> ep unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> block <span class="token builtin">bool</span><span class="token punctuation">,</span> callerpc <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token function">gopark</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> waitReasonChanSendNilChan<span class="token punctuation">,</span> traceEvGoStop<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"unreachable"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>

    <span class="token keyword">if</span> c<span class="token punctuation">.</span>closed <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">plainError</span><span class="token punctuation">(</span><span class="token string">"send on closed channel"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>触发 <code>panic</code> 还有以下情况：</p>
<ul>
<li>close(chan &#x3D; {nil}).</li>
<li>close(chan &#x3D; {is closed}).</li>
<li>(chan&#x3D;{is closed}) &lt;- data.</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>



<br/>



<h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><h4 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h4><h5 id="数据结构和关键底层原理"><a href="#数据结构和关键底层原理" class="headerlink" title="数据结构和关键底层原理"></a>数据结构和关键底层原理</h5><div class="tabs" id="slice"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#slice-1">数据结构</button></li><li class="tab"><button type="button" data-href="#slice-2">makeslice</button></li><li class="tab"><button type="button" data-href="#slice-3">growslice</button></li><li class="tab"><button type="button" data-href="#slice-4">图示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="slice-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> slice <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  array unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// 指针指向底层数组</span>
  <span class="token builtin">len</span>   <span class="token builtin">int</span>            <span class="token comment">// 切片长度</span>
  <span class="token builtin">cap</span>   <span class="token builtin">int</span>            <span class="token comment">// 底层数组容量</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="slice-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">makeslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">&#123;</span>
    <span class="token comment">// 根据 cap 结合每个元素的大小，计算出消耗的总容量</span>
    mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">></span> maxAlloc <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">></span> <span class="token builtin">cap</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 倘若容量超限，len 取负值或者 len 超过 cap，直接 panic</span>
        mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">></span> maxAlloc <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
            <span class="token function">panicmakeslicelen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">panicmakeslicecap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 走 mallocgc 进行内存分配以及切片初始化</span>
    <span class="token keyword">return</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> et<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="slice-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">growslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> old slice<span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> slice <span class="token punctuation">&#123;</span>
    <span class="token comment">//... </span>
    <span class="token keyword">if</span> <span class="token builtin">cap</span> <span class="token operator">&lt;</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span> <span class="token punctuation">&#123;</span>
        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">errorString</span><span class="token punctuation">(</span><span class="token string">"growslice: cap out of range"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>


    <span class="token keyword">if</span> et<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 倘若元素大小为 0，则无需分配空间直接返回</span>
        <span class="token keyword">return</span> slice<span class="token punctuation">&#123;</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>zerobase<span class="token punctuation">)</span><span class="token punctuation">,</span> old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">// 计算扩容后数组的容量</span>
    newcap <span class="token operator">:=</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span>
    <span class="token comment">// 取原容量两倍的容量数值</span>
    doublecap <span class="token operator">:=</span> newcap <span class="token operator">+</span> newcap
    <span class="token comment">// 倘若新的容量大于原容量的两倍，直接取新容量作为数组扩容后的容量</span>
    <span class="token keyword">if</span> <span class="token builtin">cap</span> <span class="token operator">></span> doublecap <span class="token punctuation">&#123;</span>
        newcap <span class="token operator">=</span> <span class="token builtin">cap</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> threshold <span class="token operator">=</span> <span class="token number">256</span>
        <span class="token comment">// 倘若原容量小于 256，则扩容后新容量为原容量的两倍</span>
        <span class="token keyword">if</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span> <span class="token operator">&lt;</span> threshold <span class="token punctuation">&#123;</span>
            newcap <span class="token operator">=</span> doublecap
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 在原容量的基础上，对原容量 * 5/4 并且加上 192</span>
            <span class="token comment">// 循环执行上述操作，直到扩容后的容量已经大于等于预期的新容量为止</span>
            <span class="token keyword">for</span> <span class="token number">0</span> <span class="token operator">&lt;</span> newcap <span class="token operator">&amp;&amp;</span> newcap <span class="token operator">&lt;</span> <span class="token builtin">cap</span> <span class="token punctuation">&#123;</span>             
                newcap <span class="token operator">+=</span> <span class="token punctuation">(</span>newcap <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span>threshold<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">// 倘若数值越界了，则取预期的新容量 cap 封顶</span>
            <span class="token keyword">if</span> newcap <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
                newcap <span class="token operator">=</span> <span class="token builtin">cap</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token keyword">var</span> overflow <span class="token builtin">bool</span>
    <span class="token keyword">var</span> lenmem<span class="token punctuation">,</span> newlenmem<span class="token punctuation">,</span> capmem <span class="token builtin">uintptr</span>
    <span class="token comment">// 基于容量，确定新数组容器所需要的内存空间大小 capmem</span>
    <span class="token keyword">switch</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 倘若数组元素的大小为 1，则新容量大小为 1 * newcap.</span>
    <span class="token comment">// 同时会针对 span class 进行取整</span>
    <span class="token keyword">case</span> et<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span>
        newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span>
        capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span><span class="token punctuation">)</span>
        overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">></span> maxAlloc
        newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem<span class="token punctuation">)</span>
    <span class="token comment">// 倘若数组元素为指针类型，则根据指针占用空间结合元素个数计算空间大小</span>
    <span class="token comment">// 并会针对 span class 进行取整</span>
    <span class="token keyword">case</span> et<span class="token punctuation">.</span>size <span class="token operator">==</span> goarch<span class="token punctuation">.</span>PtrSize<span class="token punctuation">:</span>
        lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">*</span> goarch<span class="token punctuation">.</span>PtrSize
        newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token operator">*</span> goarch<span class="token punctuation">.</span>PtrSize
        capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">*</span> goarch<span class="token punctuation">.</span>PtrSize<span class="token punctuation">)</span>
        overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">></span> maxAlloc<span class="token operator">/</span>goarch<span class="token punctuation">.</span>PtrSize
        newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">/</span> goarch<span class="token punctuation">.</span>PtrSize<span class="token punctuation">)</span>
    <span class="token comment">// 倘若元素大小为 2 的指数，则直接通过位运算进行空间大小的计算   </span>
    <span class="token keyword">case</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">var</span> shift <span class="token builtin">uintptr</span>
        <span class="token keyword">if</span> goarch<span class="token punctuation">.</span>PtrSize <span class="token operator">==</span> <span class="token number">8</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// Mask shift for better code generation.</span>
            shift <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span><span class="token function">Ctz64</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">63</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            shift <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span><span class="token function">Ctz32</span><span class="token punctuation">(</span><span class="token function">uint32</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">31</span>
        <span class="token punctuation">&#125;</span>
        lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift
        newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift
        capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift<span class="token punctuation">)</span>
        overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>maxAlloc <span class="token operator">>></span> shift<span class="token punctuation">)</span>
        newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">>></span> shift<span class="token punctuation">)</span>
    <span class="token comment">// 兜底分支：根据元素大小乘以元素个数</span>
    <span class="token comment">// 再针对 span class 进行取整     </span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">*</span> et<span class="token punctuation">.</span>size
        newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token operator">*</span> et<span class="token punctuation">.</span>size
        capmem<span class="token punctuation">,</span> overflow <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span><span class="token punctuation">)</span>
        capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span>capmem<span class="token punctuation">)</span>
        newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">/</span> et<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 进行实际的切片初始化操作</span>
    <span class="token keyword">var</span> p unsafe<span class="token punctuation">.</span>Pointer
    <span class="token comment">// 非指针类型</span>
    <span class="token keyword">if</span> et<span class="token punctuation">.</span>ptrdata <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        p <span class="token operator">=</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>capmem<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 指针类型</span>
        p <span class="token operator">=</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>capmem<span class="token punctuation">,</span> et<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 将切片的内容拷贝到扩容后的位置 p </span>
    <span class="token function">memmove</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> old<span class="token punctuation">.</span>array<span class="token punctuation">,</span> lenmem<span class="token punctuation">)</span>
    <span class="token keyword">return</span> slice<span class="token punctuation">&#123;</span>p<span class="token punctuation">,</span> old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">,</span> newcap<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="slice-4"><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/GO/base/slice-operations.png"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>



<h5 id="切片表达式"><a href="#切片表达式" class="headerlink" title="切片表达式"></a>切片表达式</h5><ul>
<li><p>简单表达式 a[low : high]</p>
<p>0 &lt;&#x3D; low &lt;&#x3D; high &lt;&#x3D; len</p>
<p>a[:high] &lt;&#x3D;&gt; a[0:high] </p>
<p>a[0:]    &lt;&#x3D;&gt; a[0: len(a)]</p>
<p>a[:]     &lt;&#x3D;&gt; a[0: len(a)]</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>
b <span class="token operator">:=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 覆盖原切片后面的元素</span>
<span class="token comment">// fmt.Println(a) [1, 2, 3, 100, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p>扩展表达式 a[low : high : max]</p>
<p>max 用于限制新生成切片的容量（max - low）</p>
<p>0 &lt;&#x3D; low &lt;&#x3D; high &lt;&#x3D; max &lt;&#x3D; cap(a)</p>
<p>常用于偏底层代码中，扩展表达式生成的切片会被限制存储容量。当调用 <code>append()</code> 函数向被限制容量的切片追加元素时，会产生新的切片，不会覆盖原来的数组或者切片。</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/GO/base/slice-operations-extend.png"></li>
</ul>
<h5 id="关键用法"><a href="#关键用法" class="headerlink" title="关键用法"></a>关键用法</h5><div class="tabs" id="slice-usages"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#slice-usages-1">Pass by Reference/Pointer</button></li><li class="tab"><button type="button" data-href="#slice-usages-2">make([]T, n)</button></li><li class="tab"><button type="button" data-href="#slice-usages-3">make([]T, 0, n)</button></li><li class="tab"><button type="button" data-href="#slice-usages-4">make([]T, m, n)</button></li><li class="tab"><button type="button" data-href="#slice-usages-5">Sub-slice</button></li><li class="tab"><button type="button" data-href="#slice-usages-6">newSlice = append(subSlice)</button></li><li class="tab"><button type="button" data-href="#slice-usages-7">非翻倍扩容情况</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="slice-usages-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Test</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#123;</span>
    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>  
  	s1 <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
  	<span class="token function">changeSlice</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
  	<span class="token comment">// s: [0 0 0 0 0 0 0 0 -1 0]</span>
  	t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"s: %v"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
 
  <span class="token punctuation">&#123;</span>
    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span> 
    s2 <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
  	<span class="token function">unchangeableStill</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">// s2 传入后，函数使用局部变量扩容，所以 s2 依旧没有影响</span>
    <span class="token comment">// // s2: [0 0] len(2), cap(4)</span>
  	t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"s2: %v, len(%d), cap(%d)"</span><span class="token punctuation">,</span> s2<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span>
  	<span class="token comment">// s: [0 0 0 0 0 0 0 0 0 0] len(10), cap(12)</span>
  	t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"s: %v, len(%d), cap(%d)"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token punctuation">&#123;</span>
    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span> 
    s3 <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token function">changeable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s3<span class="token punctuation">)</span> <span class="token comment">// 传入指针，本质上 s3 会发生扩容，s3 的元素移到新内存地址</span>
    <span class="token comment">// s3: [0 0 10], len (3), cap(4)</span>
  	t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"s3: %v, len(%d), cap(%d)"</span><span class="token punctuation">,</span> s3<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span>
  	<span class="token comment">// s: [0 0 0 0 0 0 0 0 0 0] len(10), cap(12)</span>
  	t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"s: %v, len(%d), cap(%d)"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">func</span> <span class="token function">unchangeable</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">unchangeableStill</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">changeable</span><span class="token punctuation">(</span>s <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="slice-usages-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Test</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">&#123;</span>
       s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 结果为：s: [0,1,2,3,4]</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">TestGrowing</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  
    s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token comment">// s: [0 0 0 0 0 0 0 0 0 0 10], len of s: 11, cap of s: 20</span>
    t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"s: %v, len of s: %d, cap of s: %d"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="slice-usages-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Test</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">&#123;</span>
       s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 结果为：s: [0,1,2,3,4]</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">TestGrowing</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>  
    s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token comment">// s: [10], len of s: 1, cap of s: 10</span>
    t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"s: %v, len of s: %d, cap of s: %d"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="slice-usages-4"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Test_slice</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">&#123;</span>
       s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 结果为：s: [0,0,0,0,0,0,1,2,3,4]</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">TestGrowing</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>  
    s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token comment">// s: [0 0 0 0 0 0 0 0 0 0 10], len of s: 11, cap of s: 11</span>
    t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"s: %v, len of s: %d, cap of s: %d"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="slice-usages-5"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Test</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>  
    s1 <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token comment">// s1: [0 0], len of s1: 2, cap of s1: 4</span>
    t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"s1: %v, len of s1: %d, cap of s1: %d"</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span>
  	
  	s2 <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>
  	<span class="token comment">// s1: [0], len of s2: 1, cap of s2: 4</span>
    t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"s1: %v, len of s1: %d, cap of s2: %d"</span><span class="token punctuation">,</span>s1<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span>
  
  	s3 <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    s3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
  	<span class="token comment">// s: [0 0 0 0 0 0 0 0 -1 0]</span>
    t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"s: %v"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">TestPanic</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span>  
    s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token comment">// panic out of range</span>
  
    s1 <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
  	<span class="token comment">// 对于 s1 append 操作 剩余容量不足，s1 会发生扩容, 迁移到新的空间地址！！！</span>
    <span class="token comment">// s 的 len 依旧是 10</span>
    s1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token punctuation">)</span> 
    v <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token comment">// panic out of range</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="slice-usages-6"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Test</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
  s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// s 是基于 s[:2] &#123; len(2), cap(3) &#125;, 进行的 append</span>
  <span class="token comment">// s: [0, 1, 3, 4], len(4), cap(5)</span>
  t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"s: %v, len: %d, cap: %d"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
  v <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">// panic</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="slice-usages-7"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Test</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span>  
    s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  	<span class="token comment">// 大于 256 阈值, 新的 cap = 512 * (512 + 3*256)/4 = 832</span>
    <span class="token comment">// 8 bytes * 832 = 6656 bytes</span>
    <span class="token comment">// 根据 GC 内存管理，落入 6784 byte 的的页空间</span>
    <span class="token comment">// 6784 / 8 = 848</span>
  
  <span class="token comment">// s: [0, ..., 0, 1], len: 513, cap: 848</span>
    t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"len of s: %d, cap of s: %d"</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><h4 id="实现原理-2"><a href="#实现原理-2" class="headerlink" title="实现原理"></a>实现原理</h4><h5 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h5><div class="tabs" id="map-structure"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#map-structure-1">map 数据结构</button></li><li class="tab"><button type="button" data-href="#map-structure-2">bucket 数据结构</button></li><li class="tab"><button type="button" data-href="#map-structure-3">hiter 数据结构</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="map-structure-1"><p><strong><code>hmap</code> 的数据结构</strong></p>
<p>结构体主要用于管理整个<code>map</code>的整体状态，比如元素个数、桶相关的信息（桶的数量、指向桶的指针等）。<code>count</code>用于追踪当前有多少个键值对存放在<code>map</code>中，<code>B</code>决定了初始以及后续扩容时桶的数量变化（桶数量呈指数级增长，随着元素增多而动态调整），<code>buckets</code>指向了真正存储键值对的桶数组，<code>oldbuckets</code>在扩容过程中起到辅助作用，用于暂存旧的桶数据以便逐步迁移数据到新桶中。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> hmap <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    count     <span class="token builtin">int</span>    <span class="token comment">// 当前map中元素的个数</span>
    flags     <span class="token builtin">uint8</span>  <span class="token comment">// map 状态标识，可以标识出 map 是否被 goroutine 并发读写</span>
    B         <span class="token builtin">uint8</span>  <span class="token comment">// 表示当前桶的数量的对数，实际桶数量是 2^B</span>
    noverflow <span class="token builtin">uint16</span> <span class="token comment">// 溢出桶的大概数量</span>
    hash0     <span class="token builtin">uint32</span> <span class="token comment">// 哈希种子，用于生成哈希值</span>

    buckets    unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// 指向桶数组的指针，如果桶数量为0则为nil</span>
    oldbuckets unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// 在扩容期间指向旧桶数组，平常为nil</span>
    nevacuate  <span class="token builtin">uintptr</span>        <span class="token comment">// 扩容进度标识，表示扩容时已迁移的旧桶的数量</span>

    extra <span class="token operator">*</span>mapextra           <span class="token comment">// 用于存储溢出桶等额外信息的指针</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// mapextra holds fields that are not present on all maps.</span>
<span class="token comment">// 在 map 初始化时，倘若容量过大，会提前申请好一批溢出桶，以供后续使用，</span>
<span class="token comment">// 这部分溢出桶存放在 hmap.mapextra 当中</span>
<span class="token keyword">type</span> mapextra <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// If both key and elem do not contain pointers and are inline, then we mark bucket</span>
  <span class="token comment">// type as containing no pointers. This avoids scanning such maps.</span>
  <span class="token comment">// However, bmap.overflow is a pointer. In order to keep overflow buckets</span>
  <span class="token comment">// alive, we store pointers to all overflow buckets in hmap.extra.overflow and hmap.extra.oldoverflow.</span>
  <span class="token comment">// overflow and oldoverflow are only used if key and elem do not contain pointers.</span>
  <span class="token comment">// overflow contains overflow buckets for hmap.buckets.</span>
  <span class="token comment">// oldoverflow contains overflow buckets for hmap.oldbuckets.</span>
  <span class="token comment">// The indirection allows to store a pointer to the slice in hiter.</span>
  <span class="token comment">// 这是一个指针数组，用于存储溢出桶的信息。</span>
  <span class="token comment">// 在`map`的实现中，每个桶都有一定的容量来存储 key-value 对。</span>
  <span class="token comment">// 当一个桶满了之后，就会使用溢出桶来继续存储。</span>
  <span class="token comment">// `overflow`字段可以帮助定位和管理这些溢出桶。</span>
  <span class="token comment">// 例如，在插入一个新的 key-value 对到`map`中时，</span>
  <span class="token comment">// 如果当前桶已满，就会通过`overflow`指针找到下一个可用的溢出桶来存储这个 key-value 对。</span>
  overflow    <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap  <span class="token comment">// 供桶数组 buckets 使用的溢出桶</span>
  <span class="token comment">// 这个字段主要用于在`map`扩容过程中。</span>
  <span class="token comment">// 当`map`扩容时，旧的溢出桶可能需要以某种方式进行处理，</span>
  <span class="token comment">// `oldoverflow`字段可以帮助跟踪这些旧的溢出桶，确保在扩容过程中数据的正确迁移和处理。</span>
  oldoverflow <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap <span class="token comment">// 扩容流程中，供老桶数组 oldBuckets 使用的溢出桶</span>

  <span class="token comment">// nextOverflow holds a pointer to a free overflow bucket.</span>
  nextOverflow <span class="token operator">*</span>bmap   <span class="token comment">// 下一个可用的溢出桶</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong><code>mapextra</code>结构体在<code>map</code>操作中的作用</strong></p>
<table>
<thead>
<tr>
<th>功能</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>插入操作（<code>mapassign</code>函数）</td>
<td>往 map 中插入 <code>key-value</code> 时， <code>mapextra</code> 结构体中的 <code>overflow</code> 字段会被用来检查是否有可用的溢出桶。如果当前桶已满，代码会沿着 <code>overflow</code> 指针找到下一个可用的桶来插入这个 <code>key-value</code>。<br/>如，会先计算键对应的桶索引，然后检查这个桶是否有空间。如果没有空间，就会查看 <code>mapextra</code> 结构体中的 <code>overflow</code> 信息来找到新的存储位置。</td>
</tr>
<tr>
<td>删除操作（<code>mapdelete</code>函数）</td>
<td>删除 <code>map</code> 中的一个 <code>key-value</code> 时，<code>mapextra </code> 结构体中的信息可以帮助快速定位<code>key-value</code> 所在的桶和位置，并且在删除后可能需要对桶和溢出桶的结构进行调整。<br/>如，删除 <code>key-value</code> 后，如果某个桶为空，并且这个桶的溢出桶也为空，那么可能需要对 <code>mapextra</code> 结构体中的 <code>overflow</code> 指针进行相应的修改，以维护 <code>map</code> 结构的紧凑性和高效性。</td>
</tr>
<tr>
<td>map 性能优化</td>
<td>合理管理 <code>mapextra</code> 结构体中的信息对于 <code>map</code> 的性能优化至关重要。例如，通过有效地利用溢出桶，可以在一定程度上减少 <code>map</code> 扩容的频率。 因为 <code>map</code> 扩容是一个比较耗时的操作，涉及到重新分配内存、重新哈希等过程。通过 <code>mapextra</code> 结构体来精细地管理溢出桶，可以在<code>map</code>存储的数据量逐渐增加的过程中，保持较好的性能，避免频繁的扩容操作导致性能下降。</td>
</tr>
</tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="map-structure-2"><p><strong><code>bucket</code> 数据结构</strong></p>
<p><code>bmap</code>是实际存储键值对的地方，每个桶可以存放多个键值对。<code>tophash</code>数组存储对应键值对哈希值的高 8 位，这有助于快速判断键是否可能存在于这个桶中，后续根据这个高 8 位以及其他逻辑去进一步查找具体的键值对。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    tophash <span class="token punctuation">[</span>bucketCnt<span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token comment">// 存储桶内每个元素对应的哈希值的高8位</span>
    <span class="token comment">// 后面跟着存储键值对的内存空间，每个桶中可以存放多个键值对，具体存放数量与键值类型大小等有关</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 go1.21的源码中(<code>src/cmd/compile/internal/reflectdata/reflect.go</code>), 编译期间，会通过如下函数重构 <code>bmap</code>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">MapBucketType</span><span class="token punctuation">(</span>t <span class="token operator">*</span>types<span class="token punctuation">.</span>Type<span class="token punctuation">)</span> <span class="token operator">*</span>types<span class="token punctuation">.</span>Type <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  arr <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">NewArray</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>types<span class="token punctuation">.</span>TUINT8<span class="token punctuation">]</span><span class="token punctuation">,</span> BUCKETSIZE<span class="token punctuation">)</span>
  field <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> <span class="token function">makefield</span><span class="token punctuation">(</span><span class="token string">"topbits"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
  keys <span class="token operator">:=</span> <span class="token function">makefield</span><span class="token punctuation">(</span><span class="token string">"keys"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
  field <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> keys<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
  elems <span class="token operator">:=</span> <span class="token function">makefield</span><span class="token punctuation">(</span><span class="token string">"elems"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
  field <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> elems<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
  overflow <span class="token operator">:=</span> <span class="token function">makefield</span><span class="token punctuation">(</span><span class="token string">"overflow"</span><span class="token punctuation">,</span> otyp<span class="token punctuation">)</span>
  field <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> overflow<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
  bucket <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">NewStruct</span><span class="token punctuation">(</span>field<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    topbits  <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token builtin">uint8</span>
  	<span class="token comment">// 因为数据的类型和桶内 k-v 元素个数确定的，所以下面的字段是可以算出来的</span>
    keys     <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>keytype
    elems   <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>valuetype
    overflow <span class="token builtin">uintptr</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>hmap 和 bmap</p>
<table>
<thead>
<tr>
<th>哈希冲突解决方法</th>
<th>优点</th>
</tr>
</thead>
<tbody><tr>
<td>拉链法</td>
<td>简单常用；无需预先为元素分配内存.</td>
</tr>
<tr>
<td>开放寻址法</td>
<td>无需额外的指针用于链接元素；内存地址完全连续，可以基于局部性原理，充分利用 CPU 高速缓存.</td>
</tr>
</tbody></table>
<p>在解决 hash 和分桶冲突问题时，结合了拉链法和开放寻址法 2 种思路。<code>bmap</code> 通过 <code>overflow</code> 将所有 <code>拉链法</code>生成的 <code>bucket</code> 形成一个单向溢出桶链表。每个桶固定可以存放 8 个线性的 <code>key-value</code> 对。</p>
<p>对于插入操作，key 命中一个桶时，首先根据<code>开放寻址法</code>，在桶的 8 个位置中寻找空位进行插入，如果这个桶的 8 个位置都被占满，通过桶的溢出桶指针找到下一个桶，知道知道合适的桶和桶内空余的位置进行插入位置。若遍历到链表尾部，仍未找到空位，则基于拉链法，在桶链表尾部新增新桶节点，并插入 key-value 对。</p>
<p>这么一看，Go <code>map</code> 的设计和 C++ 的 <code>deque</code> 或者 Redis 的 <code>quicklist</code> 设计上有些共性。链表的形式为了节省空间（更少的 node 管理更多的线性存储空间），连续的线性设计为了充分利用 CPU 缓存和确保桶内冲突能保证 O(1) 的定位时间复杂度。</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/GO/base/hmap-bmap.png"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="map-structure-3"><p><strong><code>hiter</code>数据结构</strong></p>
<p>  在 Go 语言的<code>map</code>实现中，<code>hiter</code>结构体用于迭代<code>map</code>。它保存了迭代过程中的状态信息，使得可以按照一定的顺序遍历<code>map</code>中的键值对。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// A hash iteration structure.</span>
<span class="token comment">// If you modify hiter, also change cmd/compile/internal/reflectdata/reflect.go</span>
<span class="token comment">// and reflect/value.go to match the layout of this structure.</span>
<span class="token keyword">type</span> hiter <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    key         unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// Must be in first position.  Write nil to indicate iteration end (see cmd/compile/internal/walk/range.go).</span>
    elem        unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// Must be in second position (see cmd/compile/internal/walk/range.go).</span>
    t           <span class="token operator">*</span>maptype
    h           <span class="token operator">*</span>hmap
    buckets     unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// bucket ptr at hash_iter initialization time</span>
    bptr        <span class="token operator">*</span>bmap          <span class="token comment">// current bucket</span>
    overflow    <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap       <span class="token comment">// keeps overflow buckets of hmap.buckets alive</span>
    oldoverflow <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap       <span class="token comment">// keeps overflow buckets of hmap.oldbuckets alive</span>
    startBucket <span class="token builtin">uintptr</span>        <span class="token comment">// bucket iteration started at</span>
    offset      <span class="token builtin">uint8</span>          <span class="token comment">// intra-bucket offset to start from during iteration (should be big enough to hold bucketCnt-1)</span>
    wrapped     <span class="token builtin">bool</span>           <span class="token comment">// already wrapped around from end of bucket array to beginning</span>
    B           <span class="token builtin">uint8</span>
    i           <span class="token builtin">uint8</span>
    bucket      <span class="token builtin">uintptr</span>
    checkBucket <span class="token builtin">uintptr</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong><code>hiter</code>结构体在<code>map</code>迭代中的工作方式</strong></p>
<ul>
<li>当开始迭代一个<code>map</code>时，会创建一个<code>hiter</code>结构体实例，并初始化它的各个成员变量。例如，<code>hiter</code>会根据<code>map</code>的<code>hmap</code>结构来设置<code>h</code>、<code>buckets</code>等指针，根据<code>map</code>类型来设置<code>t</code>，并将<code>startBucket</code>和<code>offset</code>设置为合适的初始值，通常是从第一个桶（索引为 0）开始，偏移量为 0。</li>
<li>在迭代过程中，<code>hiter</code>通过使用<code>buckets</code>、<code>bptr</code>和<code>overflow</code>等指针来遍历桶和溢出桶中的键值对。它会根据<code>offset</code>在当前桶内逐步访问键值对，当一个桶内的键值对访问完后，会更新<code>bptr</code>和<code>offset</code>，以移动到下一个桶或者下一个合适的位置。</li>
<li>如果遇到<code>map</code>扩容的情况，<code>hiter</code>会利用<code>oldbuckets</code>来确保也能正确地访问旧桶中的键值对。通过<code>startBucket</code>、<code>offset</code>和<code>wrapped</code>等变量，<code>hiter</code>可以准确地记录迭代的进度，并且在需要时判断迭代是否已经完成或者是否需要进行特殊的处理（如重新开始迭代等）。</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h5 id="哈希运算与定位"><a href="#哈希运算与定位" class="headerlink" title="哈希运算与定位"></a>哈希运算与定位</h5><p>当向 <code>map</code> 中插入或者查找一个元素时，会先对键进行哈希运算（使用 <code>hash0</code> 等参与计算），得到一个哈希值。然后根据这个哈希值来确定元素应该存放在哪个桶中，主要是通过取哈希值的低位若干位（具体取决于当前 <code>hmap</code> 的 <code>B</code> 值，也就是桶数量对应的对数）来定位到具体的桶。</p>
<p>例如，如果 <code>B</code> 是 3，那么会取哈希值的低 3 位来确定是 <code>2^3 = 8</code> 个桶中的哪一个桶。找到桶之后，再根据哈希值的高 8 位（存放在桶的 <code>tophash</code> 数组中）以及进一步的遍历对比（对比键的完整哈希值和实际键值）在桶内查找或者插入对应的键值对。</p>
<br/>

<h5 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h5><p>随着 key-value 对数量的增长，当一个桶下挂载的 key-value 达到一定的量级，此时操作的时间复杂度会趋于线性，这时候为了维持好的存取效率，就需要扩容。</p>
<p>1、<strong>扩容触发条件</strong>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">mapassign</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">&#123;</span>
  <span class="token operator">...</span>
  <span class="token comment">// 满足条件之一触发扩容</span>
  <span class="token comment">// (1) 负载因子 > 6.5 触发增量扩容</span>
  <span class="token comment">// (2) 哈希使用了太多溢出桶, 数量达到 2^ min(15, B)，触发等量扩容</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">growing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">overLoadFactor</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">tooManyOverflowBuckets</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>noverflow<span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">hashGrow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">)</span>
    <span class="token keyword">goto</span> again
  <span class="token punctuation">&#125;</span>
  <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>2、<strong>扩容方式</strong>：</p>
<table>
<thead>
<tr>
<th>扩容类型</th>
<th>触发条件</th>
<th>扩容方式</th>
<th>扩容目的</th>
</tr>
</thead>
<tbody><tr>
<td>增量扩容</td>
<td>负载因子(桶内 key-value 总数&#x2F;桶数组长度) &gt; 6.5 时）。<br></td>
<td>new([]**bucket), new([]*bucket) &#x3D; 2 * old([]**bucket),<br/>old([]**bucket) -&gt;rehash-&gt; new([]*bucket), <br/>Go 迁移策略和 Redis 的渐进式 rehash 类似，<br/>在每次访问 map 时，触发一次搬迁，<br/>将 oldbuckets 的 key-value(每次搬迁 2 个 key-value) -&gt; new buckets 中，<br/>完后再释放 oldbuckets。</td>
<td>减少哈希冲突，提高查找效率</td>
</tr>
<tr>
<td>等量扩容</td>
<td>map 中溢出桶(overflow buckets) 过多时，<br/>即使元素数量没有达到负载因子阈值。<br/>  当桶的数量 &lt; $2^{15}$ 时，如果溢出桶数量 ≥ 桶数量 <br/>当桶的数量 ≥ $2^{15}$ 时，如果溢出桶数量 ≥ $2^{15}$</td>
<td>在 hash bucket 数量不变情况下，<br/>重新哈希所有元素到新桶中，把松散的 key-value 重新排列一次，<br/>减少 overflow 中冗余的 buckets（注意这个 buckets 是同一个 hash bucket 下的溢出桶链表），<br/>删除多余的溢出桶链表节点，保证同一个 hash 下冲突的 key-value 对保持紧凑。</td>
<td>整理散乱的溢出桶，减少查找路径长度。</td>
</tr>
</tbody></table>
<p>3、扩容的实现特点</p>
<ul>
<li><p><strong>渐进式扩容</strong>：Go 的扩容不是一次性完成的，而是逐步迁移，每次写入操作时会迁移 1-2 个桶</p>
</li>
<li><p><strong>并发安全</strong>：在扩容期间，读操作可以安全并发，读会先查旧桶再查新桶</p>
</li>
<li><p><strong>内存重用</strong>：等量扩容会尝试重用现有的溢出桶，减少内存分配</p>
</li>
</ul>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/GO/base/map-grow.png">

<br/>

<h5 id="增删查改"><a href="#增删查改" class="headerlink" title="增删查改"></a>增删查改</h5><p>1、查找</p>
<p>（1）key -&gt; Hash 值。</p>
<p>（2）取 Hash 值的低位与 hmap.B 取模来确定 bucket 的位置。</p>
<p>（3）取 Hash 值的高位，在 tophash 数组中搜索（搜索包括所有 overflow 的buckets）,如果当前 map 处于搬迁过程，泽优先从 oldbuckets 数组中查找， 找不到会返回对应类型的零值。</p>
<br/>

<p>2、增加（修改）</p>
<p>（1）key -&gt; Hash 值。</p>
<p>（2）取 Hash 值的低位与 hmap.B 取模来确定 bucket 的位置。</p>
<p>（3）查找该 key 是否已经存在，如果存在直接更新 value；如果不存在，则从 bucket 中寻找空余位置插入，如果当前 map 处于搬迁过程中，那么新元素直接插入到新的 buckets 数组中。</p>
<br/>

<p>3、删除</p>
<p>（1）基于查找定位元素位置，如果存在则删除，否则什么也不处理。</p>
<br/>

<h3 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h3><h4 id="实现原理-3"><a href="#实现原理-3" class="headerlink" title="实现原理"></a>实现原理</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Member <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  ID   <span class="token builtin">int64</span> <span class="token string">`json:"id" gorm:"column:id"`</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>tag 也是 struct 的一部分，通过 反射特性可以动态的给结构体成员赋值，赋值前根据 Tag 决定赋值动作。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// A StructField describes a single field in a struct.</span>
<span class="token keyword">type</span> StructField <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Name is the field name.</span>
  Name <span class="token builtin">string</span>

  <span class="token comment">// PkgPath is the package path that qualifies a lower case (unexported)</span>
  <span class="token comment">// field name. It is empty for upper case (exported) field names.</span>
  <span class="token comment">// See https://golang.org/ref/spec#Uniqueness_of_identifiers</span>
  PkgPath <span class="token builtin">string</span>

  Type      Type      <span class="token comment">// field type</span>
  Tag       StructTag <span class="token comment">// field tag string</span>
  Offset    <span class="token builtin">uintptr</span>   <span class="token comment">// offset within struct, in bytes</span>
  Index     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>     <span class="token comment">// index sequence for Type.FieldByIndex</span>
  Anonymous <span class="token builtin">bool</span>      <span class="token comment">// is an embedded field</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>1、如果变量<code>首字母小写</code>，则为<code>private</code>。无论如何<code>不能转</code>，因为取不到<code>反射信息</code>。</p>
<p>2、如果变量<code>首字母大写</code>，则为<code>public</code>。</p>
<ul>
<li><p><code>不加 tag</code>，可以正常转为<code>json</code>里的字段，<code>json</code>内字段名跟结构体内字段<code>原名一致</code>。</p>
</li>
<li><p><code>加了tag</code>，从<code>struct</code>转<code>json</code>的时候，<code>json</code>的字段名就是<code>tag</code>里的字段名，原字段名已经没用。</p>
</li>
<li><pre><code class="go">type J struct &#123;
    a string             //小写无 tag ，Json.Marshal 之后会丢失值
    b string `json:&quot;B&quot;`  //小写 + tag ，Json.Marshal 之后会丢失值
    C string             //大写无 tag 首字母大写，Json.Marshal tag 根据字段名来
    D string `json:&quot;DD&quot;` //大写 + tag
&#125;
// 转为json后的内容 = &#123;&quot;C&quot;:&quot;3&quot;,&quot;DD&quot;:&quot;4&quot;&#125;
<pre class="line-numbers language-none"><code class="language-none">
  

#### struct&#123;&#125; 和 nil 有什么区别？

| struct&#123;&#125;                                                     | nil                                                          |
| ------------------------------------------------------------ | ------------------------------------------------------------ |
| 在运行时，由于 struct&#123;&#125; 不占用内存，所以 Go 语言不会为其分配实际的内存空间。&lt;br&#x2F;&gt;对于 struct&#123;&#125; 类型的变量或值，它们在运行时只是一种逻辑上的存在，没有对应的物理内存存储。&lt;br&#x2F;&gt;当涉及到 struct&#123;&#125; 类型的操作时， Go 编译器在编译时就知道它无需分配内存空间。&lt;br&#x2F;&gt;在生成机器码时，对于创建 struct&#123;&#125; 类型变量的操作，编译器不会生成任何与内存分配相关的指令。 | 是一个预定义的标识符，表示指针、通道（channel）、函数、接口（interface）、映射（map）或切片（slice）类型的零值。&lt;br&#x2F;&gt;简单来说，它代表 “空” 或者 “无”，&lt;br&#x2F;&gt;用于表示这些类型尚未初始化或者没有具体的值。&lt;br&#x2F;&gt;类似 C++ 的 nullptr，都是地址 0x0 位置。 |

&lt;br&#x2F;&gt;

## 控制结构



### select

#### 基本用法

select 是 go 提供的多路 I&#x2F;O 复用机制，用于检测多个管道是否就绪（可读可写）。select 只能作用于 channel，包括数据的读&#x2F;写。

&#96;&#96;&#96;go
&#x2F;&#x2F; Test 输出取决于 传入的 chan 的可读可写特性
&#x2F;&#x2F; 如果 chan 只能读，则进入 case received;
&#x2F;&#x2F; 如果 chan 只能写，则进入 case sent;
&#x2F;&#x2F; 如果 chan 可读可写，则随机进入一个 case 执行后退出。
func Test(c chan string) &#123;
  var recv string
  send :&#x3D; &#96;Hello&#96;
  
  select &#123;
    case recv &#x3D; &lt;-c:
    	fmt.Printf(&#96;received %s\n&#96;, recv)
    
    case c &lt;- send:
      fmt.Printf(&#96;sent %s\n&#96;, send)
  &#125;
&#125;
&#x2F;&#x2F; 特别注意 select 有阻塞的情况：
&#x2F;&#x2F; 没有默认分支且所有通道都阻塞：当 select 语句中没有 default 分支，而所有 case 中的通道操作都处于阻塞状态时，select 会一直阻塞，导致死锁。例如：
func TestDeadlock() &#123;
    ch1 :&#x3D; make(chan int)
    ch2 :&#x3D; make(chan int)

    go func() &#123;
        &#x2F;&#x2F; 模拟一段时间后向ch1发送数据
        time.Sleep(2 * time.Second)
        ch1 &lt;- 1
    &#125;()
  &#x2F;&#x2F; select 会一直阻塞，因为 ch1 和 ch2 在一开始都没有数据可读，
  &#x2F;&#x2F; 且没有 default 分支来提供其他执行路径。
    select &#123;
    case &lt;-ch1:
        &#x2F;&#x2F; 这里会阻塞，直到 ch1 有数据可读
    case &lt;-ch2:
        &#x2F;&#x2F; 这里也会阻塞，因为 ch2 没有数据可读
    &#125;
&#125;

&#x2F;&#x2F; 两个 goroutine 分别向 ch1 和 ch2 发送数据，
&#x2F;&#x2F; 然后尝试从对方的通道接收数据，
&#x2F;&#x2F; 由于它们的执行顺序不确定，可能会导致互相等待，从而发生死锁
func TestDeadlock2() &#123;
  ch1 :&#x3D; make(chan int)
  ch2 :&#x3D; make(chan int)
  go func() &#123;
    ch1 &lt;- 1 
    fmt.Println(&quot;Sent to ch1&quot;)
    &lt;-ch2
    fmt.Println(&quot;Received from ch2&quot;)
  &#125;()

  go func() &#123;
    ch2 &lt;- 2
    fmt.Println(&quot;Sent to ch2&quot;)
    &lt;-ch1
    fmt.Println(&quot;Received from ch1&quot;)
  &#125;()

  select &#123;&#125;
&#125;

func TestDeadlock3() &#123;
  getVal :&#x3D; func() int &#123;
    fmt.Println(&quot;getVal called&quot;)
    return 1
  &#125;
 	ch :&#x3D; make(chan int)
  input :&#x3D; make(chan int)
  go func() &#123;
      for i :&#x3D; 0; i &lt; 10; i++ &#123;
          input &lt;- i
      &#125;
      close(input)
  &#125;()
  &#x2F;&#x2F; select 中的 case 子句会先对 getVal() 和 &lt;-input 进行求值，
  &#x2F;&#x2F; 无论 select 最终选择哪个 case 执行，getVal() 都会被执行，
  &#x2F;&#x2F; 而 &lt;-input 的结果可能会有一个被丢弃，导致最终输出的次数少于预期，并且可能会出现死锁。
  for i :&#x3D; 0; i &lt; 10; i++ &#123;
      select &#123;
      case ch &lt;- getVal():
      case ch &lt;- &lt;-input:
      &#125;
      fmt.Println(&lt;-ch)
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</code></pre>
</li>
</ul>
<br/>

<p>（1）对于定义了 default 的 select 控制流，如果所有 case 都阻塞，那么就会进入执行 default 后退出。</p>
<p>（2）对于值为 nil 的 channel，由于 Nil channel 不可读不可写，这类 case 永远不会命中，运行时会被忽略， 这也是 case 语句中向值为 nil 的 channel 写数据不会 panic 的原因。</p>
<p>为了避免 <code>select</code> 监听 <code>chan</code> 时出现 deadlock，可以采取以下措施：</p>
<ul>
<li>合理设置 <code>default</code> 分支，以便在所有通道都阻塞时提供一个默认的执行路径，避免 <code>select</code> 无限阻塞。</li>
<li>仔细检查 <code>select</code> 中通道操作的求值顺序和可能产生的副作用，确保不会因为求值问题导致意外的阻塞。</li>
<li>确保多个 <code>goroutine</code> 之间对通道资源的访问是协调一致的，避免出现资源竞争和互相等待的情况。可以通过合理的设计和同步机制来保证 <code>goroutine</code> 之间的正确协作。</li>
<li>考虑使用超时机制，在 <code>select</code> 中添加超时 <code>case</code>，当等待通道操作超过一定时间时，执行超时逻辑，避免程序长时间阻塞。</li>
</ul>
<p>1、永久阻塞</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">select</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>2、错误检验，避免陷入循环</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  errChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
  job<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>errChan<span class="token punctuation">)</span>
  <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> someErr <span class="token operator">:=</span> <span class="token operator">&lt;-</span> errChan<span class="token punctuation">:</span>
      <span class="token keyword">if</span> someErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
         <span class="token comment">// ...</span>
          <span class="token keyword">break</span>
      <span class="token punctuation">&#125;</span>
  	<span class="token keyword">default</span><span class="token punctuation">:</span>
    	<span class="token comment">// 没有错误，快速检查</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3、定时等待</p>
<p>用管道来管理函数上下文，使用 select 来创建只有一定失效的管道。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// createWaitChan 创建一个 chan, 用于函数之间传递，但是 chan 会在指定之间后自动关闭</span>
<span class="token keyword">func</span> <span class="token function">createWaitChan</span><span class="token punctuation">(</span>stopCh <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
  stopChWithTimeOut <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">case</span> <span class="token operator">&lt;-</span>stopCh<span class="token punctuation">:</span>
      <span class="token comment">// 自然结束</span>
      <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>timeOut<span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token comment">// 阻塞，最长等待时长</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>stopChWithTimeOut<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> stopChWithTimeOut
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h4 id="实现原理-4"><a href="#实现原理-4" class="headerlink" title="实现原理"></a>实现原理</h4><h5 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// select case </span>
<span class="token keyword">type</span> scase <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  c    <span class="token operator">*</span>hchan         <span class="token comment">// chan, 每个 case 只能存放一个 channel</span>
  elem unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// data element</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// selectgo</span>
<span class="token comment">// 通过随机函数将原始 case 打乱</span>
<span class="token comment">// 循环遍历 case，如果 某个 case 可读、可写，跳出循环进行管道操作并返回</span>
<span class="token comment">// 如果遍历完所有 case，循环能正常结束，则看有没有 default， </span>
<span class="token comment">// 有就执行 default 并返回，否则 block 等待所有管道就绪，如果没有管道那就是永久阻塞。</span>
<span class="token keyword">func</span> <span class="token function">selectgo</span><span class="token punctuation">(</span>cas0 <span class="token operator">*</span>scase<span class="token punctuation">,</span> order0 <span class="token operator">*</span><span class="token builtin">uint16</span><span class="token punctuation">,</span> pc0 <span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">,</span> nsends<span class="token punctuation">,</span> nrecvs <span class="token builtin">int</span><span class="token punctuation">,</span> block <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// NOTE: In order to maintain a lean stack size, the number of scases</span>
  <span class="token comment">// is capped at 65536.</span>
  cas1 <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">]</span>scase<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>cas0<span class="token punctuation">)</span><span class="token punctuation">)</span>
  order1 <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token builtin">uint16</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>order0<span class="token punctuation">)</span><span class="token punctuation">)</span>

  ncases <span class="token operator">:=</span> nsends <span class="token operator">+</span> nrecvs
  scases <span class="token operator">:=</span> cas1<span class="token punctuation">[</span><span class="token punctuation">:</span>ncases<span class="token punctuation">:</span>ncases<span class="token punctuation">]</span> <span class="token comment">// case 数组 切片</span>
  pollorder <span class="token operator">:=</span> order1<span class="token punctuation">[</span><span class="token punctuation">:</span>ncases<span class="token punctuation">:</span>ncases<span class="token punctuation">]</span> <span class="token comment">// </span>
  lockorder <span class="token operator">:=</span> order1<span class="token punctuation">[</span>ncases<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>ncases<span class="token punctuation">:</span>ncases<span class="token punctuation">]</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// 过滤 channel == nil 的 case</span>
  norder <span class="token operator">:=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> scases <span class="token punctuation">&#123;</span>
    cas <span class="token operator">:=</span> <span class="token operator">&amp;</span>scases<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

    <span class="token comment">// Omit cases without channels from the poll and lock orders.</span>
    <span class="token keyword">if</span> cas<span class="token punctuation">.</span>c <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      cas<span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token boolean">nil</span> <span class="token comment">// allow GC</span>
      <span class="token keyword">continue</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 生成 case 的随机顺序， 保存到 pollorder</span>
    j <span class="token operator">:=</span> <span class="token function">fastrandn</span><span class="token punctuation">(</span><span class="token function">uint32</span><span class="token punctuation">(</span>norder <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    pollorder<span class="token punctuation">[</span>norder<span class="token punctuation">]</span> <span class="token operator">=</span> pollorder<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
    pollorder<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">uint16</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    norder<span class="token operator">++</span>
  <span class="token punctuation">&#125;</span>
  pollorder <span class="token operator">=</span> pollorder<span class="token punctuation">[</span><span class="token punctuation">:</span>norder<span class="token punctuation">]</span>
  lockorder <span class="token operator">=</span> lockorder<span class="token punctuation">[</span><span class="token punctuation">:</span>norder<span class="token punctuation">]</span>

  <span class="token comment">// sort the cases by Hchan address to get the locking order.</span>
  <span class="token comment">// simple heap sort, to guarantee n log n time and constant stack footprint.</span>
  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> lockorder <span class="token punctuation">&#123;</span>
    j <span class="token operator">:=</span> i
    <span class="token comment">// Start with the pollorder to permute cases on the same channel.</span>
    c <span class="token operator">:=</span> scases<span class="token punctuation">[</span>pollorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c
    <span class="token keyword">for</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> scases<span class="token punctuation">[</span>lockorder<span class="token punctuation">[</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">sortkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> c<span class="token punctuation">.</span><span class="token function">sortkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      k <span class="token operator">:=</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
      lockorder<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> lockorder<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
      j <span class="token operator">=</span> k
    <span class="token punctuation">&#125;</span>
    lockorder<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pollorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>lockorder<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">&#123;</span>
    o <span class="token operator">:=</span> lockorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    c <span class="token operator">:=</span> scases<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>c
    lockorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> lockorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    j <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
      k <span class="token operator">:=</span> j<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>
      <span class="token keyword">if</span> k <span class="token operator">>=</span> i <span class="token punctuation">&#123;</span>
        <span class="token keyword">break</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> k<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> i <span class="token operator">&amp;&amp;</span> scases<span class="token punctuation">[</span>lockorder<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">sortkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> scases<span class="token punctuation">[</span>lockorder<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">sortkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        k<span class="token operator">++</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> c<span class="token punctuation">.</span><span class="token function">sortkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> scases<span class="token punctuation">[</span>lockorder<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">sortkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        lockorder<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> lockorder<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
        j <span class="token operator">=</span> k
        <span class="token keyword">continue</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">&#125;</span>
    lockorder<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> o
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// lock all the channels involved in the select</span>
  <span class="token function">sellock</span><span class="token punctuation">(</span>scases<span class="token punctuation">,</span> lockorder<span class="token punctuation">)</span>

  <span class="token keyword">var</span> <span class="token punctuation">(</span>
    gp     <span class="token operator">*</span>g
    sg     <span class="token operator">*</span>sudog
    c      <span class="token operator">*</span>hchan
    k      <span class="token operator">*</span>scase
    sglist <span class="token operator">*</span>sudog
    sgnext <span class="token operator">*</span>sudog
    qp     unsafe<span class="token punctuation">.</span>Pointer
    nextp  <span class="token operator">*</span><span class="token operator">*</span>sudog
  <span class="token punctuation">)</span>

  <span class="token comment">// pass 1 - look for something already waiting</span>
  <span class="token keyword">var</span> casi <span class="token builtin">int</span>
  <span class="token keyword">var</span> cas <span class="token operator">*</span>scase
  <span class="token keyword">var</span> caseSuccess <span class="token builtin">bool</span>
  <span class="token keyword">var</span> caseReleaseTime <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
  <span class="token keyword">var</span> recvOK <span class="token builtin">bool</span>
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> casei <span class="token operator">:=</span> <span class="token keyword">range</span> pollorder <span class="token punctuation">&#123;</span>
    casi <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>casei<span class="token punctuation">)</span>
    cas <span class="token operator">=</span> <span class="token operator">&amp;</span>scases<span class="token punctuation">[</span>casi<span class="token punctuation">]</span>
    c <span class="token operator">=</span> cas<span class="token punctuation">.</span>c

    <span class="token keyword">if</span> casi <span class="token operator">>=</span> nsends <span class="token punctuation">&#123;</span>
      sg <span class="token operator">=</span> c<span class="token punctuation">.</span>sendq<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> sg <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">goto</span> recv
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> c<span class="token punctuation">.</span>qcount <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">goto</span> bufrecv
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> c<span class="token punctuation">.</span>closed <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">goto</span> rclose
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> raceenabled <span class="token punctuation">&#123;</span>
        <span class="token function">racereadpc</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">raceaddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">casePC</span><span class="token punctuation">(</span>casi<span class="token punctuation">)</span><span class="token punctuation">,</span> chansendpc<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> c<span class="token punctuation">.</span>closed <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">goto</span> sclose
      <span class="token punctuation">&#125;</span>
      sg <span class="token operator">=</span> c<span class="token punctuation">.</span>recvq<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> sg <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">goto</span> send
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> c<span class="token punctuation">.</span>qcount <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>dataqsiz <span class="token punctuation">&#123;</span>
        <span class="token keyword">goto</span> bufsend
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token operator">!</span>block <span class="token punctuation">&#123;</span>
    <span class="token function">selunlock</span><span class="token punctuation">(</span>scases<span class="token punctuation">,</span> lockorder<span class="token punctuation">)</span>
    casi <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">goto</span> retc
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// pass 2 - enqueue on all chans</span>
  gp <span class="token operator">=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> gp<span class="token punctuation">.</span>waiting <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"gp.waiting != nil"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  nextp <span class="token operator">=</span> <span class="token operator">&amp;</span>gp<span class="token punctuation">.</span>waiting
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> casei <span class="token operator">:=</span> <span class="token keyword">range</span> lockorder <span class="token punctuation">&#123;</span>
    casi <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>casei<span class="token punctuation">)</span>
    cas <span class="token operator">=</span> <span class="token operator">&amp;</span>scases<span class="token punctuation">[</span>casi<span class="token punctuation">]</span>
    c <span class="token operator">=</span> cas<span class="token punctuation">.</span>c
    sg <span class="token operator">:=</span> <span class="token function">acquireSudog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    sg<span class="token punctuation">.</span>g <span class="token operator">=</span> gp
    sg<span class="token punctuation">.</span>isSelect <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token comment">// No stack splits between assigning elem and enqueuing</span>
    <span class="token comment">// sg on gp.waiting where copystack can find it.</span>
    sg<span class="token punctuation">.</span>elem <span class="token operator">=</span> cas<span class="token punctuation">.</span>elem
    sg<span class="token punctuation">.</span>releasetime <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">if</span> t0 <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
      sg<span class="token punctuation">.</span>releasetime <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token punctuation">&#125;</span>
    sg<span class="token punctuation">.</span>c <span class="token operator">=</span> c
    <span class="token comment">// Construct waiting list in lock order.</span>
    <span class="token operator">*</span>nextp <span class="token operator">=</span> sg
    nextp <span class="token operator">=</span> <span class="token operator">&amp;</span>sg<span class="token punctuation">.</span>waitlink

    <span class="token keyword">if</span> casi <span class="token operator">&lt;</span> nsends <span class="token punctuation">&#123;</span>
      c<span class="token punctuation">.</span>sendq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>sg<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      c<span class="token punctuation">.</span>recvq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>sg<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// wait for someone to wake us up</span>
  gp<span class="token punctuation">.</span>param <span class="token operator">=</span> <span class="token boolean">nil</span>
  <span class="token comment">// Signal to anyone trying to shrink our stack that we're about</span>
  <span class="token comment">// to park on a channel. The window between when this G's status</span>
  <span class="token comment">// changes and when we set gp.activeStackChans is not safe for</span>
  <span class="token comment">// stack shrinking.</span>
  gp<span class="token punctuation">.</span>parkingOnChan<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token function">gopark</span><span class="token punctuation">(</span>selparkcommit<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> waitReasonSelect<span class="token punctuation">,</span> traceBlockSelect<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  gp<span class="token punctuation">.</span>activeStackChans <span class="token operator">=</span> <span class="token boolean">false</span>

  <span class="token function">sellock</span><span class="token punctuation">(</span>scases<span class="token punctuation">,</span> lockorder<span class="token punctuation">)</span>

  gp<span class="token punctuation">.</span>selectDone<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  sg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>sudog<span class="token punctuation">)</span><span class="token punctuation">(</span>gp<span class="token punctuation">.</span>param<span class="token punctuation">)</span>
  gp<span class="token punctuation">.</span>param <span class="token operator">=</span> <span class="token boolean">nil</span>

  <span class="token comment">// pass 3 - dequeue from unsuccessful chans</span>
  <span class="token comment">// otherwise they stack up on quiet channels</span>
  <span class="token comment">// record the successful case, if any.</span>
  <span class="token comment">// We singly-linked up the SudoGs in lock order.</span>
  casi <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
  cas <span class="token operator">=</span> <span class="token boolean">nil</span>
  caseSuccess <span class="token operator">=</span> <span class="token boolean">false</span>
  sglist <span class="token operator">=</span> gp<span class="token punctuation">.</span>waiting
  <span class="token comment">// Clear all elem before unlinking from gp.waiting.</span>
  <span class="token keyword">for</span> sg1 <span class="token operator">:=</span> gp<span class="token punctuation">.</span>waiting<span class="token punctuation">;</span> sg1 <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> sg1 <span class="token operator">=</span> sg1<span class="token punctuation">.</span>waitlink <span class="token punctuation">&#123;</span>
    sg1<span class="token punctuation">.</span>isSelect <span class="token operator">=</span> <span class="token boolean">false</span>
    sg1<span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token boolean">nil</span>
    sg1<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token boolean">nil</span>
  <span class="token punctuation">&#125;</span>
  gp<span class="token punctuation">.</span>waiting <span class="token operator">=</span> <span class="token boolean">nil</span>

  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> casei <span class="token operator">:=</span> <span class="token keyword">range</span> lockorder <span class="token punctuation">&#123;</span>
    k <span class="token operator">=</span> <span class="token operator">&amp;</span>scases<span class="token punctuation">[</span>casei<span class="token punctuation">]</span>
    <span class="token keyword">if</span> sg <span class="token operator">==</span> sglist <span class="token punctuation">&#123;</span>
      <span class="token comment">// sg has already been dequeued by the G that woke us up.</span>
      casi <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>casei<span class="token punctuation">)</span>
      cas <span class="token operator">=</span> k
      caseSuccess <span class="token operator">=</span> sglist<span class="token punctuation">.</span>success
      <span class="token keyword">if</span> sglist<span class="token punctuation">.</span>releasetime <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        caseReleaseTime <span class="token operator">=</span> sglist<span class="token punctuation">.</span>releasetime
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      c <span class="token operator">=</span> k<span class="token punctuation">.</span>c
      <span class="token keyword">if</span> <span class="token function">int</span><span class="token punctuation">(</span>casei<span class="token punctuation">)</span> <span class="token operator">&lt;</span> nsends <span class="token punctuation">&#123;</span>
        c<span class="token punctuation">.</span>sendq<span class="token punctuation">.</span><span class="token function">dequeueSudoG</span><span class="token punctuation">(</span>sglist<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        c<span class="token punctuation">.</span>recvq<span class="token punctuation">.</span><span class="token function">dequeueSudoG</span><span class="token punctuation">(</span>sglist<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    sgnext <span class="token operator">=</span> sglist<span class="token punctuation">.</span>waitlink
    sglist<span class="token punctuation">.</span>waitlink <span class="token operator">=</span> <span class="token boolean">nil</span>
    <span class="token function">releaseSudog</span><span class="token punctuation">(</span>sglist<span class="token punctuation">)</span>
    sglist <span class="token operator">=</span> sgnext
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> cas <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"selectgo: bad wakeup"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  c <span class="token operator">=</span> cas<span class="token punctuation">.</span>c

  <span class="token keyword">if</span> casi <span class="token operator">&lt;</span> nsends <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>caseSuccess <span class="token punctuation">&#123;</span>
      <span class="token keyword">goto</span> sclose
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    recvOK <span class="token operator">=</span> caseSuccess
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> raceenabled <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> casi <span class="token operator">&lt;</span> nsends <span class="token punctuation">&#123;</span>
      <span class="token function">raceReadObjectPC</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token function">casePC</span><span class="token punctuation">(</span>casi<span class="token punctuation">)</span><span class="token punctuation">,</span> chansendpc<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> cas<span class="token punctuation">.</span>elem <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token function">raceWriteObjectPC</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token function">casePC</span><span class="token punctuation">(</span>casi<span class="token punctuation">)</span><span class="token punctuation">,</span> chanrecvpc<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> msanenabled <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> casi <span class="token operator">&lt;</span> nsends <span class="token punctuation">&#123;</span>
      <span class="token function">msanread</span><span class="token punctuation">(</span>cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> c<span class="token punctuation">.</span>elemtype<span class="token punctuation">.</span>Size_<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> cas<span class="token punctuation">.</span>elem <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token function">msanwrite</span><span class="token punctuation">(</span>cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> c<span class="token punctuation">.</span>elemtype<span class="token punctuation">.</span>Size_<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> asanenabled <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> casi <span class="token operator">&lt;</span> nsends <span class="token punctuation">&#123;</span>
      <span class="token function">asanread</span><span class="token punctuation">(</span>cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> c<span class="token punctuation">.</span>elemtype<span class="token punctuation">.</span>Size_<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> cas<span class="token punctuation">.</span>elem <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token function">asanwrite</span><span class="token punctuation">(</span>cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> c<span class="token punctuation">.</span>elemtype<span class="token punctuation">.</span>Size_<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">selunlock</span><span class="token punctuation">(</span>scases<span class="token punctuation">,</span> lockorder<span class="token punctuation">)</span>
  <span class="token keyword">goto</span> retc

bufrecv<span class="token punctuation">:</span>
  <span class="token comment">// can receive from buffer</span>
  <span class="token keyword">if</span> raceenabled <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> cas<span class="token punctuation">.</span>elem <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token function">raceWriteObjectPC</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token function">casePC</span><span class="token punctuation">(</span>casi<span class="token punctuation">)</span><span class="token punctuation">,</span> chanrecvpc<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">racenotify</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c<span class="token punctuation">.</span>recvx<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> msanenabled <span class="token operator">&amp;&amp;</span> cas<span class="token punctuation">.</span>elem <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token function">msanwrite</span><span class="token punctuation">(</span>cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> c<span class="token punctuation">.</span>elemtype<span class="token punctuation">.</span>Size_<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> asanenabled <span class="token operator">&amp;&amp;</span> cas<span class="token punctuation">.</span>elem <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token function">asanwrite</span><span class="token punctuation">(</span>cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> c<span class="token punctuation">.</span>elemtype<span class="token punctuation">.</span>Size_<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  recvOK <span class="token operator">=</span> <span class="token boolean">true</span>
  qp <span class="token operator">=</span> <span class="token function">chanbuf</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c<span class="token punctuation">.</span>recvx<span class="token punctuation">)</span>
  <span class="token keyword">if</span> cas<span class="token punctuation">.</span>elem <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token function">typedmemmove</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> qp<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">typedmemclr</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> qp<span class="token punctuation">)</span>
  c<span class="token punctuation">.</span>recvx<span class="token operator">++</span>
  <span class="token keyword">if</span> c<span class="token punctuation">.</span>recvx <span class="token operator">==</span> c<span class="token punctuation">.</span>dataqsiz <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span>recvx <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token punctuation">&#125;</span>
  c<span class="token punctuation">.</span>qcount<span class="token operator">--</span>
  <span class="token function">selunlock</span><span class="token punctuation">(</span>scases<span class="token punctuation">,</span> lockorder<span class="token punctuation">)</span>
  <span class="token keyword">goto</span> retc

bufsend<span class="token punctuation">:</span>
  <span class="token comment">// can send to buffer</span>
  <span class="token keyword">if</span> raceenabled <span class="token punctuation">&#123;</span>
    <span class="token function">racenotify</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c<span class="token punctuation">.</span>sendx<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
    <span class="token function">raceReadObjectPC</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token function">casePC</span><span class="token punctuation">(</span>casi<span class="token punctuation">)</span><span class="token punctuation">,</span> chansendpc<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> msanenabled <span class="token punctuation">&#123;</span>
    <span class="token function">msanread</span><span class="token punctuation">(</span>cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> c<span class="token punctuation">.</span>elemtype<span class="token punctuation">.</span>Size_<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> asanenabled <span class="token punctuation">&#123;</span>
    <span class="token function">asanread</span><span class="token punctuation">(</span>cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> c<span class="token punctuation">.</span>elemtype<span class="token punctuation">.</span>Size_<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">typedmemmove</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> <span class="token function">chanbuf</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c<span class="token punctuation">.</span>sendx<span class="token punctuation">)</span><span class="token punctuation">,</span> cas<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>
  c<span class="token punctuation">.</span>sendx<span class="token operator">++</span>
  <span class="token keyword">if</span> c<span class="token punctuation">.</span>sendx <span class="token operator">==</span> c<span class="token punctuation">.</span>dataqsiz <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span>sendx <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token punctuation">&#125;</span>
  c<span class="token punctuation">.</span>qcount<span class="token operator">++</span>
  <span class="token function">selunlock</span><span class="token punctuation">(</span>scases<span class="token punctuation">,</span> lockorder<span class="token punctuation">)</span>
  <span class="token keyword">goto</span> retc

recv<span class="token punctuation">:</span>
  <span class="token comment">// can receive from sleeping sender (sg)</span>
  <span class="token function">recv</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> sg<span class="token punctuation">,</span> cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">selunlock</span><span class="token punctuation">(</span>scases<span class="token punctuation">,</span> lockorder<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> debugSelect <span class="token punctuation">&#123;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"syncrecv: cas0="</span><span class="token punctuation">,</span> cas0<span class="token punctuation">,</span> <span class="token string">" c="</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  recvOK <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">goto</span> retc

rclose<span class="token punctuation">:</span>
  <span class="token comment">// read at end of closed channel</span>
  <span class="token function">selunlock</span><span class="token punctuation">(</span>scases<span class="token punctuation">,</span> lockorder<span class="token punctuation">)</span>
  recvOK <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token keyword">if</span> cas<span class="token punctuation">.</span>elem <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token function">typedmemclr</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> cas<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> raceenabled <span class="token punctuation">&#123;</span>
    <span class="token function">raceacquire</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">raceaddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">goto</span> retc

send<span class="token punctuation">:</span>
  <span class="token comment">// can send to a sleeping receiver (sg)</span>
  <span class="token keyword">if</span> raceenabled <span class="token punctuation">&#123;</span>
    <span class="token function">raceReadObjectPC</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span> cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token function">casePC</span><span class="token punctuation">(</span>casi<span class="token punctuation">)</span><span class="token punctuation">,</span> chansendpc<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> msanenabled <span class="token punctuation">&#123;</span>
    <span class="token function">msanread</span><span class="token punctuation">(</span>cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> c<span class="token punctuation">.</span>elemtype<span class="token punctuation">.</span>Size_<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> asanenabled <span class="token punctuation">&#123;</span>
    <span class="token function">asanread</span><span class="token punctuation">(</span>cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> c<span class="token punctuation">.</span>elemtype<span class="token punctuation">.</span>Size_<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">send</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> sg<span class="token punctuation">,</span> cas<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">selunlock</span><span class="token punctuation">(</span>scases<span class="token punctuation">,</span> lockorder<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token keyword">goto</span> retc

retc<span class="token punctuation">:</span>
  <span class="token keyword">if</span> caseReleaseTime <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token function">blockevent</span><span class="token punctuation">(</span>caseReleaseTime<span class="token operator">-</span>t0<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> casi<span class="token punctuation">,</span> recvOK

sclose<span class="token punctuation">:</span>
  <span class="token comment">// send on closed channel</span>
  <span class="token function">selunlock</span><span class="token punctuation">(</span>scases<span class="token punctuation">,</span> lockorder<span class="token punctuation">)</span>
  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">plainError</span><span class="token punctuation">(</span><span class="token string">"send on closed channel"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>selectgo 函数实现要点：</p>
<ul>
<li><p>通过随机函数 <code>fastrandn</code> 将原始的 case 顺序打乱。</p>
</li>
<li><p>遍历 case 时，发现某个 case 就绪（chan 可读或者可写），则直接跳出循环进行管道操作并返回。</p>
</li>
<li><p>循环如果正常结束没有跳转，说明所有 case 没有就绪，如果有 default 语句则命中，否则 selectgo 将阻塞等待所有 chan。</p>
</li>
</ul>
<br/>

<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul>
<li>字符串一旦创建，其内容<strong>不可修改</strong>。</li>
<li>Go 的 <code>string</code> 本质是 <strong>字节序列</strong>，不强制要求内容必须是 UTF-8。</li>
<li>但字面量（如 <code>&quot;你好&quot;</code>）默认以 UTF-8 编码存储。</li>
<li>字符串切片（如 <code>s[:3]</code>）不会拷贝数据，而是共享原字符串的底层数组。</li>
</ul>
<h3 id="实现原理-5"><a href="#实现原理-5" class="headerlink" title="实现原理"></a>实现原理</h3><h4 id="数据结构-3"><a href="#数据结构-3" class="headerlink" title="数据结构"></a>数据结构</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// reflect.StringHeader（旧版）</span>
<span class="token keyword">type</span> StringHeader <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    Data <span class="token builtin">uintptr</span>  <span class="token comment">// 指向底层字节数组的指针</span>
    Len  <span class="token builtin">int</span>      <span class="token comment">// 字符串长度（字节数）</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// unsafe.String（Go 1.20+）</span>
<span class="token keyword">func</span> <span class="token function">String</span><span class="token punctuation">(</span>ptr <span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">len</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span>

<span class="token comment">// 内存布局</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>          <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
<span class="token operator">|</span>  Data  <span class="token operator">|</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token char">'H'</span> <span class="token operator">|</span> <span class="token char">'e'</span> <span class="token operator">|</span> <span class="token char">'l'</span> <span class="token operator">|</span> <span class="token char">'l'</span> <span class="token operator">|</span> <span class="token char">'o'</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>          <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
<span class="token operator">|</span>  Len<span class="token operator">=</span><span class="token number">5</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="byte-与-string-转换"><a href="#byte-与-string-转换" class="headerlink" title="byte 与 string 转换"></a>byte 与 string 转换</h4><p>正常来说，字符串转成切片，会产生拷贝。<strong>可以在字符串转成切片的时候不用发生拷贝呢？</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"fmt"</span>
  <span class="token string">"reflect"</span>
  <span class="token string">"unsafe"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  a <span class="token operator">:=</span><span class="token string">"aaa"</span>
  ssh <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>reflect<span class="token punctuation">.</span>StringHeader<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
  b <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ssh<span class="token punctuation">)</span><span class="token punctuation">)</span>
  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// byte 转 string</span>
<span class="token keyword">func</span> <span class="token function">bytesToString</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>1、<code>unsafe.Pointer(&amp;a)</code>方法可以得到变量<code>a</code>的地址。</p>
<p>2、<code>(*reflect.StringHeader)(unsafe.Pointer(&amp;a))</code> 可以把字符串 a 转成底层结构的形式。</p>
<p>3、<code>(*[]byte)(unsafe.Pointer(&amp;ssh)) </code>可以把 ssh 底层结构体转成 byte 的切片的指针。</p>
<p>4、再通过 <code>*</code>转为指针指向的实际内容。</p>
<h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 按字节遍历 </span>
s <span class="token operator">:=</span> <span class="token string">"hello"</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出字节值（uint8）</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 按 Unicode 遍历</span>
s <span class="token operator">:=</span> <span class="token string">"你好"</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token comment">// 输出 Unicode 字符</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程篇（3）读写锁 RWMutex</title>
    <url>/2023/12/15/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87%EF%BC%883%EF%BC%89%20RWMutex/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>

<h2 id="RWMutex"><a href="#RWMutex" class="headerlink" title="RWMutex"></a>RWMutex</h2><p>用于处理多读、少写的场景。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>Go 实现的是<code>写操作优先</code>：</p>
<p>如果队列中有 writer 在等待锁，则阻止任何新的 reader 获取读锁，进而避免<code>写操作饥饿</code>的问题。只要获得了读锁的锁读取完成，就会理解让 writer 获得写锁。</p>
<p>读写互斥，写写互斥，读写互斥时，写优先获得锁。当 writer 持有锁时，如果新来了读锁和写锁，则按照等待顺序依次获得锁，<code>避免读操作饥饿</code>。</p>
<div class="tabs" id="rwmutex-数据结构"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#rwmutex-数据结构-1">RWMutex</button></li><li class="tab"><button type="button" data-href="#rwmutex-数据结构-2">RLock</button></li><li class="tab"><button type="button" data-href="#rwmutex-数据结构-3">RULock</button></li><li class="tab"><button type="button" data-href="#rwmutex-数据结构-4">Lock</button></li><li class="tab"><button type="button" data-href="#rwmutex-数据结构-5">ULock</button></li><li class="tab"><button type="button" data-href="#rwmutex-数据结构-6">读者计数变为负数的原因</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="rwmutex-数据结构-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> RWMutex <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  w           Mutex        <span class="token comment">// held if there are pending writers</span>
  writerSem   <span class="token builtin">uint32</span>       <span class="token comment">// semaphore for writers to wait for completing readers</span>
  readerSem   <span class="token builtin">uint32</span>       <span class="token comment">// semaphore for readers to wait for completing writers</span>
  readerCount atomic<span class="token punctuation">.</span>Int32 <span class="token comment">// number of pending readers</span>
  readerWait  atomic<span class="token punctuation">.</span>Int32 <span class="token comment">// number of departing readers</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>RWMutex 关键成员说明：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>pending reader&#x2F;writer</td>
<td>等待（或者持有）锁的 reader&#x2F;writer</td>
</tr>
<tr>
<td>departing reader</td>
<td>持有读锁但是未释放锁的 reader</td>
</tr>
<tr>
<td>w</td>
<td>写锁</td>
</tr>
<tr>
<td>writerSem</td>
<td>用于阻塞&#x2F;唤醒 writer 的信号量</td>
</tr>
<tr>
<td>readerSem</td>
<td>用于阻塞&#x2F;唤醒 reader 的信号量</td>
</tr>
<tr>
<td>readerCount</td>
<td>当前 reader 总数量 &#x3D; 持有读锁的 reader 数 + 等待读锁的 reader 数<br/> 为什么会有  等待读锁的 reader？<br/>因为如果有 writer 在请求锁了，后续请求读的 reader 是没办法获得读锁的！</td>
</tr>
<tr>
<td>readerWait</td>
<td>当前持有读锁的 reader （departing reader）数量，<br/>从等待写锁的 writer 视角出发， writer 希望 reader 尽快离开（departing）</td>
</tr>
</tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="rwmutex-数据结构-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 利用原子操作时 readCount 计数 +1， 表示新来了 一个 reader</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>
    <span class="token boolean">_</span> <span class="token operator">=</span> rw<span class="token punctuation">.</span>w<span class="token punctuation">.</span>state
    race<span class="token punctuation">.</span><span class="token function">Disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 为了实现写优先，</span>
  <span class="token comment">// 新来的 writer 会把 readerCount 减去一个很大的数 rwmutexMaxReaders(1 &lt;&lt; 30)</span>
  <span class="token comment">// 从而让所有等待写锁的 reader 在此刻 等待写锁的完成</span>
  <span class="token keyword">if</span> rw<span class="token punctuation">.</span>readerCount<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// A writer is pending, wait for it.</span>
    <span class="token function">runtime_SemacquireRWMutexR</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerSem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>
    race<span class="token punctuation">.</span><span class="token function">Enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    race<span class="token punctuation">.</span><span class="token function">Acquire</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerSem<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="rwmutex-数据结构-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// RUnlock undoes a single RLock call;</span>
<span class="token comment">// it does not affect other simultaneous readers.</span>
<span class="token comment">// It is a run-time error if rw is not locked for reading</span>
<span class="token comment">// on entry to RUnlock.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>
    <span class="token boolean">_</span> <span class="token operator">=</span> rw<span class="token punctuation">.</span>w<span class="token punctuation">.</span>state
    race<span class="token punctuation">.</span><span class="token function">ReleaseMerge</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>writerSem<span class="token punctuation">)</span><span class="token punctuation">)</span>
    race<span class="token punctuation">.</span><span class="token function">Disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> r <span class="token operator">:=</span> rw<span class="token punctuation">.</span>readerCount<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Outlined slow-path to allow the fast-path to be inlined</span>
    rw<span class="token punctuation">.</span><span class="token function">rUnlockSlow</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>
    race<span class="token punctuation">.</span><span class="token function">Enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">rUnlockSlow</span><span class="token punctuation">(</span>r <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> r<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> r<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token operator">-</span>rwmutexMaxReaders <span class="token punctuation">&#123;</span>
    race<span class="token punctuation">.</span><span class="token function">Enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"sync: RUnlock of unlocked RWMutex"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// A writer is pending.</span>
  <span class="token keyword">if</span> rw<span class="token punctuation">.</span>readerWait<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// The last reader unblocks the writer.</span>
    <span class="token function">runtime_Semrelease</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>writerSem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="rwmutex-数据结构-4"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 为了实现写优先，当有 writer 等待锁时，</span>
<span class="token comment">// 先让 readerCount 减去一个 rwmutexMaxReaders(1 &lt;&lt; 30)，</span>
<span class="token comment">// 卡住有可能新进来的 reader</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>
    <span class="token boolean">_</span> <span class="token operator">=</span> rw<span class="token punctuation">.</span>w<span class="token punctuation">.</span>state
    race<span class="token punctuation">.</span><span class="token function">Disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// First, resolve competition with other writers.</span>
  rw<span class="token punctuation">.</span>w<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// Announce to readers there is a pending writer.</span>
  r <span class="token operator">:=</span> rw<span class="token punctuation">.</span>readerCount<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">-</span>rwmutexMaxReaders<span class="token punctuation">)</span> <span class="token operator">+</span> rwmutexMaxReaders
  <span class="token comment">// Wait for active readers.</span>
  <span class="token comment">// 等待所有活跃的读者释放完读锁，才能上写锁</span>
  <span class="token keyword">if</span> r <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> rw<span class="token punctuation">.</span>readerWait<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token function">runtime_SemacquireRWMutex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>writerSem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>
    race<span class="token punctuation">.</span><span class="token function">Enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    race<span class="token punctuation">.</span><span class="token function">Acquire</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerSem<span class="token punctuation">)</span><span class="token punctuation">)</span>
    race<span class="token punctuation">.</span><span class="token function">Acquire</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>writerSem<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="rwmutex-数据结构-5"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Unlock unlocks rw for writing. It is a run-time error if rw is</span>
<span class="token comment">// not locked for writing on entry to Unlock.</span>
<span class="token comment">//</span>
<span class="token comment">// As with Mutexes, a locked RWMutex is not associated with a particular</span>
<span class="token comment">// goroutine. One goroutine may RLock (Lock) a RWMutex and then</span>
<span class="token comment">// arrange for another goroutine to RUnlock (Unlock) it.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>RWMutex<span class="token punctuation">)</span> <span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>
    <span class="token boolean">_</span> <span class="token operator">=</span> rw<span class="token punctuation">.</span>w<span class="token punctuation">.</span>state
    race<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerSem<span class="token punctuation">)</span><span class="token punctuation">)</span>
    race<span class="token punctuation">.</span><span class="token function">Disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// Announce to readers there is no active writer.</span>
  r <span class="token operator">:=</span> rw<span class="token punctuation">.</span>readerCount<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>rwmutexMaxReaders<span class="token punctuation">)</span>
  <span class="token keyword">if</span> r <span class="token operator">>=</span> rwmutexMaxReaders <span class="token punctuation">&#123;</span>
    race<span class="token punctuation">.</span><span class="token function">Enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"sync: Unlock of unlocked RWMutex"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// Unblock blocked readers, if any.</span>
  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
    <span class="token function">runtime_Semrelease</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token punctuation">.</span>readerSem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// Allow other writers to proceed.</span>
  rw<span class="token punctuation">.</span>w<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> race<span class="token punctuation">.</span>Enabled <span class="token punctuation">&#123;</span>
    race<span class="token punctuation">.</span><span class="token function">Enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="rwmutex-数据结构-6"><p><strong>阻止新的读锁获取</strong></p>
<p><strong>原理：</strong>在 Go 的 sync.RWMutex 实现中，读者计数（readerCount）是一个有符号整数。正常情况下，读者计数记录的是当前持有读锁的协程数量，为非负数。当一个协程要获取写锁时，会尝试将读者计数减去一个很大的负数常量（rwmutexMaxReaders），使得读者计数变为负数。 </p>
<p><strong>效果：</strong>由于其他协程在尝试获取读锁时，会检查读者计数是否为负数，如果是负数就意味着有协程正在请求或已经持有写锁，此时这些协程会被阻塞，无法获取读锁。这样就可以阻止新的读协程进入，为写操作创造独占的环境。</p>
<p><strong>等待现有读操作完成</strong> </p>
<p><strong>原理：</strong>当写协程将读者计数变为负数后，还需要等待当前已经持有读锁的协程释放读锁。每个读协程在释放读锁时，会将读者计数加 1。写协程会不断检查读者计数，直到其恢复到减去 rwmutexMaxReaders 之前的状态（即所有读协程都释放了读锁），才会认为可以安全地获取写锁。</p>
<p><strong>释放写锁时的状态恢复</strong></p>
<p><strong>原理：</strong>当写协程完成写操作并释放写锁时，会将读者计数加上 rwmutexMaxReaders，使其恢复到正常的非负状态。这样其他协程就可以继续正常地获取读锁或写锁。</p>
<p><strong>保证了写优先</strong></p>
<p>通过将读者计数变为负数，sync.RWMutex 实现了写锁的排他性，确保在写操作进行时，不会有新的读操作干扰，同时也能正确处理现有读操作的完成，保证了读写锁的正确性和并发性能。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h3 id="使用原则"><a href="#使用原则" class="headerlink" title="使用原则"></a>使用原则</h3><p>1、<code>RWMutex</code> 不支持锁重入，不允许调用写锁后调用读锁（或者先调用读锁后调用写锁），这会导致死锁现象。</p>
<p>2、死锁出现时，可以用 <code>sync &quot;github.com/sasha-s/go-deadlock&quot;</code> 替换排查。</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程篇（8）Pool</title>
    <url>/2023/12/21/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87%EF%BC%888%EF%BC%89sync.Pool/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>

<h2 id="sync-Pool"><a href="#sync-Pool" class="headerlink" title="sync.Pool"></a>sync.Pool</h2><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"io"</span>
    <span class="token string">"net/http"</span>
    <span class="token string">"sync"</span>
<span class="token punctuation">)</span>

<span class="token comment">// 定义一个全局的 http.Client 池</span>
<span class="token keyword">var</span> httpClientPool <span class="token operator">=</span> sync<span class="token punctuation">.</span>Pool<span class="token punctuation">&#123;</span>
    <span class="token comment">// 当池为空时，使用 New 函数创建新的 http.Client 实例</span>
    <span class="token comment">// 使用时，一定要指定 New 方法，因为在并发量不大的时候，GC 有可能回收 Pool 中已经创建的对象</span>
    New<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">&#123;</span>
          Timeout<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 从池中获取一个 http.Client 实例</span>
    client <span class="token operator">:=</span> httpClientPool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">)</span>
    <span class="token keyword">defer</span> httpClientPool<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span>

    <span class="token comment">// 发起 HTTP 请求</span>
    resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"https://www.example.com"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 读取响应内容</span>
    body<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Error reading response:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>

    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Response body:"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li><strong>本地池和共享池</strong>：每个 P（处理器）都有一个本地池，用于存储该 P 上的对象。此外，还有一个共享池，用于存储所有 P 共享的对象。当从对象池中获取对象时，会先尝试从本地池获取，如果本地池为空，则从共享池获取。当将对象放回对象池时，会先尝试放回本地池，如果本地池已满，则放回共享池。</li>
<li><strong>垃圾回收清理</strong>：在每次 GC 时，当并发不大时，<code>sync.Pool</code> 有可能会清空空闲的对象池，以避免对象池中的对象占用过多的内存。</li>
</ul>
<div class="tabs" id="sync.pool"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sync.pool-1">sync.Pool</button></li><li class="tab"><button type="button" data-href="#sync.pool-2">Get</button></li><li class="tab"><button type="button" data-href="#sync.pool-3">Put</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sync.pool-1"><p><strong>local：</strong>是一个指向 [P]poolLocal 数组的指针，其中 P 是 Go 运行时的处理器数量。每个 poolLocal 实例对应一个处理器，用于存储该处理器私有的对象。 </p>
<p><strong>localSize：</strong> 表示 local 数组的大小。 </p>
<p><strong>victim 和 victimSize：</strong>在 GC 时，local 中的对象会被移动到 victim 中，用于实现对象池的清理和回收。 </p>
<p><strong>New：</strong>是一个函数指针，当对象池为空时，会调用该函数创建新的对象。 poolLocalInternal：包含两个字段，private 存储每个处理器私有的对象，shared 是一个链表，存储多个处理器共享的对象。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Pool <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    noCopy noCopy

    local     unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// 指向 [P]poolLocal 数组的指针</span>
    localSize <span class="token builtin">uintptr</span>        <span class="token comment">// local 数组的大小</span>

    victim     unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// 上一轮垃圾回收时的 local</span>
    victimSize <span class="token builtin">uintptr</span>        <span class="token comment">// victim 数组的大小</span>

    New <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 当对象池为空时，用于创建新对象的函数</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> poolLocal <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    poolLocalInternal

    <span class="token comment">// 用于静态存储每个 P 的 poolLocal 实例</span>
    pad <span class="token punctuation">[</span><span class="token number">128</span> <span class="token operator">-</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>poolLocalInternal<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> poolLocalInternal <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    private <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 每个 P 私有的对象</span>
    shared  poolChain   <span class="token comment">// 多个 P 共享的对象链表</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sync.pool-2"><p>1、调用 <code>p.pin()</code> 函数将当前 <code>goroutine</code> 固定到一个处理器上，并获取该处理器对应的 <code>poolLocal</code> 实例。 </p>
<p>2、首先尝试从 <code>poolLocal</code> 的 <code>private</code> 字段中获取对象，如果有则返回，并将 <code>private</code> 字段置为 nil。 </p>
<p>3、如果 <code>private</code> 字段为空，则尝试从 <code>shared 链表</code>中获取对象。 </p>
<p>4、如果 <code>shared 链表</code>也为空，则调用 <code>p.getSlow(pid)</code> 函数从其他处理器的 <code>shared 链表</code>中窃取对象。 </p>
<p>5、如果仍然没有获取到对象，且 <code>New</code> 函数不为 <code>nil</code>，则调用 <code>New</code> 函数创建一个新的对象。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Pool<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
    l<span class="token punctuation">,</span> pid <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">pin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    x <span class="token operator">:=</span> l<span class="token punctuation">.</span>private
    l<span class="token punctuation">.</span>private <span class="token operator">=</span> <span class="token boolean">nil</span>
    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 从共享链表中获取对象</span>
        x<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">popHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            x <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getSlow</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">runtime_procUnpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>New <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        x <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> x
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sync.pool-3"><ol>
<li>调用 <code>p.pin()</code> 函数将当前 goroutine 固定到一个处理器上，并获取该处理器对应的 <code>poolLocal</code> 实例。</li>
<li>如果 <code>poolLocal</code> 的 <code>private</code> 字段为空，则将对象放入 <code>private</code> 字段。</li>
<li>如果 <code>private</code> 字段不为空，则将对象放入 <code>shared 链表</code>的头部。</li>
</ol>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Pool<span class="token punctuation">)</span> <span class="token function">Put</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>
    l<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">pin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> l<span class="token punctuation">.</span>private <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        l<span class="token punctuation">.</span>private <span class="token operator">=</span> x
        x <span class="token operator">=</span> <span class="token boolean">nil</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> x <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        l<span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">pushHead</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">runtime_procUnpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程篇（7）并发 map</title>
    <url>/2023/12/18/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87%EF%BC%887%EF%BC%89%20%E5%B9%B6%E5%8F%91%20map/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>



<h2 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h2><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><br/>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><table>
<thead>
<tr>
<th>内部机制</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>空间冗余</strong></td>
<td>sync.Map 基于以空间换时间的思路设计实现，在物理意义上存在两个独立 map，分别是 readonly.m 和 dirty。</td>
</tr>
<tr>
<td><strong>读写分离</strong></td>
<td><code>readonly.m</code> 主要面向无锁访问的只读操作， 而 <code>dirty</code> 则面向加锁访问的读写操作。 <br>读操作优先无锁化访问 <code>readonly</code>，当击穿 <code>readonly</code> 时（<code>readonly</code> 数据 <code>miss</code>），才加锁访问 <code>dirty</code> 进行兜底。<br> 通过这种读写分离的机制，把更多读操作引导到 <code>readonly</code> 模块减少加锁互斥的频率，提高整体访问性能。</td>
</tr>
<tr>
<td><strong>广义读操作</strong></td>
<td>2 个 map 真正的实现类型是基于 key-entry 的形式，而 entry 是存储 value 指针的容器。<br/> 当插入一组不存在 key-entry 时，才是严格意义上的写操作。<br/>其他针对已存在的 key-entry 的更新操作，都是广义上的读操作，<br>可以通过读取出 key 对应 entry，再基于 CAS（compare-and-swap）操作完成内容更新。</td>
</tr>
<tr>
<td><strong>惰性删除</strong></td>
<td><em><strong>删除 key-entry 时，不是立即从 map 中删除 key，而是尝试</strong></em>读到 key 对应 entry，然后通过 cas 将 entry 标记为软删除态（nil）。<br>后续在迁移流程统一执行实际删除操作. 因此*<strong>针对已存在的 key-entry 的删除操作，也是广义上的读操作</strong>。</td>
</tr>
<tr>
<td><strong>正向迁移</strong></td>
<td>由于 readonly 是只读模式，所以新增插入数据会作用到 dirty 中，导致 readonly 数据仅是 dirty 的子集。 <br>sync.Map 中通过 misses 计数器记录 readonly 被读操作击穿的次数（readonly 存在缺失数据的比重）。<br>当比重达到阈值时，会将 dirty 中的全量数据覆盖到 readonly 中补齐其缺失的部分，此为正向迁移流程(missLocked).</td>
</tr>
<tr>
<td><strong>逆向迁移</strong></td>
<td>由于 sync.Map 中的延迟删除机制，被置为删除态的 entry 需要有额外的回收时机。<br>在执行完正向迁移后，会短暂地将 dirty 置空，并在随后到来的下一次击穿 readonly 的插入行为中，<br>执行逆向迁移流程（dirtyLocked）——遍历 readonly，过滤所有删除态 entry，并将仍存在的 entry 拷贝到 dirty 中。<br>下一次因正向迁移而使用 dirty 覆盖 readonly 时，这部分删除态 entry 就会丢失引用，实现事实意义上的回收。</td>
</tr>
<tr>
<td><strong>软硬删除</strong></td>
<td>sync.Map 的软删除行为是在逻辑意义上将 entry 更新为软删除态（nil）。<br>反之，如果想要恢复一笔已删除的 key-entry，也只需要将 entry 状态<br>由软删除态（nil）恢复成正常态即可，这样都属于广义上的读行为，是无需加锁。<br>然而，如果一个 entry 处于硬删除态（expunged），那么它就是不可恢复的，必须通过加锁后执行插入操作来补齐对应数据。</td>
</tr>
</tbody></table>
<div class="tabs" id="sync.map"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#sync.map-1">sync.Map</button></li><li class="tab"><button type="button" data-href="#sync.map-2">Load 读操作</button></li><li class="tab"><button type="button" data-href="#sync.map-3">Store 写操作</button></li><li class="tab"><button type="button" data-href="#sync.map-4">Delete 删除操作</button></li><li class="tab"><button type="button" data-href="#sync.map-5">missLocked 提升操作</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="sync.map-1"><ul>
<li><strong>read</strong>：是一个 <code>atomic.Value</code> 类型，实际存储的是 <code>readOnly</code> 结构体。<code>readOnly</code> 结构体包含一个普通的 <code>map</code> 和一个 <code>amended</code> 布尔值。<code>read</code> 中的 <code>map</code> 可以无锁访问，适合并发读操作。</li>
<li><strong>dirty</strong>：是一个普通的 map，用于存储那些不在 read 中的键值对。当 read 中不包含某个键时，会去 dirty 中查找。</li>
<li><strong>misses</strong>：是一个计数器，记录从 read 中查找键但未找到的次数。当 misses 达到一定阈值时，会将 dirty 提升为 read，并清空 dirty。</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Map <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  mu Mutex

  <span class="token comment">// read contains the portion of the map's contents that are safe for</span>
  <span class="token comment">// concurrent access (with or without mu held).</span>
  <span class="token comment">//</span>
  <span class="token comment">// The read field itself is always safe to load, but must only be stored with</span>
  <span class="token comment">// mu held.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Entries stored in read may be updated concurrently without mu, but updating</span>
  <span class="token comment">// a previously-expunged entry requires that the entry be copied to the dirty</span>
  <span class="token comment">// map and unexpunged with mu held.</span>
  read atomic<span class="token punctuation">.</span>Pointer<span class="token punctuation">[</span>readOnly<span class="token punctuation">]</span>

  <span class="token comment">// dirty contains the portion of the map's contents that require mu to be</span>
  <span class="token comment">// held. To ensure that the dirty map can be promoted to the read map quickly,</span>
  <span class="token comment">// it also includes all of the non-expunged entries in the read map.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Expunged entries are not stored in the dirty map. An expunged entry in the</span>
  <span class="token comment">// clean map must be unexpunged and added to the dirty map before a new value</span>
  <span class="token comment">// can be stored to it.</span>
  <span class="token comment">//</span>
  <span class="token comment">// If the dirty map is nil, the next write to the map will initialize it by</span>
  <span class="token comment">// making a shallow copy of the clean map, omitting stale entries.</span>
  dirty <span class="token keyword">map</span><span class="token punctuation">[</span>any<span class="token punctuation">]</span><span class="token operator">*</span>entry

  <span class="token comment">// misses counts the number of loads since the read map was last updated that</span>
  <span class="token comment">// needed to lock mu to determine whether the key was present.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Once enough misses have occurred to cover the cost of copying the dirty</span>
  <span class="token comment">// map, the dirty map will be promoted to the read map (in the unamended</span>
  <span class="token comment">// state) and the next store to the map will make a new dirty copy.</span>
  misses <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> readOnly <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  m       <span class="token keyword">map</span><span class="token punctuation">[</span>any<span class="token punctuation">]</span><span class="token operator">*</span>entry
  amended <span class="token builtin">bool</span> <span class="token comment">// true if the dirty map contains some key not in m.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sync.map-2"><p>读操作（无锁读）首先尝试从 read 中查找键值对。如果找到，则直接返回结果，无需加锁，这使得读操作非常高效。如果 <code>read</code> 中未找到且 <code>amended == true</code>，说明 <code>dirty</code> 中可能包含该键，此时加锁，再次检查 <code>read</code>，若仍未找到则从 <code>dirty</code> 中查找，并调用 <code>missLocked</code> 方法记录一次未命中。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Load</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    read<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> m<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>readOnly<span class="token punctuation">)</span>
    e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">&amp;&amp;</span> read<span class="token punctuation">.</span>amended <span class="token punctuation">&#123;</span>
        m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 双重检查，避免在加锁期间 read 被更新</span>
        read<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> m<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>readOnly<span class="token punctuation">)</span>
        e<span class="token punctuation">,</span> ok <span class="token operator">=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">&amp;&amp;</span> read<span class="token punctuation">.</span>amended <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">,</span> ok <span class="token operator">=</span> m<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
            <span class="token comment">// 记录一次未命中</span>
            m<span class="token punctuation">.</span><span class="token function">missLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sync.map-3"><p>写操作首先尝试在 <code>read</code> 中查找该键，如果找到且该键对应的 <code>entry</code> 可以直接更新，则直接更新并返回。如果 <code>read</code> 中未找到，加锁后再次检查，若仍未找到，根据情况将 <code>entry</code> 添加到 <code>dirty</code> 中，并更新 <code>amended</code> 标志。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    read<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> m<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>readOnly<span class="token punctuation">)</span>
    <span class="token keyword">if</span> e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span><span class="token function">tryStore</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>

    m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    read<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> m<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>readOnly<span class="token punctuation">)</span>
    <span class="token keyword">if</span> e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> e<span class="token punctuation">.</span><span class="token function">unexpungeLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 如果 entry 之前被标记为 expunged，将其添加到 dirty 中</span>
            m<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> e
        <span class="token punctuation">&#125;</span>
        e<span class="token punctuation">.</span><span class="token function">storeLocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
        e<span class="token punctuation">.</span><span class="token function">storeLocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token operator">!</span>read<span class="token punctuation">.</span>amended <span class="token punctuation">&#123;</span>
            <span class="token comment">// 如果 read 中不包含该键且 amended 为 false，将 dirty 初始化为 read 的副本</span>
            m<span class="token punctuation">.</span><span class="token function">dirtyLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            m<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>readOnly<span class="token punctuation">&#123;</span>m<span class="token punctuation">:</span> read<span class="token punctuation">.</span>m<span class="token punctuation">,</span> amended<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        m<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newEntry</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sync.map-4"><p>删除操作首先尝试从 <code>read</code> 中查找该键，如果找到，则将该键对应的 <code>entry</code> 标记为删除。如果 <code>read</code> 中未找到且 <code>amended == true</code>，加锁后从 <code>dirty</code> 中删除该键。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Delete</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    read<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> m<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>readOnly<span class="token punctuation">)</span>
    e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">&amp;&amp;</span> read<span class="token punctuation">.</span>amended <span class="token punctuation">&#123;</span>
        m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        read<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> m<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>readOnly<span class="token punctuation">)</span>
        e<span class="token punctuation">,</span> ok <span class="token operator">=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">&amp;&amp;</span> read<span class="token punctuation">.</span>amended <span class="token punctuation">&#123;</span>
            <span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>dirty<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> ok <span class="token punctuation">&#123;</span>
        e<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="sync.map-5"><p>当 <code>misses</code> 计数器达到 <code>dirty</code> 的长度时，说明从 <code>read</code> 中查找键的未命中次数过多，此时将 <code>dirty</code> 提升为 <code>read</code>，并清空 <code>dirty</code>，同时重置 <code>misses</code> 计数器。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">missLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    m<span class="token punctuation">.</span>misses<span class="token operator">++</span>
    <span class="token keyword">if</span> m<span class="token punctuation">.</span>misses <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>
    m<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>readOnly<span class="token punctuation">&#123;</span>m<span class="token punctuation">:</span> m<span class="token punctuation">.</span>dirty<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    m<span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">nil</span>
    m<span class="token punctuation">.</span>misses <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><table>
<thead>
<tr>
<th>sync.Map 的局限性</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>不适用于插入写操作</strong></td>
<td>在插入写操作中，sync.Map 退化为基于互斥锁 <code>Mutex</code> + <code>dirty map</code> 实现的基础结构，此时不存在性能优势，反而增加成本。</td>
</tr>
<tr>
<td><strong>存在性能抖动</strong></td>
<td>由于延迟删除机制的存在，在 sync.Map 执行到逆向迁移 dirtyLocked 流程时，会对 readonly 进行线性遍历，这次操作是 O(N) 的，相较于其他 O(1) 的访问操作，存在明显的性能短板。</td>
</tr>
<tr>
<td><strong>不利于序列化</strong></td>
<td>由于底层复杂的结构设计，sync.Map 不像 go 中普通 map 一样，天然契合序列化&#x2F;反序列化能力。</td>
</tr>
<tr>
<td><strong>不利于数量统计</strong></td>
<td>由于延迟删除机制的存在，sync.Map 无法直接通过 entry 个数反映出 key-value 数量，因为其中可能存在处于删除态的 entry。</td>
</tr>
</tbody></table>
<p>针对不同的读写场景选择：</p>
<table>
<thead>
<tr>
<th>RWMutex + map</th>
<th>sync.Map</th>
<th>conccurent-map</th>
<th>go-cache</th>
<th>haxmap</th>
</tr>
</thead>
<tbody><tr>
<td>多读少写的场景</td>
<td>适用于单次写，多次读的场景</td>
<td>分片加锁，更高效的并发 map</td>
<td></td>
<td>读多写多</td>
</tr>
<tr>
<td></td>
<td>无锁读、写操作相对复杂<br/>如果写操作频繁，会导致锁竞争加剧，性能下降</td>
<td>分段锁 map 的思路是将一个大的 map 分成多个小的 map，每个小 map 有自己的锁。这样可以减少锁的粒度，降低锁竞争，提高并发性能。</td>
<td></td>
<td>由于 haxmap 对插入和删除操作进行了优化，因此适用于需要频繁进行这些操作的场景。<br/>采用了无锁或细粒度锁的设计，减少了多个 goroutine 之间的锁竞争<br/>使用了原子操作来实现并发安全，避免了传统锁机制带来的性能开销。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Go 并发编程篇（6） 单例化利器 sync.Once</title>
    <url>/2023/12/17/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87%EF%BC%886%EF%BC%89%20%E4%B8%80%E6%AC%A1%E6%80%A7%E5%88%9D%E5%A7%8B%E5%8C%96%E6%8E%A7%E5%88%B6%20sync.Once/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该篇为鸟窝的《Go语言并发编程》读书笔记及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>



<h2 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"sync"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> once syncOnce
  f <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// do sth of iniitializing..</span>
  <span class="token punctuation">&#125;</span>
  once<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br/>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>利用原子操作初步判断，如果还没有初始化，进一步加锁保证有且只有一个 goroutine 进入初始化步骤：</p>
<p>Once 使用一个互斥锁，这样在初始化时，如果有并发的 goroutine，它会利用互斥锁保证只有一个goroutine 进行初始化，同时利用双重检查（double-checking）机制，再次判断 o.done 的值是否为0；如果为 0，则表示第一次执行，执行完毕后就将 o.done 置为1，然后释放锁。</p>
<p>双重检查（double-checking）机制保证，即使多个 goroutine 进入了 Do 方法，后续的 goroutine 会看到 done &#x3D;&#x3D; 1，也不会再次执行 f。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> sync

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"sync/atomic"</span>
<span class="token punctuation">)</span>

<span class="token comment">// Once is an object that will perform exactly one action.</span>
<span class="token comment">//</span>
<span class="token comment">// A Once must not be copied after first use.</span>
<span class="token comment">//</span>
<span class="token comment">// In the terminology of the Go memory model,</span>
<span class="token comment">// the return from f “synchronizes before”</span>
<span class="token comment">// the return from any call of once.Do(f).</span>
<span class="token keyword">type</span> Once <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// done indicates whether the action has been performed.</span>
  <span class="token comment">// It is first in the struct because it is used in the hot path.</span>
  <span class="token comment">// The hot path is inlined at every call site.</span>
  <span class="token comment">// Placing done first allows more compact instructions on some architectures (amd64/386),</span>
  <span class="token comment">// and fewer instructions (to calculate offset) on other architectures.</span>
  done atomic<span class="token punctuation">.</span>Uint32
  m    Mutex
<span class="token punctuation">&#125;</span>

<span class="token comment">// Do calls the function f if and only if Do is being called for the</span>
<span class="token comment">// first time for this instance of [Once]. In other words, given</span>
<span class="token comment">//</span>
<span class="token comment">//	var once Once</span>
<span class="token comment">//</span>
<span class="token comment">// if once.Do(f) is called multiple times, only the first call will invoke f,</span>
<span class="token comment">// even if f has a different value in each invocation. A new instance of</span>
<span class="token comment">// Once is required for each function to execute.</span>
<span class="token comment">//</span>
<span class="token comment">// Do is intended for initialization that must be run exactly once. Since f</span>
<span class="token comment">// is niladic, it may be necessary to use a function literal to capture the</span>
<span class="token comment">// arguments to a function to be invoked by Do:</span>
<span class="token comment">//</span>
<span class="token comment">//	config.once.Do(func() &#123; config.init(filename) &#125;)</span>
<span class="token comment">//</span>
<span class="token comment">// Because no call to Do returns until the one call to f returns, if f causes</span>
<span class="token comment">// Do to be called, it will deadlock.</span>
<span class="token comment">//</span>
<span class="token comment">// If f panics, Do considers it to have returned; future calls of Do return</span>
<span class="token comment">// without calling f.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Once<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Note: Here is an incorrect implementation of Do:</span>
  <span class="token comment">//</span>
  <span class="token comment">//	if o.done.CompareAndSwap(0, 1) &#123;</span>
  <span class="token comment">//		f()</span>
  <span class="token comment">//	&#125;</span>
  <span class="token comment">//</span>
  <span class="token comment">// Do guarantees that when it returns, f has finished.</span>
  <span class="token comment">// This implementation would not implement that guarantee:</span>
  <span class="token comment">// given two simultaneous calls, the winner of the cas would</span>
  <span class="token comment">// call f, and the second would return immediately, without</span>
  <span class="token comment">// waiting for the first's call to f to complete.</span>
  <span class="token comment">// This is why the slow path falls back to a mutex, and why</span>
  <span class="token comment">// the o.done.Store must be delayed until after f returns.</span>

  <span class="token keyword">if</span> o<span class="token punctuation">.</span>done<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Outlined slow-path to allow inlining of the fast-path.</span>
    o<span class="token punctuation">.</span><span class="token function">doSlow</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Once<span class="token punctuation">)</span> <span class="token function">doSlow</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  o<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 加锁</span>
  <span class="token keyword">defer</span> o<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> o<span class="token punctuation">.</span>done<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> <span class="token comment">// double-checking</span>
    <span class="token keyword">defer</span> o<span class="token punctuation">.</span>done<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token operator">*</span>Uint32<span class="token punctuation">)</span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint32</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">LoadUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程篇（9）Context</title>
    <url>/2023/12/22/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87%EF%BC%889%EF%BC%89Context/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>

<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h3 id="Context-接口定义"><a href="#Context-接口定义" class="headerlink" title="Context 接口定义"></a>Context 接口定义</h3><p>Context 接口定义了跨 API 边界携带请求信息的标准方式。它可以携带截止时间（deadline）、撤销信号（cancellation signal）以及其他值。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Context <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span>
    <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
    <span class="token function">Value</span><span class="token punctuation">(</span>key any<span class="token punctuation">)</span> any
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="Context-Error"><a href="#Context-Error" class="headerlink" title="Context Error"></a>Context Error</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> Canceled <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"context canceled"</span><span class="token punctuation">)</span> <span class="token comment">// context 被 cancel 时会报此错误；</span>


<span class="token keyword">var</span> DeadlineExceeded <span class="token builtin">error</span> <span class="token operator">=</span> deadlineExceededError<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>


<span class="token keyword">type</span> deadlineExceededError <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">// context 超时时会报此错误.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>deadlineExceededError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>   <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"context deadline exceeded"</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>deadlineExceededError<span class="token punctuation">)</span> <span class="token function">Timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>   <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>deadlineExceededError<span class="token punctuation">)</span> <span class="token function">Temporary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="emptyCtx"><a href="#emptyCtx" class="headerlink" title="emptyCtx"></a>emptyCtx</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// emptyCtx 的父类： Context</span>
<span class="token keyword">type</span> emptyCtx <span class="token builtin">int</span> <span class="token comment">// 类型为一个整型</span>

<span class="token comment">// 返回一个公元元年时间以及 false 的 flag，标识当前 context 不存在过期时间；</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 方法返回一个 nil 值，用户无论往 nil 中写入或者读取数据，均会陷入阻塞</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key any<span class="token punctuation">)</span> any <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// // backgroundCtx、todoCtx 的父类： Context， Stringer</span>
<span class="token keyword">type</span> backgroundCtx <span class="token keyword">struct</span><span class="token punctuation">&#123;</span> emptyCtx <span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> todoCtx <span class="token keyword">struct</span><span class="token punctuation">&#123;</span> emptyCtx <span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>backgroundCtx<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string">"context.Background"</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>todoCtx<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string">"context.TODO"</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="cancelCtx"><a href="#cancelCtx" class="headerlink" title="cancelCtx"></a>cancelCtx</h3><p>cancelCtx 表示可撤销的上下文。当 cancelCtx 被撤销时，它也会撤销任何实现了 canceler 接口的子级。</p>
<div class="tabs" id="cancelctx"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#cancelctx-1">cancelCtx</button></li><li class="tab"><button type="button" data-href="#cancelctx-2">Err()</button></li><li class="tab"><button type="button" data-href="#cancelctx-3">Value()</button></li><li class="tab"><button type="button" data-href="#cancelctx-4">propagateCancel()</button></li><li class="tab"><button type="button" data-href="#cancelctx-5">parentCancelCtx</button></li><li class="tab"><button type="button" data-href="#cancelctx-6">cancel()</button></li><li class="tab"><button type="button" data-href="#cancelctx-7">removeChild</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="cancelctx-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// cancelCtx 的父类： Context, Stringer, canceler</span>
<span class="token keyword">type</span> cancelCtx <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    Context <span class="token comment">// 父 Context</span>
    <span class="token comment">// Mutex 用以协调并发场景下的资源获取</span>
    mu       sync<span class="token punctuation">.</span>Mutex            <span class="token comment">// protects following fields</span>
    <span class="token comment">// 用以反映 cancelCtx 生命周期的通道</span>
    done     atomic<span class="token punctuation">.</span>Value          <span class="token comment">// of chan struct&#123;&#125;, created lazily, closed by first cancel call</span>
    <span class="token comment">// 一个 set，指向 cancelCtx 的所有子 context</span>
    children <span class="token keyword">map</span><span class="token punctuation">[</span>canceler<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// set to nil by the first cancel call</span>
    <span class="token comment">// 记录了当前 cancelCtx 的错误</span>
    err      <span class="token builtin">error</span>                 <span class="token comment">// set to non-nil by the first cancel call</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> canceler <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
  <span class="token function">cancel</span><span class="token punctuation">(</span>removeFromParent <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
  <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">contextName</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".WithCancel"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cancelctx-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
  c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  err <span class="token operator">:=</span> c<span class="token punctuation">.</span>err
  c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> err
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cancelctx-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key any<span class="token punctuation">)</span> any <span class="token punctuation">&#123;</span>
  <span class="token comment">// 倘若 key 特定值 &amp;cancelCtxKey，则返回 cancelCtx 自身的指针</span>
  <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token operator">&amp;</span>cancelCtxKey <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> c
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token function">value</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<!-- endtab Done()-->

<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// （1）基于原子操作，读取 cancelCtx 中的 chan；倘若已存在，则直接返回；</span>
<span class="token comment">//（2）加锁后，在此检查 chan 是否存在，若存在则返回；（double-checking）</span>
<span class="token comment">// （3）初始化 chan 存储到 aotmic.Value 当中，并返回.（懒加载机制）</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
  d <span class="token operator">:=</span> c<span class="token punctuation">.</span>done<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 一开始不加锁，尽可能用细粒度的原子操作，高效</span>
  <span class="token keyword">if</span> d <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> d<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">defer</span> c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  d <span class="token operator">=</span> c<span class="token punctuation">.</span>done<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> d <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    d <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    c<span class="token punctuation">.</span>done<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> d<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<!-- tab WithCancel()-->

<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// （1）校验父 Context 非空；</span>
<span class="token comment">//（2）注入父 Context 构造好一个新的 cancelCtx；</span>
<span class="token comment">//（3）在 propagateCancel 方法内启动一个守护协程，</span>
<span class="token comment">// 以保证父 Context 终止时，该 cancelCtx 也会被终止；</span>
<span class="token comment">//（4）将 cancelCtx 返回，连带返回一个用以终止该 cancelCtx 的闭包函数.</span>
<span class="token keyword">func</span> <span class="token function">WithCancel</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>ctx Context<span class="token punctuation">,</span> cancel CancelFunc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> parent <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"cannot create context from nil parent"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  c <span class="token operator">:=</span> <span class="token function">newCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
  <span class="token function">propagateCancel</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Canceled<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cancelctx-4"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 用以传递父子 Context 之间的 cancel 事件:</span>
<span class="token comment">// （1）if parent 是不会被 cancel 的类型（如 emptyCtx），则直接返回；</span>
<span class="token comment">//（2）if parent 已经被 cancel，则直接终止子 context，并以 parent 的 err 作为子 context 的 err；</span>
<span class="token comment">//（3）if parent 是 cancelCtx 的类型，则加锁，并将子 context 添加到 parent 的 children map 当中；</span>
<span class="token comment">//（4）if parent 不是 cancelCtx 类型，但又存在 cancel 的能力（比如用户自定义实现的 context），则启动一个协程，通过多路复用的方式监控 parent 状态，倘若其终止，则同时终止子 context，并透传 parent 的 err.</span>
<span class="token keyword">func</span> <span class="token function">propagateCancel</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> child canceler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  done <span class="token operator">:=</span> parent<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> done <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token comment">// parent is never canceled</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>
    <span class="token comment">// parent is already canceled</span>
    child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> parent<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token keyword">default</span><span class="token punctuation">:</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> p<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token function">parentCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
    p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> p<span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// parent has already been canceled</span>
      child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> p<span class="token punctuation">.</span>children <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        p<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>canceler<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      p<span class="token punctuation">.</span>children<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goroutines<span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">case</span> <span class="token operator">&lt;-</span>parent<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> parent<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">case</span> <span class="token operator">&lt;-</span>child<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">parentCancelCtx</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>cancelCtx<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  done <span class="token operator">:=</span> parent<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> done <span class="token operator">==</span> closedchan <span class="token operator">||</span> done <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span>
  p<span class="token punctuation">,</span> ok <span class="token operator">:=</span> parent<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cancelCtxKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span>
  pdone<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> p<span class="token punctuation">.</span>done<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> pdone <span class="token operator">!=</span> done <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> p<span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cancelctx-5"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cancelctx-6"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span> <span class="token function">cancel</span><span class="token punctuation">(</span>removeFromParent <span class="token builtin">bool</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> cause <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ....</span>
  d<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> c<span class="token punctuation">.</span>done<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> d <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span>done<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>closedchan<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token comment">// 直接关闭通道</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span> child <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>children <span class="token punctuation">&#123;</span>
    child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> cause<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  c<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token boolean">nil</span>
  c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> removeFromParent <span class="token punctuation">&#123;</span>
    <span class="token function">removeChild</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 可以调用 cancel 方法手动撤销，</span>
<span class="token comment">// 内部会 for 循环遍历 c.children 调用 cancel 方法，</span>
<span class="token comment">// 一旦触发，撤销信号就会立即传达给 Context ，并由它的 Done 方法的返回值（通道）表达出来。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cancelctx-7"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// removeChild removes a context from its parent.</span>
<span class="token keyword">func</span> <span class="token function">removeChild</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> child canceler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> s<span class="token punctuation">,</span> ok <span class="token operator">:=</span> parent<span class="token punctuation">.</span><span class="token punctuation">(</span>stopCtx<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
    s<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>
  p<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token function">parentCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>
  p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> p<span class="token punctuation">.</span>children <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token function">delete</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>children<span class="token punctuation">,</span> child<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h3 id="valueCtx"><a href="#valueCtx" class="headerlink" title="valueCtx"></a>valueCtx</h3><div class="tabs" id="valuectx"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#valuectx-1">valueCtx</button></li><li class="tab"><button type="button" data-href="#valuectx-2">valueCtx String</button></li><li class="tab"><button type="button" data-href="#valuectx-3">WithValue</button></li><li class="tab"><button type="button" data-href="#valuectx-4">Value</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="valuectx-1"><p>包含键值对和指向父类指针</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// valueCtx 的父类： Context, Stringer</span>
<span class="token keyword">type</span> valueCtx <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  Context
  key<span class="token punctuation">,</span> val any
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="valuectx-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Stringer 接口定义了一个用于生成字符串的标准方式。</span>
<span class="token comment">// String() 方法会返回一个字符串，通常用于调试和日志记录。</span>
<span class="token keyword">type</span> Stringer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
  <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// stringify tries a bit to stringify v, without using fmt, since we don't</span>
<span class="token comment">// want context depending on the unicode tables. This is only used by</span>
<span class="token comment">// *valueCtx.String().</span>
<span class="token keyword">func</span> <span class="token function">stringify</span><span class="token punctuation">(</span>v any<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> s <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> stringer<span class="token punctuation">:</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> s
  <span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">"&lt;nil>"</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> reflectlite<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>valueCtx<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">contextName</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".WithValue("</span> <span class="token operator">+</span>
    <span class="token function">stringify</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span>
    <span class="token function">stringify</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="valuectx-3"><p>构造出 valueCtx，包含父亲节点指针，和自身键值对</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">WithValue</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val any<span class="token punctuation">)</span> Context <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> parent <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"cannot create context from nil parent"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"nil key"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>reflectlite<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Comparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"key is not comparable"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>valueCtx<span class="token punctuation">&#123;</span>parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="valuectx-4"><p>递归遍历获取父节点值，如果当前节点的 key 找到则直接返回，否则自底向上遍历找到符合 key 的祖先节点。如果子节点和父亲节点的 key 重复，返回的是子节点的 value 值。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>valueCtx<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key any<span class="token punctuation">)</span> any <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> c<span class="token punctuation">.</span>key <span class="token operator">==</span> key <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> c<span class="token punctuation">.</span>val
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token function">value</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 递归遍历获取父节点值</span>
<span class="token keyword">func</span> <span class="token function">value</span><span class="token punctuation">(</span>c Context<span class="token punctuation">,</span> key any<span class="token punctuation">)</span> any <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> ctx <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token operator">*</span>valueCtx<span class="token punctuation">:</span>
      <span class="token keyword">if</span> key <span class="token operator">==</span> ctx<span class="token punctuation">.</span>key <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> ctx<span class="token punctuation">.</span>val
      <span class="token punctuation">&#125;</span>
      c <span class="token operator">=</span> ctx<span class="token punctuation">.</span>Context
      
    <span class="token keyword">case</span> <span class="token operator">*</span>cancelCtx<span class="token punctuation">:</span>
      <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token operator">&amp;</span>cancelCtxKey <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> c
      <span class="token punctuation">&#125;</span>
      c <span class="token operator">=</span> ctx<span class="token punctuation">.</span>Context
      
    <span class="token keyword">case</span> withoutCancelCtx<span class="token punctuation">:</span>
      <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token operator">&amp;</span>cancelCtxKey <span class="token punctuation">&#123;</span>
        <span class="token comment">// This implements Cause(ctx) == nil</span>
        <span class="token comment">// when ctx is created using WithoutCancel.</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span>
      <span class="token punctuation">&#125;</span>
      c <span class="token operator">=</span> ctx<span class="token punctuation">.</span>c
      
    <span class="token keyword">case</span> <span class="token operator">*</span>timerCtx<span class="token punctuation">:</span>
      <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token operator">&amp;</span>cancelCtxKey <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">&amp;</span>ctx<span class="token punctuation">.</span>cancelCtx
      <span class="token punctuation">&#125;</span>
      c <span class="token operator">=</span> ctx<span class="token punctuation">.</span>Context
    <span class="token comment">// 遇到 emptyCtx 后退出</span>
    <span class="token keyword">case</span> backgroundCtx<span class="token punctuation">,</span> todoCtx<span class="token punctuation">:</span>
      <span class="token keyword">return</span> <span class="token boolean">nil</span>
      
    <span class="token keyword">default</span><span class="token punctuation">:</span>
      <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h3 id="timerCtx"><a href="#timerCtx" class="headerlink" title="timerCtx"></a>timerCtx</h3><p>基于 cancelCtx， time.Timer， time.Time 实现：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// A timerCtx carries a timer and a deadline. It embeds a cancelCtx to</span>
<span class="token comment">// implement Done and Err. It implements cancel by stopping its timer then</span>
<span class="token comment">// delegating to cancelCtx.cancel.</span>
<span class="token keyword">type</span> timerCtx <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  cancelCtx
  timer <span class="token operator">*</span>time<span class="token punctuation">.</span>Timer <span class="token comment">// Under cancelCtx.mu.</span>

  deadline time<span class="token punctuation">.</span>Time
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>timerCtx<span class="token punctuation">)</span> <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> c<span class="token punctuation">.</span>deadline<span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>timerCtx<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">contextName</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>cancelCtx<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".WithDeadline("</span> <span class="token operator">+</span>
    c<span class="token punctuation">.</span>deadline<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ["</span> <span class="token operator">+</span>
    time<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>deadline<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"])"</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>timerCtx<span class="token punctuation">)</span> <span class="token function">cancel</span><span class="token punctuation">(</span>removeFromParent <span class="token builtin">bool</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> cause <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  c<span class="token punctuation">.</span>cancelCtx<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> cause<span class="token punctuation">)</span>
  <span class="token keyword">if</span> removeFromParent <span class="token punctuation">&#123;</span>
    <span class="token comment">// Remove this timerCtx from its parent cancelCtx's children.</span>
    <span class="token function">removeChild</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>cancelCtx<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> c<span class="token punctuation">.</span>timer <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    c<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token boolean">nil</span>
  <span class="token punctuation">&#125;</span>
  c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>GDB(LLDB)调试方法</title>
    <url>/2020/03/13/%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95/GDB%EF%BC%88LLDB%EF%BC%89%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="GDB-and-LLDB-Command-Examples"><a href="#GDB-and-LLDB-Command-Examples" class="headerlink" title="GDB and LLDB Command Examples"></a>GDB and LLDB Command Examples</h2><p><a href="https://developer.apple.com/library/archive/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-command-examples.html">https://developer.apple.com/library/archive/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-command-examples.html</a></p>
<br/>

<h2 id="Debug-C-in-Visual-Studio-Code"><a href="#Debug-C-in-Visual-Studio-Code" class="headerlink" title="Debug C++ in Visual Studio Code"></a>Debug C++ in Visual Studio Code</h2><p><a href="https://code.visualstudio.com/docs/cpp/cpp-debug">https://code.visualstudio.com/docs/cpp/cpp-debug</a></p>
<h2 id="基于-coredump-文件分析"><a href="#基于-coredump-文件分析" class="headerlink" title="基于 coredump 文件分析"></a>基于 <code>coredump</code> 文件分析</h2><div class="tabs" id="coredump-analysis"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#coredump-analysis-1">设置 Linux 生成 coredump</button></li><li class="tab"><button type="button" data-href="#coredump-analysis-2">GDB 加载 coredump</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="coredump-analysis-1"><p>所有命令可以写成 <code>bash</code> 形式，方便用于生产环境：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 coredump 文件生成限制， 为 0 代表 Core Dump 功能当前被禁用</span>
<span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-c</span>

<span class="token comment"># 临时修改，对当前终端会话有效</span>
<span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-c</span> unlimited

<span class="token comment"># 永久修改 Core Dump 文件大小限制</span>
<span class="token operator">&lt;</span>username<span class="token operator">></span> hard core unlimited
<span class="token operator">&lt;</span>username<span class="token operator">></span> soft core unlimited
<span class="token comment"># 所有用户永久生效</span>
* hard core unlimited
* soft core unlimited

<span class="token comment"># 指定 coredump 生成位置和命名规则</span>
<span class="token builtin class-name">echo</span> <span class="token string">"/var/crash/core.%p"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /proc/sys/kernel/core_pattern

<span class="token comment"># 重启仍生效的方式</span>
<span class="token function">vi</span> /etc/sysctl.conf 
kernel.core_pattern <span class="token operator">=</span> /var/crash/core.%p
<span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">-p</span>

<span class="token comment"># 运行产生崩溃的二进制 </span>
./cpp_test

<span class="token comment"># 查看 coredump 崩溃输出</span>
<span class="token function">ls</span> /var/crash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="coredump-analysis-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb ./cpp_test <span class="token operator">&lt;</span>coredump-file<span class="token operator">></span>
<span class="token comment"># 之后走正常的 gdb 调试 backtrace, break, ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>还有其他工具可以探索如：SystemTap， AddressSanitizer， UndefinedBehaviorSanitizer。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      <categories>
        <category>程序调试</category>
        <category>debugging</category>
      </categories>
      <tags>
        <tag>gdb</tag>
        <tag>lldb</tag>
        <tag>程序调试</tag>
      </tags>
  </entry>
  <entry>
    <title>Vargrind 动态内存分析工具</title>
    <url>/2020/06/25/%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95/Vargrind%20C++%20%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
        <category>debugging</category>
      </categories>
      <tags>
        <tag>C++ 调试</tag>
      </tags>
  </entry>
  <entry>
    <title>go 服务调试之 pprof</title>
    <url>/2021/01/13/%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95/go-tool%20%E4%B9%8B%20pprof%20%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><br/>

<h2 id="pprof-原理"><a href="#pprof-原理" class="headerlink" title="pprof 原理"></a>pprof 原理</h2><p>pprof 是用于可视化和分析性能分析数据的工具。</p>
<p>pprof reads a collection of profiling samples in <code>profile.proto</code> format and generates reports to visualize and help analyze the data. It can generate both text and graphical reports (through the use of the dot visualization package).</p>
<p><code>profile.proto</code> is a protocol buffer that describes a set of callstacks and symbolization information. A common usage is to represent a set of sampled callstacks from statistical profiling. The format is described on the <a href="https://github.com/google/pprof/blob/main/proto/profile.proto">proto&#x2F;profile.proto</a> file. For details on protocol buffers, see <a href="https://developers.google.com/protocol-buffers">https://developers.google.com/protocol-buffers</a>.</p>
<p>Profiles can be read from a local file, or over http. Multiple profiles of the same type can be aggregated or compared.</p>
<p>If the profile samples contain machine addresses, pprof can symbolize them through the use of the native binutils tools (addr2line and nm).</p>
<h2 id="pprof-使用"><a href="#pprof-使用" class="headerlink" title="pprof 使用"></a>pprof 使用</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>CPU Profiling</td>
<td>CPU 分析，按照一定的频率采集所监听的应用程序 CPU（含寄存器）的使用情况，可确定应用程序在主动消耗 CPU 周期时花费时间的位置</td>
</tr>
<tr>
<td>Memory Profiling</td>
<td>内存分析，在应用程序进行堆分配时记录堆栈跟踪，用于监视当前和历史内存使用情况，以及检查内存泄漏</td>
</tr>
<tr>
<td>Block Profiling</td>
<td>阻塞分析，记录 goroutine 阻塞等待同步（包括定时器通道）的位置</td>
</tr>
<tr>
<td>Mutex Profiling</td>
<td>互斥锁分析，报告互斥锁的竞争情况</td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li><p><strong>runtime&#x2F;pprof：</strong>采集程序（非 Server）的运行数据进行分析。</p>
</li>
<li><p><strong>net&#x2F;http&#x2F;pprof：</strong>采集 HTTP Server 的运行时数据进行分析。</p>
</li>
</ul>
<div class="tabs" id="pprof-example"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pprof-example-1">Import pprof</button></li><li class="tab"><button type="button" data-href="#pprof-example-2">通过页面查看 pprof</button></li><li class="tab"><button type="button" data-href="#pprof-example-3">终端查看 pprof</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pprof-example-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"log"</span>
    <span class="token string">"net/http"</span>
    <span class="token boolean">_</span> <span class="token string">"net/http/pprof"</span>
    <span class="token string">"github.com/EDDYCJY/go-pprof-example/data"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
            log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"https://github.com/EDDYCJY"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0:6060"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> datas <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>

<span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
    data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
    sData <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    datas <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>datas<span class="token punctuation">,</span> sData<span class="token punctuation">)</span>

    <span class="token keyword">return</span> sData
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行后，HTTP 服务会多出 <code>/debug/pprof</code> 的 endpoint 可用于观察应用程序的情况。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pprof-example-2"><p><a href="http://127.0.0.1:6060/debug/pprof/">http://127.0.0.1:6060/debug/pprof/</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/debug/pprof/

profiles:
<span class="token number">0</span>    block
<span class="token number">5</span>    goroutine
<span class="token number">3</span>    heap
<span class="token number">0</span>    mutex
<span class="token number">9</span>    threadcreate

full goroutine stack dump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li>cpu（CPU Profiling）: <code>$HOST/debug/pprof/profile</code>，默认进行 30s 的 CPU Profiling，得到一个分析用的 profile 文件</li>
<li>block（Block Profiling）：<code>$HOST/debug/pprof/block</code>，查看导致阻塞同步的堆栈跟踪</li>
<li>goroutine：<code>$HOST/debug/pprof/goroutine</code>，查看当前所有运行的 goroutines 堆栈跟踪</li>
<li>heap（Memory Profiling）: <code>$HOST/debug/pprof/heap</code>，查看活动对象的内存分配情况</li>
<li>mutex（Mutex Profiling）：<code>$HOST/debug/pprof/mutex</code>，查看导致互斥锁的竞争持有者的堆栈跟踪</li>
<li>threadcreate：<code>$HOST/debug/pprof/threadcreate</code>，查看创建新OS线程的堆栈跟踪</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pprof-example-3"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 执行该命令后，等待 60s，pprof 会进行 CPU Profiling。</span>
<span class="token comment"># 结束后将默认进入 pprof 的交互式命令模式，可以对分析的结果进行查看或导出。</span>
<span class="token comment"># 具体可执行 pprof help 查看命令说明。</span>
go tool pprof http://localhost:6060/debug/pprof/profile?seconds<span class="token operator">=</span><span class="token number">60</span>


<span class="token punctuation">(</span>pprof<span class="token punctuation">)</span> top10
Showing nodes accounting <span class="token keyword">for</span> <span class="token number">25</span>.92s, <span class="token number">97.63</span>% of <span class="token number">26</span>.55s total
Dropped <span class="token number">85</span> nodes <span class="token punctuation">(</span>cum <span class="token operator">&lt;=</span> <span class="token number">0</span>.13s<span class="token punctuation">)</span>
Showing <span class="token function">top</span> <span class="token number">10</span> nodes out of <span class="token number">21</span>
      flat  flat%   sum%        cum   cum%
    <span class="token number">23</span>.28s <span class="token number">87.68</span>% <span class="token number">87.68</span>%     <span class="token number">23</span>.29s <span class="token number">87.72</span>%  syscall.Syscall
     <span class="token number">0</span>.77s  <span class="token number">2.90</span>% <span class="token number">90.58</span>%      <span class="token number">0</span>.77s  <span class="token number">2.90</span>%  runtime.memmove
     <span class="token number">0</span>.58s  <span class="token number">2.18</span>% <span class="token number">92.77</span>%      <span class="token number">0</span>.58s  <span class="token number">2.18</span>%  runtime.freedefer
     <span class="token number">0</span>.53s  <span class="token number">2.00</span>% <span class="token number">94.76</span>%      <span class="token number">1</span>.42s  <span class="token number">5.35</span>%  runtime.scanobject
     <span class="token number">0</span>.36s  <span class="token number">1.36</span>% <span class="token number">96.12</span>%      <span class="token number">0</span>.39s  <span class="token number">1.47</span>%  runtime.heapBitsForObject
     <span class="token number">0</span>.35s  <span class="token number">1.32</span>% <span class="token number">97.44</span>%      <span class="token number">0</span>.45s  <span class="token number">1.69</span>%  runtime.greyobject
     <span class="token number">0</span>.02s <span class="token number">0.075</span>% <span class="token number">97.51</span>%     <span class="token number">24</span>.96s <span class="token number">94.01</span>%  main.main.func1
     <span class="token number">0</span>.01s <span class="token number">0.038</span>% <span class="token number">97.55</span>%     <span class="token number">23</span>.91s <span class="token number">90.06</span>%  os.<span class="token punctuation">(</span>*File<span class="token punctuation">)</span>.Write
     <span class="token number">0</span>.01s <span class="token number">0.038</span>% <span class="token number">97.59</span>%      <span class="token number">0</span>.19s  <span class="token number">0.72</span>%  runtime.mallocgc
     <span class="token number">0</span>.01s <span class="token number">0.038</span>% <span class="token number">97.63</span>%     <span class="token number">23</span>.30s <span class="token number">87.76</span>%  syscall.Write
     
<span class="token comment"># flat：给定函数上运行耗时</span>
<span class="token comment"># flat%：同上的 CPU 运行耗时总比例</span>
<span class="token comment"># sum%：给定函数累积使用 CPU 总比例</span>
<span class="token comment"># cum：当前函数加上它之上的调用运行总耗时</span>
<span class="token comment"># cum%：同上的 CPU 运行耗时总比例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go tool pprof http://localhost:6060/debug/pprof/heap

Fetching profile over HTTP from http://localhost:6060/debug/pprof/heap
Saved profile <span class="token keyword">in</span> /Users/eddycjy/pprof/pprof.alloc_objects.alloc_space.inuse_objects.inuse_space.008.pb.gz
Type: inuse_space
Entering interactive mode <span class="token punctuation">(</span>type <span class="token string">"help"</span> <span class="token keyword">for</span> commands, <span class="token string">"o"</span> <span class="token keyword">for</span> options<span class="token punctuation">)</span>
<span class="token punctuation">(</span>pprof<span class="token punctuation">)</span> <span class="token function">top</span>
Showing nodes accounting <span class="token keyword">for</span> <span class="token number">837</span>.48MB, <span class="token number">100</span>% of <span class="token number">837</span>.48MB total
      flat  flat%   sum%        cum   cum%
  <span class="token number">837</span>.48MB   <span class="token number">100</span>%   <span class="token number">100</span>%   <span class="token number">837</span>.48MB   <span class="token number">100</span>%  main.main.func1
  
<span class="token comment"># inuse_space：分析应用程序的常驻内存占用情况</span>
<span class="token comment"># alloc_objects：分析应用程序的内存临时分配情况</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>go tool pprof <a href="http://localhost:6060/debug/pprof/block">http://localhost:6060/debug/pprof/block</a></p>
<p>go tool pprof <a href="http://localhost:6060/debug/pprof/mutex">http://localhost:6060/debug/pprof/mutex</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>



<h3 id="GC-指标"><a href="#GC-指标" class="headerlink" title="GC 指标"></a>GC 指标</h3><p><strong>PauseTime:</strong> GC停顿时间，即GC过程中程序暂停的时间。过⻓的停顿时间会直接影响⽤⼾体验。</p>
<p>M<strong>ark&#x2F;Sweep&#x2F;MarkTerminationTime:</strong> GC各个阶段耗时，有助于分析GC性能瓶颈。</p>
<p><strong>GCFrequency:</strong> GC发⽣的频率，过⾼的频率可能意味着内存分配模式有问题。</p>
<p><strong>MemoryAllocated&#x2F;Freed:</strong> 内存分配和释放速率，可以反映内存使⽤情况。</p>
<p><strong>HeapSize:</strong> 堆内存⼤⼩，监控堆内存的增⻓趋势，防⽌内存泄漏。</p>
<br/>

<h3 id="Goroutine-指标"><a href="#Goroutine-指标" class="headerlink" title="Goroutine 指标"></a>Goroutine 指标</h3><p><strong>GoroutineCount:</strong> Goroutine 数量，过多的 Goroutine 可能导致调度开销增加。</p>
<p><strong>GoroutineCreation&#x2F;TerminationRate:</strong> Goroutine 创建和销毁速率，可以反映程序的并发程度。</p>
<h4 id="goroutine-泄漏"><a href="#goroutine-泄漏" class="headerlink" title="goroutine 泄漏"></a>goroutine 泄漏</h4><p><a href="https://jackyu.cn/tech/go-pprof-memory-and-goroutine-leak/">https://jackyu.cn/tech/go-pprof-memory-and-goroutine-leak/</a></p>
<p><a href="https://ms2008.github.io/2019/06/02/golang-goroutine-leak/">https://ms2008.github.io/2019/06/02/golang-goroutine-leak/</a></p>
<p>泄漏示例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"net/http"</span>
    <span class="token boolean">_</span> <span class="token string">"net/http/pprof"</span>
    <span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 开启pprof</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0:6060"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    tick <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    i <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token keyword">range</span> tick <span class="token punctuation">&#123;</span>
       i<span class="token operator">++</span>
       <span class="token keyword">go</span> <span class="token function">allocFunc</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">allocFunc</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">defer</span> <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>
    buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>
    <span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>goroutine 泄漏数量会一直增长：</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/GO/base/goroutine-leak.png">

<p>堆栈信息：</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/GO/base/goroutine-leak-2.png">

<br/>

<h4 id="耗时分析"><a href="#耗时分析" class="headerlink" title="耗时分析"></a>耗时分析</h4><p>1、采样30秒CPU数据</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">go tool pprof http:&#x2F;&#x2F;localhost:6060&#x2F;debug&#x2F;pprof&#x2F;profile?seconds&#x3D;30<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>2、<strong>top</strong> - 查看最耗时的函数</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pprof<span class="token punctuation">)</span> top10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>3、<strong>list</strong> - 查看具体函数的耗时分布</p>
<br/>

<h3 id="内存指标"><a href="#内存指标" class="headerlink" title="内存指标"></a>内存指标</h3><p><strong>RSS:</strong> 常驻集⼤⼩，表⽰进程实际使⽤的物理内存。</p>
<p><strong>VirtualMemory:</strong> 虚拟内存⼤⼩，表⽰进程可⽤的虚拟内存。</p>
<p><strong>StackSize:</strong> 栈内存⼤⼩，监控栈溢出的⻛险。</p>
<br/>

<h2 id="接入grafana"><a href="#接入grafana" class="headerlink" title="接入grafana"></a>接入grafana</h2><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><br>



<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>压测工具 <a href="https://github.com/bojand/ghz.git">https://github.com/bojand/ghz.git</a></p>
<h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><ul>
<li>响应时间<ul>
<li><strong>平均响应时间</strong>：指服务处理请求的平均耗时，反映了服务的整体处理速度。例如，一个 Web 服务处理所有 HTTP 请求的平均时间。</li>
<li><strong>最大响应时间</strong>：服务处理请求的最长耗时，能体现服务在极端情况下的性能表现。比如，在高并发场景下某个数据库查询操作的最长响应时间。</li>
<li><strong>P95、P99 响应时间</strong>：P95 响应时间表示在所有请求中，95% 的请求响应时间都小于该值；P99 同理。这两个指标更关注长尾请求的性能，对于保障用户体验非常重要。</li>
</ul>
</li>
<li>吞吐量<ul>
<li><strong>每秒请求数（QPS）</strong>：指服务每秒能够处理的请求数量，体现了服务的处理能力。例如，一个 API 服务每秒能够处理的请求次数。</li>
<li><strong>每秒事务数（TPS）</strong>：用于衡量系统在单位时间内处理的事务数量，适用于需要处理多个步骤的业务流程。比如，电商系统中每秒完成的订单交易数量。</li>
</ul>
</li>
</ul>
<h3 id="可用性指标"><a href="#可用性指标" class="headerlink" title="可用性指标"></a>可用性指标</h3><ul>
<li>服务可用性<ul>
<li><strong>正常运行时间百分比</strong>：通常用 “X 个 9” 来表示，如 99.9%（三个 9）、99.99%（四个 9）等。例如，服务可用性为 99.9% 表示在一年中，服务不可用的时间不超过 8.76 小时。</li>
<li><strong>故障恢复时间</strong>：指服务从故障发生到恢复正常运行所花费的时间。快速的故障恢复时间可以减少服务不可用对用户的影响。</li>
</ul>
</li>
</ul>
<h3 id="资源指标"><a href="#资源指标" class="headerlink" title="资源指标"></a>资源指标</h3><ul>
<li><strong>CPU 使用率</strong>：反映服务运行时 CPU 资源的占用情况。过高的 CPU 使用率可能导致服务性能下降，甚至出现响应超时的问题。</li>
<li><strong>内存使用率</strong>：表示服务占用的内存资源比例。内存不足可能会引发服务崩溃或频繁进行垃圾回收，影响服务性能。</li>
<li>磁盘 I&#x2F;O<ul>
<li><strong>磁盘读写速率</strong>：衡量磁盘每秒读写的数据量，反映了磁盘的性能。如果磁盘读写速率过低，可能会成为服务的性能瓶颈。</li>
<li><strong>磁盘使用率</strong>：指磁盘已使用空间占总空间的比例，过高的磁盘使用率可能导致数据写入失败或服务异常。</li>
</ul>
</li>
<li>网络带宽<ul>
<li><strong>入站带宽</strong>：服务接收网络数据的速率，如 Web 服务器接收客户端请求的带宽。</li>
<li><strong>出站带宽</strong>：服务发送网络数据的速率，如数据库服务器向应用程序发送查询结果的带宽。</li>
</ul>
</li>
</ul>
<h3 id="错误率指标"><a href="#错误率指标" class="headerlink" title="错误率指标"></a>错误率指标</h3><ul>
<li><strong>请求错误率</strong>：指服务处理请求时出现错误的比例，计算公式为：错误请求数 &#x2F; 总请求数。高错误率可能表示服务存在代码缺陷、依赖服务故障等问题。</li>
<li><strong>特定错误类型的比例</strong>：除了整体错误率，还可以关注不同类型错误的比例，如 HTTP 404 错误、500 错误等。这有助于定位问题的根源。</li>
</ul>
<h3 id="业务指标"><a href="#业务指标" class="headerlink" title="业务指标"></a>业务指标</h3><ul>
<li><strong>转化率</strong>：在电商、营销等业务场景中，转化率是一个重要指标。例如，网站访客转化为注册用户或购买用户的比例。</li>
<li><strong>用户留存率</strong>：反映了服务吸引和保留用户的能力，通常用一段时间内继续使用服务的用户占总用户数的比例来表示。</li>
</ul>
<h3 id="流量统计"><a href="#流量统计" class="headerlink" title="流量统计"></a>流量统计</h3><ul>
<li><p>PV（Page View）：即页面浏览量，通常是指网站被访问的页面数量。每打开一个页面，无论是否刷新，PV 都会增加。如果用户在网站中浏览了多个页面，那么 PV 的数值就是这些页面的总和。例如，一个用户打开了网站的首页，然后又点击进入了两个其他页面，那么这个用户就为网站贡献了 3 个 PV。PV 可以反映出网站页面的受欢迎程度和被访问的频繁程度。 </p>
</li>
<li><p>UV（Unique Visitor）：即独立访客数，是指在一定时间内访问网站的不同用户的数量。通常通过用户的 IP 地址、浏览器指纹等技术手段来识别不同的用户。无论一个用户在该时间段内访问了多少次网站，都只被计算为一个 UV。例如，在一天内，有 100 个不同的用户访问了网站，那么当天的 UV 就是 100。UV 更能体现出网站的实际用户数量和受众范围。</p>
</li>
</ul>
<br/>
]]></content>
      <categories>
        <category>golang</category>
        <category>debugging</category>
      </categories>
      <tags>
        <tag>pprof</tag>
        <tag>Go 调试</tag>
      </tags>
  </entry>
  <entry>
    <title>gperftools 性能分析</title>
    <url>/2021/01/23/%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95/gperftools%20Google%20C++%20%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><br>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libunwind-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> google-perftools libgoogle-perftools-dev
<span class="token comment"># 可视化软件，方便查看性能分析结果</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> kcachegrind<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>参考：</p>
<p><a href="https://gperftools.github.io/gperftools/heapprofile.html">https://gperftools.github.io/gperftools/heapprofile.html</a></p>
<p><a href="https://gperftools.github.io/gperftools/cpuprofile.html">https://gperftools.github.io/gperftools/cpuprofile.html</a></p>
<p><a href="https://xusenqi.site/2020/12/06/C++Profile%E7%9A%84%E5%A4%A7%E6%9D%80%E5%99%A8_gperftools%E7%9A%84%E4%BD%BF%E7%94%A8/">https://xusenqi.site/2020/12/06/C++Profile%E7%9A%84%E5%A4%A7%E6%9D%80%E5%99%A8_gperftools%E7%9A%84%E4%BD%BF%E7%94%A8/</a></p>
<p>编译 C++ 二进制时需要链接 gperftools:</p>
<div class="tabs" id="link_library"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#link_library-1">dynamic linking</button></li><li class="tab"><button type="button" data-href="#link_library-2">static linking</button></li><li class="tab"><button type="button" data-href="#link_library-3">打桩</button></li><li class="tab"><button type="button" data-href="#link_library-4">prof report(txt)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="link_library-1"><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># gperftools</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_GPERF_TOOLS</span><span class="token punctuation">)</span>
 <span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_FLAGS</span> <span class="token string">"-lprofiler <span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_CXX_FLAGS</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span>
 <span class="token keyword">link_directories</span><span class="token punctuation">(</span><span class="token string">"/usr/local/lib"</span><span class="token punctuation">)</span>
 <span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">"-lprofiler"</span><span class="token punctuation">)</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="link_library-2"><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># gperftools</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">CMAKE_GPERF_TOOLS</span><span class="token punctuation">)</span>
 <span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>test_tools libprofiler.a<span class="token punctuation">)</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="link_library-3"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;gperftools&#x2F;profiler.h&gt;
int main(int argc, char** argv)
&#123;    
    ProfilerStart(&quot;.&#x2F;test.prof&quot;);

    function_need_to_analysis();

    ProfilerStop();

    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="link_library-4"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pprof ./test test_out.prof <span class="token parameter variable">--text</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h3 id="Heap-Profiler"><a href="#Heap-Profiler" class="headerlink" title="Heap Profiler"></a>Heap Profiler</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">HEAPPROFILE</span><span class="token operator">=</span>/tmp/profile <span class="token assign-left variable">PPROF_PATH</span><span class="token operator">=</span>/usr/local/bin/pprof <span class="token assign-left variable">HEAPCHECK</span><span class="token operator">=</span>normal ./test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="Cpu-Profiler"><a href="#Cpu-Profiler" class="headerlink" title="Cpu Profiler"></a>Cpu Profiler</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># HEAPCHECK 有4个等级 minimal，normal，strick，draconian</span>
<span class="token assign-left variable">HEAPPROFILE</span><span class="token operator">=</span>/tmp/profile <span class="token assign-left variable">PPROF_PATH</span><span class="token operator">=</span>/usr/local/bin/pprof <span class="token assign-left variable">HEAPCHECK</span><span class="token operator">=</span>normal ./test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>“Normal” heap-checking tracks live objects and reports a leak for any data that is not reachable via a live object when the program exits.”Strict” heap-checking is much like “normal” but has a few extra checks that memory isn’t lost in global destructors. In particular, if you have a global &gt; &gt; &gt; variable that allocates memory during program execution, and then “forgets” about the memory in the global destructor (say, by setting the pointer to it to &gt; NULL) without freeing it, that will prompt a leak message in “strict” mode, though not in “normal” mode.</p>
<p>“Draconian” heap-checking is appropriate for those who like to be very precise about their memory management, and want the heap-checker to help them &gt; enforce it. In “draconian” mode, the heap-checker does not do “live object” checking at all, so it reports a leak unless all allocated memory is freed before &gt; program exit. (However, you can use IgnoreObject() to re-enable liveness-checking on an object-by-object basis.)”Normal” mode, as the name implies, is the one used most often at Google. It’s appropriate for everyday heap-checking use.</p>
<pre class="line-numbers language-none"><code class="language-none">pprof  .&#x2F;test_tools_forward &#x2F;tmp&#x2F;test_tools_forward.19756._main_-end.heap --text<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>C++</category>
        <category>debugging</category>
      </categories>
      <tags>
        <tag>C++ 调试</tag>
        <tag>pprof</tag>
      </tags>
  </entry>
  <entry>
    <title>linux perf 性能分析工具</title>
    <url>/2021/02/10/%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95/linux%20perf%20%E5%B7%A5%E5%85%B7%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
        <category>debugging</category>
      </categories>
      <tags>
        <tag>C++ 调试</tag>
        <tag>GO 调试</tag>
      </tags>
  </entry>
  <entry>
    <title>strace 系统调用</title>
    <url>/2021/07/23/%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95/strace%20%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E8%BF%BD%E8%B8%AA/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="跟踪可执行程序"><a href="#跟踪可执行程序" class="headerlink" title="跟踪可执行程序"></a>跟踪可执行程序</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">strace</span> <span class="token parameter variable">-f</span> <span class="token parameter variable">-F</span> <span class="token parameter variable">-o</span> ~/straceout.txt myserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="跟踪服务程序"><a href="#跟踪服务程序" class="headerlink" title="跟踪服务程序"></a>跟踪服务程序</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">strace</span> <span class="token parameter variable">-o</span> output.txt <span class="token parameter variable">-T</span> <span class="token parameter variable">-tt</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">trace</span><span class="token operator">=</span>all <span class="token parameter variable">-p</span> <span class="token number">28979</span><span class="token punctuation">(</span>PID<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>C++</category>
        <category>debugging</category>
      </categories>
      <tags>
        <tag>C++ 调试</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 消息队列组件 nsq</title>
    <url>/2023/10/13/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/Go%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%BB%84%E4%BB%B6%20nsq/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><table>
<thead>
<tr>
<th>功能</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>解耦</td>
<td>将一个流程加入一层数据接口拆分成两个部分，上游专注通知，下游专注处理</td>
</tr>
<tr>
<td>缓冲</td>
<td>应对流量的突然上涨变更，消息队列有很好的缓冲削峰作用</td>
</tr>
<tr>
<td>异步</td>
<td>上游发送消息以后可以马上返回，处理工作交给下游进行</td>
</tr>
<tr>
<td>广播</td>
<td>让一个消息被多个下游进行处理</td>
</tr>
<tr>
<td>冗余</td>
<td>保存处理的消息，防止消息处理失败导致的数据丢失</td>
</tr>
</tbody></table>
<h2 id="nsq-架构"><a href="#nsq-架构" class="headerlink" title="nsq 架构"></a>nsq 架构</h2>]]></content>
      <categories>
        <category>基础组件</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>基础组件</tag>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/2021/10/13/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/Nginx/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h2><h3 id="轮询（Round-Robin）算法"><a href="#轮询（Round-Robin）算法" class="headerlink" title="轮询（Round Robin）算法"></a>轮询（Round Robin）算法</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>按顺序依次将请求分配到后端服务器上，均等分配请求，让每个服务器处理相同数量的请求。例如，有三台后端服务器 A、B、C，Nginx 会按照顺序，将第一个请求分配给 A，第二个请求分配给 B，第三个请求分配给 C，第四个请求又回到 A，以此类推。</p>
<h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>适用于后端服务器性能相近的情况，能简单有效地实现负载均衡。</p>
<h3 id="加权轮询（Weighted-Round-Robin）算法"><a href="#加权轮询（Weighted-Round-Robin）算法" class="headerlink" title="加权轮询（Weighted Round Robin）算法"></a>加权轮询（Weighted Round Robin）算法</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>根据后端服务器的性能差异，为每个服务器设置一个权重值。权重越高的服务器，被分配到请求的概率越大。Nginx 会按照权重比例来分配请求，例如，服务器 A 的权重为 3，服务器 B 的权重为 2，服务器 C 的权重为 1，那么在分配请求时，A 服务器被选中的概率是 B 服务器的 1.5 倍，是 C 服务器的 3 倍。</p>
<h4 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h4><p>适用于后端服务器性能不同的情况，能根据服务器的处理能力合理分配请求，充分利用服务器资源。</p>
<h3 id="IP-哈希（IP-Hash）算法"><a href="#IP-哈希（IP-Hash）算法" class="headerlink" title="IP 哈希（IP Hash）算法"></a>IP 哈希（IP Hash）算法</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>根据客户端的 IP 地址，通过哈希函数计算出一个哈希值，再将该哈希值与后端服务器数量进行取模运算，得到的结果就是请求应该被分配到的服务器编号。这样可以保证来自同一 IP 地址的请求始终被路由到同一台后端服务器上，除非服务器列表发生变化。</p>
<h4 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h4><p>适用于有状态服务或需要保持会话一致性的场景，如用户登录后，后续请求需要访问同一台服务器以获取用户相关信息。</p>
<h3 id="加权最少连接（Weighted-Least-Connections）算法"><a href="#加权最少连接（Weighted-Least-Connections）算法" class="headerlink" title="加权最少连接（Weighted Least Connections）算法"></a>加权最少连接（Weighted Least Connections）算法</h3><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p>Nginx 会记录后端服务器当前的连接数，根据连接数和服务器的权重来分配请求。连接数越少且权重越高的服务器，越容易被分配到新的请求。例如，服务器 A 权重为 3，当前连接数为 5；服务器 B 权重为 2，当前连接数为 3；服务器 C 权重为 1，当前连接数为 2。此时，虽然服务器 C 连接数最少，但由于权重较低，Nginx 会综合考虑权重和连接数，可能会优先将请求分配给服务器 A 或 B。</p>
<h4 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a>适用场景</h4><p>适用于后端服务器性能不同且请求处理时间差异较大的情况，能根据服务器的实际负载动态分配请求，避免服务器过载。</p>
<h3 id="通用哈希（Generic-Hash）算法"><a href="#通用哈希（Generic-Hash）算法" class="headerlink" title="通用哈希（Generic Hash）算法"></a>通用哈希（Generic Hash）算法</h3><h3 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h3><p>允许用户自定义哈希函数，根据请求的特定属性（如请求的 URL、请求头中的某个字段等）计算哈希值，再将哈希值与后端服务器数量取模，确定请求的分配服务器。</p>
<h4 id="适用场景-4"><a href="#适用场景-4" class="headerlink" title="适用场景"></a>适用场景</h4><p>当需要根据特定业务规则进行负载均衡时使用，例如，根据不同的 URL 路径将请求分配到不同的服务器组。</p>
<br/>

<h2 id="Nginx-高并发能力设计"><a href="#Nginx-高并发能力设计" class="headerlink" title="Nginx 高并发能力设计"></a>Nginx 高并发能力设计</h2><h3 id="事件驱动的异步非阻塞架构"><a href="#事件驱动的异步非阻塞架构" class="headerlink" title="事件驱动的异步非阻塞架构"></a>事件驱动的异步非阻塞架构</h3><h4 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h4><p>Nginx 基于事件驱动的异步非阻塞模型，使用一个或多个进程来处理连接。在这种架构下，当有新的连接请求到达时，Nginx 不会为每个请求创建一个单独的线程或进程，而是将连接注册到事件循环中。当连接上有数据可读或可写时，事件循环会通知相应的处理函数来处理该事件，处理完成后继续等待下一个事件。</p>
<h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>这种架构避免了多线程或多进程模型中频繁的上下文切换开销，以及线程或进程创建和销毁的成本。同时，异步非阻塞的方式使得 Nginx 能够在少量的进程或线程中处理大量的并发连接，大大提高了服务器的并发处理能力和资源利用率。</p>
<h3 id="高效的内存管理机制"><a href="#高效的内存管理机制" class="headerlink" title="高效的内存管理机制"></a>高效的内存管理机制</h3><h4 id="内存池"><a href="#内存池" class="headerlink" title="内存池"></a>内存池</h4><p>Nginx 使用的是 TCMalloc 库进行内存管理。使用内存池来管理内存分配。内存池在启动时预先分配一块较大的内存空间，然后根据需要在这个空间内为不同的模块和请求分配小块内存。这样可以避免频繁的系统级内存分配和释放操作，减少内存碎片的产生，提高内存分配的效率和速度。</p>
<h5 id="TCMalloc-核心原理"><a href="#TCMalloc-核心原理" class="headerlink" title="TCMalloc 核心原理"></a>TCMalloc 核心原理</h5><p><strong>三级缓存结构：</strong>TCMalloc 采用三级缓存结构，包括 ThreadCache、CentralHeap 和 PageHeap。ThreadCache 是每个线程独立的小对象缓存（&lt;32KB），无锁操作，能有效减少多线程环境中的锁竞争；CentralHeap 是全局共享的中型对象缓存（32KB - 256KB），需自旋锁保护；PageHeap 用于大对象（≥256KB）管理，直接通过 mmap 分配，按页管理（默认 8KB &#x2F; 页）。 </p>
<p><strong>Span 管理：</strong>Span 是连续内存页的抽象（1 - 256 页），用于记录内存块的分配状态，有助于提高内存管理的效率和准确性。</p>
<h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>Nginx 内置了高效的缓存机制，包括 HTTP 缓存和内存缓存等。可以将经常访问的静态资源（如 HTML 文件、图片、CSS 和 JavaScript 文件等）以及部分动态内容缓存在内存中，当有相同的请求到来时，直接从缓存中响应，减少了后端服务器的负载和数据传输时间，提高了系统的性能和响应速度。</p>
<h3 id="优化的网络架构"><a href="#优化的网络架构" class="headerlink" title="优化的网络架构"></a>优化的网络架构</h3><h4 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h4><p>Nginx 采用了高效的网络模型，如 epoll（在 Linux 系统上）等 I&#x2F;O 复用机制。epoll 能够同时监控大量的文件描述符，当有事件发生时，它可以快速地通知 Nginx，让 Nginx 及时处理相应的连接请求。这种机制使得 Nginx 能够高效地处理大量并发的网络连接，而不会因为连接数的增加而导致性能下降。</p>
<h4 id="零拷贝技术"><a href="#零拷贝技术" class="headerlink" title="零拷贝技术"></a>零拷贝技术</h4><p>Nginx 在处理静态文件传输时，会使用零拷贝技术。该技术避免了数据在用户空间和内核空间之间的多次拷贝，直接将数据从内核缓冲区发送到网络接口，减少了数据拷贝的开销，提高了文件传输的效率，从而能够更好地应对高并发的文件下载请求。</p>
<table>
<thead>
<tr>
<th>系统调用</th>
<th>具体逻辑</th>
</tr>
</thead>
<tbody><tr>
<td><strong>sendfile</strong></td>
<td>当 Nginx 处理静态文件的传输时，它会调用<code>sendfile</code>来将文件内容发送给客户端。例如，当客户端请求一个 HTML 文件或图片时，Nginx 可以直接使用<code>sendfile</code>将文件从磁盘传输到网络接口，大大提高了文件传输的效率，减少了 CPU 的开销，从而能够更好地应对高并发的文件下载请求。</td>
</tr>
<tr>
<td><strong>mmap</strong></td>
<td>Nginx 在某些情况下会使用<code>mmap</code>来加载配置文件或处理一些需要频繁访问的静态数据。通过将文件映射到内存，Nginx 可以快速地读取和访问这些数据，避免了每次读取文件时的磁盘 I&#x2F;O 操作和数据拷贝，提高了系统的性能和响应速度。同时，由于<code>mmap</code>是基于内存映射的方式，多个进程可以共享同一个映射区域，这对于多进程的 Nginx 架构来说，可以有效地节省内存空间。</td>
</tr>
</tbody></table>
<h3 id="模块化设计"><a href="#模块化设计" class="headerlink" title="模块化设计"></a>模块化设计</h3><h4 id="功能解耦"><a href="#功能解耦" class="headerlink" title="功能解耦"></a>功能解耦</h4><p>Nginx 的模块化设计将不同的功能模块分离，每个模块负责实现特定的功能，如 HTTP 处理模块、SSL&#x2F;TLS 模块、负载均衡模块等。这种解耦的设计使得 Nginx 的代码结构清晰，各个模块之间相互独立，便于开发、维护和扩展。在高并发场景下，各个模块可以独立地进行优化和调整，以提高整体系统的性能。</p>
<h4 id="可定制性"><a href="#可定制性" class="headerlink" title="可定制性"></a>可定制性</h4><p>通过模块化架构，用户可以根据自己的需求选择和组合不同的模块，或者开发自定义模块来扩展 Nginx 的功能。例如，对于一些特定的业务场景，可以开发自定义的 HTTP 模块来实现特殊的请求处理逻辑，以满足高并发下的个性化需求。</p>
]]></content>
      <categories>
        <category>负载均衡</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title>etcd 原理及应用</title>
    <url>/2022/10/13/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/etcd/</url>
    <content><![CDATA[<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="工作问题汇总"><a href="#工作问题汇总" class="headerlink" title="工作问题汇总"></a>工作问题汇总</h3><h4 id="1、etcd-压缩导致服务-etcd-句柄关闭。"><a href="#1、etcd-压缩导致服务-etcd-句柄关闭。" class="headerlink" title="1、etcd 压缩导致服务 etcd 句柄关闭。"></a>1、etcd 压缩导致服务 etcd 句柄关闭。</h4><h4 id="2、etcd-lock-涉及到-Lease-Grant函数-TTL-设置3s导致集群同步超时。"><a href="#2、etcd-lock-涉及到-Lease-Grant函数-TTL-设置3s导致集群同步超时。" class="headerlink" title="2、etcd lock(涉及到 Lease,Grant函数) TTL 设置3s导致集群同步超时。"></a>2、etcd lock(涉及到 Lease,Grant函数) TTL 设置<code>3s</code>导致集群同步超时。</h4><p>3s 正好是 etcd 底层 raft 同步超时时间，对于某些客户集群，这个时间有可能超时，导致服务到 etcd 集群不可用。</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>etcd</tag>
        <tag>Cache</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>go 服务调试之 trace</title>
    <url>/2021/01/15/%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95/go-tool%20%E4%B9%8B%20trace%20%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Sometimes, we need more detailed information about how our program runs. In cases like this the trace package is a very powerful and useful tool. In this section we will go over it.</p>
<p><code>trace</code> is a tool that allows you to collect detailed information about how your program is running. It is very useful in understanding things like how goroutines are created and scheduled, how channels are being used, and how network requests are being handled. It provides a timeline view of your program’s execution, which can be useful in identifying performance issues over time and other types of bugs.</p>
<p><code>trace</code> can collect data on a wide range of events that occur while your program is running. Those events include the following:</p>
<p> Goroutine creation, destruction, blocking, unblocking, network activity, and garbage collection. </p>
<p>Each <code>trace</code> event is assigned a timestamp and a goroutine ID, allowing you to see the sequence of events and how they relate to one another.</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>基于 已经埋点好的 pprof: </p>
<ul>
<li>curl <a href="http://127.0.0.1:6060/debug/pprof/trace/?seconds=20">http://127.0.0.1:6060/debug/pprof/trace?seconds=20</a> &gt; trace.out</li>
<li>go tool trace trace.out.</li>
</ul>
]]></content>
      <categories>
        <category>golang</category>
        <category>debugging</category>
      </categories>
      <tags>
        <tag>Go 调试</tag>
        <tag>trace</tag>
      </tags>
  </entry>
  <entry>
    <title>DDD设计模式</title>
    <url>/2024/04/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/DDD%E6%80%9D%E6%83%B3%E5%8F%8A%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p><strong>Domain-Driven Design (DDD) is a software development philosophy that emphasizes the importance of understanding and modeling the business domain. It is a strategy aimed at improving the quality of software by aligning it more closely with the business needs it serves.</strong> DDD was first introduced to the software development community in 2003 by Eric Evans in his book “Domain-Driven Design: Tackling Complexity in the Heart of Software.” The book, which has since become a seminal work in the field, presented a catalog of patterns and practices that have been further refined and expanded by a community of practitioners over the years.</p>
<p>At its core, DDD is about navigating complexity by placing the focus of software development on the ‘domain’, or the specific business context within which the software operates. It advocates for the use of a ‘ubiquitous language’, a common language that is shared by both the software developers and the business stakeholders. This language, used in the design and implementation of the software, ensures that the software accurately reflects the business domain it is intended to serve.</p>
<p><a href="https://mehdihadeli.github.io/awesome-go-education/ddd/">https://mehdihadeli.github.io/awesome-go-education/ddd/</a></p>
<p><a href="https://programmingpercy.tech/blog/how-to-domain-driven-design-ddd-golang/">https://programmingpercy.tech/blog/how-to-domain-driven-design-ddd-golang/</a></p>
<p><a href="https://github.com/sklinkert/go-ddd">https://github.com/sklinkert/go-ddd</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/361427612">https://zhuanlan.zhihu.com/p/361427612</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/91525839">https://zhuanlan.zhihu.com/p/91525839</a></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/designPattern/DDD-model.png">]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 的使用</title>
    <url>/2023/10/13/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/Redis%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>日常工作中经常会用到 <code>Redis</code>,除了作为缓存使用，<code>Redis</code>还有其他用途（<a href="https://mp.weixin.qq.com/s/GoKekfj1bnifMBJ6E0sDpQ%EF%BC%89%EF%BC%8C%E7%BB%93%E5%90%88%E6%97%A5%E5%B8%B8%E5%B7%A5%E4%BD%9C%EF%BC%8C%E5%AF%B9%60Redis%60%E7%9A%84%E4%BD%BF%E7%94%A8%E8%BF%9B%E8%A1%8C%E6%80%BB%E7%BB%93%E3%80%82">https://mp.weixin.qq.com/s/GoKekfj1bnifMBJ6E0sDpQ），结合日常工作，对`Redis`的使用进行总结。</a></p>
<br/>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><br/>



<h2 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h2><h3 id="单点"><a href="#单点" class="headerlink" title="单点"></a>单点</h3><br/>

<h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><br/>

<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><br/>





<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h4 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h4><h5 id="1、旁路缓存-Cache-Aside-Lazy-Loading"><a href="#1、旁路缓存-Cache-Aside-Lazy-Loading" class="headerlink" title="1、旁路缓存 Cache-Aside (Lazy Loading)"></a>1、旁路缓存 Cache-Aside (Lazy Loading)</h5><br/>

<h5 id="2、读穿透模式（Read-Through-Pattern）"><a href="#2、读穿透模式（Read-Through-Pattern）" class="headerlink" title="2、读穿透模式（Read-Through Pattern）"></a>2、读穿透模式（Read-Through Pattern）</h5><br/>

<h5 id="3、写穿透模式（Write-Through-Pattern）"><a href="#3、写穿透模式（Write-Through-Pattern）" class="headerlink" title="3、写穿透模式（Write-Through Pattern）"></a>3、写穿透模式（Write-Through Pattern）</h5><br/>

<h5 id="4、异步缓存写入（Write-Behind-Pattern）"><a href="#4、异步缓存写入（Write-Behind-Pattern）" class="headerlink" title="4、异步缓存写入（Write-Behind Pattern）"></a>4、异步缓存写入（Write-Behind Pattern）</h5><br/>



<h4 id="缓存淘汰策略"><a href="#缓存淘汰策略" class="headerlink" title="缓存淘汰策略"></a>缓存淘汰策略</h4><h5 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h5><p>Redis 4.0版本开始增加了LFU缓存淘汰策略，也采用数据随机筛选规则，然后依据数据的热度值排序，淘汰掉热度值较低的数据。</p>
<h5 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h5><p>按照官方文档的介绍，Redis所实现的是一种近似的LRU算法，每次随机选取一批数据进行LRU淘汰，而不是针对所有的数据，通过牺牲部分准确率来提高LRU算法的执行效率。</p>
<p>Redis内部只使用Hash表缓存了数据，并没有创建一个专门针对LRU算法的双向链表，之所以这样处理也是因为以下几个原因：</p>
<ul>
<li>筛选规则，Redis 是随机抽取一批数据去按照淘汰策略排序，不再需要对所有数据排序；</li>
<li>性能问题，每次数据访问都可能涉及数据移位，性能会有少许损失；</li>
<li>内存问题，Redis对内存的使用一向很“抠门”，数据结构都很精简，尽量不使用复杂的数据结构管理数据；</li>
<li>策略配置，如果线上Redis实例动态修改淘汰策略会触发全部数据的结构性改变，这个Redis系统无法承受的。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LRU_BITS</span> <span class="token expression"><span class="token number">24</span></span></span>
 
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisObject</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">unsigned</span> type<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> encoding<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> lru<span class="token operator">:</span>LRU_BITS<span class="token punctuation">;</span> <span class="token comment">/* LRU time (relative to global lru_clock) or
                            * LFU data (least significant 8 bits frequency
                            * and most significant 16 bits access time). */</span>
    <span class="token keyword">int</span> refcount<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> robj<span class="token punctuation">;</span>


<span class="token comment">// 默认的LRU时钟单位是秒，可以修改LRU_CLOCK_RESOLUTION宏来改变单位，</span>
<span class="token comment">// LRU时钟更新的频率也和server.hz参数有关。</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">LRU_CLOCK</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> lruclock<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">/</span>server<span class="token punctuation">.</span>hz <span class="token operator">&lt;=</span> LRU_CLOCK_RESOLUTION<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">atomicGet</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>lruclock<span class="token punctuation">,</span>lruclock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        lruclock <span class="token operator">=</span> <span class="token function">getLRUClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> lruclock<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于 lru 字段仅占用了 <strong>24bit</strong> 的空间，按秒为单位也只能存储194天，所以可能会出现一个意想不到的结果，即间隔194天访问 Key 后标记的时间戳一样，Redis LRU 淘汰策略局部失效。</p>
<p>算法缺陷：</p>
<p>LRU算法仅关注数据的访问时间或访问顺序，忽略了访问次数的价值，在淘汰数据过程中可能会淘汰掉热点数据。</p>
<p><a href="https://mmbiz.qpic.cn/sz_mmbiz_png/4g5IMGibSxt6aN9pOy4j2jBuicNjXsrpjlzQvZ0fmFqfLmc0WJefvn0pw5txn2gKIIO8ADLbgSNvC1sa1FribuyibQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1">LRU算法缺陷图示</a></p>
<p>如上图所示，时间轴自左向右，数据A&#x2F;B&#x2F;C在同一段时间内被分别访问的数次。数据C是最近一次访问的数据，按照LRU算法排列数据的热度是C&gt;B&gt;A，而数据的真实热度是B&gt;A&gt;C。</p>
<p>这个是LRU算法的原理性问题，自然也会在Redis 近似LRU算法中呈现，为了解决这个问题衍生出来LFU算法。</p>
]]></content>
      <categories>
        <category>基础组件</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>基础组件</tag>
        <tag>Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式模式</title>
    <url>/2025/03/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="分布式模式"><a href="#分布式模式" class="headerlink" title="分布式模式"></a>分布式模式</h2><h3 id="扇入扇出（FanIn-FanOut）模式"><a href="#扇入扇出（FanIn-FanOut）模式" class="headerlink" title="扇入扇出（FanIn, FanOut）模式"></a>扇入扇出（FanIn, FanOut）模式</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>扇入和扇出是并发编程中常见的两种模式，用于描述数据流动的方式，特别适用于Go语言中的通道 (channel) 和 goroutine 的协作。</p>
<p><strong>扇出</strong>是指<strong>一个数据源分发到多个消费者</strong>的模式。</p>
<ul>
<li>一个生产者(或多个生产者)生成数据</li>
<li>多个工作 goroutine 从同一个(或不同)通道读取数据并处理</li>
<li>目的是<strong>并行处理</strong>，提高吞吐量</li>
</ul>
<p><strong>扇出特点：</strong></p>
<ul>
<li>多个 goroutine 从同一个通道读取数据</li>
<li>工作负载被分配到多个处理单元</li>
<li>适用于 CPU 密集型或 IO 密集型的并行处理任务</li>
</ul>
<p><strong>扇入</strong>是指<strong>多个数据源合并到一个消费者</strong>的模式。</p>
<ul>
<li>多个生产者 goroutine 生成数据</li>
<li>一个 goroutine 从合并后的通道读取所有数据</li>
<li>目的是<strong>聚合结果</strong>，集中处理</li>
</ul>
<p><strong>扇入特点：</strong></p>
<ul>
<li>多个通道的数据被合并到一个通道</li>
<li>需要一个协调机制(通常用 sync.WaitGroup) 来知道所有输入何时完成</li>
<li>适用于收集分散的计算结果</li>
</ul>
<h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>数据处理流水线</strong></td>
<td>扇出：将大数据集分片并行处理<br>扇入：收集所有分片的处理结果</td>
</tr>
<tr>
<td><strong>微服务调用</strong></td>
<td>扇出：同时调用多个微服务<br/>扇入：聚合所有服务的响应</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="实现-Go"><a href="#实现-Go" class="headerlink" title="实现 (Go)"></a>实现 (Go)</h3><p>实现一个程序：</p>
<p>创建了3个生产者 goroutine (扇出)，每个 goroutine 向自己的 chan 发送数字1到5，然后通过一个扇入函数将这些 chan 合并到一个 chan 中，最后在 主 goroutine 中打印结果。</p>
<div class="tabs" id="fan-in-fan-out"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#fan-in-fan-out-1">Pipeline</button></li><li class="tab"><button type="button" data-href="#fan-in-fan-out-2">Producer</button></li><li class="tab"><button type="button" data-href="#fan-in-fan-out-3">Consumer</button></li><li class="tab"><button type="button" data-href="#fan-in-fan-out-4">main</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="fan-in-fan-out-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> FanInOutPipeline <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  numOfProducers <span class="token builtin">int</span>
  producer       <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>FanProducer
  consumer       <span class="token operator">*</span>Consumer
  produceGroup   sync<span class="token punctuation">.</span>WaitGroup
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fan-in-fan-out-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> FanProducer <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  fanOutChan <span class="token keyword">chan</span> <span class="token builtin">int</span>
  ID         <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>FanProducer<span class="token punctuation">)</span> <span class="token function">Produce</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  c<span class="token punctuation">.</span>ID <span class="token operator">=</span> id
  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span>fanOutChan <span class="token operator">&lt;-</span> i
  <span class="token punctuation">&#125;</span>
  <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>fanOutChan<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fan-in-fan-out-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Consumer <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  inChanList <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">chan</span> <span class="token builtin">int</span>
  mergeChan  <span class="token keyword">chan</span> <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Consumer<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  c<span class="token punctuation">.</span>inChanList <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>inChanList<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Consumer<span class="token punctuation">)</span> <span class="token function">FanIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>inChanList<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">var</span> g sync<span class="token punctuation">.</span>WaitGroup
  g<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>inChanList<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ch <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>inChanList <span class="token punctuation">&#123;</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">defer</span> g<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">for</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">&#123;</span>
        c<span class="token punctuation">.</span>mergeChan <span class="token operator">&lt;-</span> num
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  g<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>mergeChan<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fan-in-fan-out-4"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Fan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  pipe <span class="token operator">:=</span> FanInOutPipeline<span class="token punctuation">&#123;</span>
    numOfProducers<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    producer<span class="token punctuation">:</span>       <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>FanProducer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    consumer<span class="token punctuation">:</span> <span class="token operator">&amp;</span>Consumer<span class="token punctuation">&#123;</span>
      inChanList<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      mergeChan<span class="token punctuation">:</span>  <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>

  pipe<span class="token punctuation">.</span>produceGroup<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
    p <span class="token operator">:=</span> <span class="token operator">&amp;</span>FanProducer<span class="token punctuation">&#123;</span>
      fanOutChan<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
    pipe<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>fanOutChan<span class="token punctuation">)</span>
    pipe<span class="token punctuation">.</span>producer <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>pipe<span class="token punctuation">.</span>producer<span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">defer</span> pipe<span class="token punctuation">.</span>produceGroup<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      p<span class="token punctuation">.</span><span class="token function">Produce</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">go</span> pipe<span class="token punctuation">.</span>produceGroup<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">go</span> pipe<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span><span class="token function">FanIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  total <span class="token operator">:=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> pipe<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>mergeChan <span class="token punctuation">&#123;</span>
    total <span class="token operator">+=</span> num
  <span class="token punctuation">&#125;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`merge Result Chan:`</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式原则概要</title>
    <url>/2020/07/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99%E6%A6%82%E8%A6%81/</url>
    <content><![CDATA[<h2 id="设计模式的七大原则-The-7-Principles-of-Design-Patterns"><a href="#设计模式的七大原则-The-7-Principles-of-Design-Patterns" class="headerlink" title="设计模式的七大原则(The 7 Principles of Design Patterns)"></a>设计模式的七大原则(The 7 Principles of Design Patterns)</h2><h3 id="面向对象的-5-大原则-SOLID-其他-2-种原则"><a href="#面向对象的-5-大原则-SOLID-其他-2-种原则" class="headerlink" title="面向对象的 5 大原则(SOLID) + 其他 2 种原则:"></a>面向对象的 5 大原则(SOLID) + 其他 2 种原则:</h3><ul>
<li>单一职责原则（Single Responsibility Principle, SRP）</li>
<li>开闭原则（Open Closed Principle，OCP）</li>
<li>里氏替换原则（Liskov Substitution Principle，LSP）</li>
<li>接口隔离原则（Interface Segregation Principle，ISP）</li>
<li>依赖倒置原则（Dependency Inversion Principle，DIP）</li>
<li>合成&#x2F;聚合复用原则（Composite&#x2F;Aggregate Reuse Principle，CARP）</li>
<li>最少知识原则（Least Knowledge Principle，LKP）或者迪米特法则（Law of  Demeter，LOD）</li>
</ul>
<table>
<thead>
<tr>
<th align="left">标记</th>
<th align="left">设计模式原则名称</th>
<th align="left">简单定义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SRP</td>
<td align="left">单一职责原则</td>
<td align="left">一个类只负责一个功能领域中的相应职责</td>
</tr>
<tr>
<td align="left">OCP</td>
<td align="left">开闭原则</td>
<td align="left">对扩展开放，对修改关闭</td>
</tr>
<tr>
<td align="left">LSP</td>
<td align="left">里氏替换原则</td>
<td align="left">所有引用基类的地方必须能透明地使用其子类的对象</td>
</tr>
<tr>
<td align="left">ISP</td>
<td align="left">接口隔离原则</td>
<td align="left">类之间的依赖关系应该建立在最小的接口上</td>
</tr>
<tr>
<td align="left">DIP</td>
<td align="left">依赖倒置原则</td>
<td align="left">依赖于抽象，不能依赖于具体实现</td>
</tr>
<tr>
<td align="left">CARP</td>
<td align="left">合成&#x2F;聚合复用原则</td>
<td align="left">尽量使用合成&#x2F;聚合，而不是通过继承达到复用的目的</td>
</tr>
<tr>
<td align="left">LOD</td>
<td align="left">迪米特法则</td>
<td align="left">一个软件实体应当尽可能少的与其他实体发生相互作用</td>
</tr>
</tbody></table>
<br/>

<h4 id="单一职责原则-Single-Responsibility-Principle"><a href="#单一职责原则-Single-Responsibility-Principle" class="headerlink" title="单一职责原则(Single Responsibility Principle)"></a>单一职责原则(Single Responsibility Principle)</h4><div class="tabs" id="单一职责原则"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#单一职责原则-1">SRP</button></li><li class="tab"><button type="button" data-href="#单一职责原则-2">Bad case Journal</button></li><li class="tab"><button type="button" data-href="#单一职责原则-3">SRP Good Case</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="单一职责原则-1"><p>  单一职责原则（SRP：Single responsibility principle）：一个类应该<strong>只有一个发生变化的原因</strong>，即一个类<strong>只负责一项职责</strong>。</p>
<p>  如果一个类有多个职责，这些职责就耦合在了一起。当一个职责发生变化时，可能会影响其它的职责。另外，多个职责耦合在一起会影响复用性。</p>
<p>此原则的核心是<strong>解耦</strong>和<strong>增强内聚性</strong>。</p>
<p>  遵循 SRP。分别建立两个类 A1、A2，使 A1 完成职责 P1，A2 完成职责 P2。这样，当修改类 A1 时，不会影响到职责 A2；同理，当修改 A2 时，也不会影响到职责 P1。</p>
<p>each class has only one responsibility, and therefore has only one reason to change!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单一职责原则-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Journal</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">explicit</span> <span class="token function">Journal</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> title<span class="token punctuation">)</span> 
    <span class="token operator">:</span> <span class="token function">title_</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// one functionality of the Journal</span>
  <span class="token keyword">void</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> entry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  	<span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  	entries<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  
<span class="token keyword">private</span><span class="token operator">:</span>
  std<span class="token double-colon punctuation">::</span>string title<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> entries<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// break the Single Responsibility Principle!!!</span>
<span class="token comment">// The Journal's responsibility is to keep journal entries, </span>
<span class="token comment">// not to write them to disk !!! </span>
<span class="token keyword">void</span> <span class="token class-name">Journal</span><span class="token double-colon punctuation">::</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> filename<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  std<span class="token double-colon punctuation">::</span>ostream <span class="token function">ofs</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> e <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ofs <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单一职责原则-3"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// each class has one responsibility</span>
<span class="token keyword">class</span> <span class="token class-name">Journal</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">explicit</span> <span class="token function">Journal</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> title<span class="token punctuation">)</span> 
    <span class="token operator">:</span> <span class="token function">title_</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// one functionality of the Journal</span>
  <span class="token keyword">void</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> entry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  	<span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// if thre's something more that needs to be done...</span>
  	entries<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"test-"</span> <span class="token operator">+</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// such as we can change here in Add() function</span>
  <span class="token punctuation">&#125;</span>
  
<span class="token keyword">private</span><span class="token operator">:</span>
  std<span class="token double-colon punctuation">::</span>string title<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> entries<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">PersistenceManager</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token keyword">const</span> Journal<span class="token operator">&amp;</span> j<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> filename<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>ostream <span class="token function">ofs</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> e <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      ofs <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>



<br/>

<h4 id="开闭原则-Open-Closed-Principle"><a href="#开闭原则-Open-Closed-Principle" class="headerlink" title="开闭原则(Open Closed Principle)"></a>开闭原则(Open Closed Principle)</h4><div class="tabs" id="单一职责原则"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#单一职责原则-1">OCP</button></li><li class="tab"><button type="button" data-href="#单一职责原则-2">OCP Bad Case</button></li><li class="tab"><button type="button" data-href="#单一职责原则-3">OCP Good Case</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="单一职责原则-1"><p>  开闭原则（OCP ：Open Closed Principle）：软件中的<strong>实体（类，模块，函数等等）</strong>应该<strong>对扩展开放，对修改封闭</strong>，这意味着一个实体是允许在<strong>不改变它的源代码的前提下变更它的行为</strong>。</p>
<p>  开闭原则<strong>对扩展开放，对修改封闭</strong>，该特性在产品化的环境中是特别有价值的，在这种环境中，改变源代码需要<strong>代码审查，单元测试</strong>以及诸如此类的用以确保产品使用品质的过程。遵循这种原则的代码<strong>在扩展时并不发生改变，因此无需上述的过程</strong>。</p>
<p>A type is open for extention but closed for modification !!!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单一职责原则-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">Color</span> <span class="token punctuation">&#123;</span>
  Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  Green <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  Blue <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">Size</span> <span class="token punctuation">&#123;</span>
  Small <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  Medium <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  Large <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>
  string name<span class="token punctuation">;</span>
  Color color<span class="token punctuation">;</span>
  Size size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token comment">// Now, we want to provide certain filtering capabilities </span>
<span class="token comment">// for a given set of products</span>
<span class="token keyword">class</span> <span class="token class-name">ProductFilter</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Product<span class="token operator">*</span><span class="token operator">></span> Items<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  Items <span class="token function">ByColor</span><span class="token punctuation">(</span>Items<span class="token operator">&amp;</span> items<span class="token punctuation">,</span> Color color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Items result<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">-></span>color <span class="token operator">==</span> color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// some time later, we asked to implement filtering by size,</span>
<span class="token comment">// if we jump back into ProductFilter and add the fucking code and recompile,</span>
<span class="token comment">// we break the OCP!!!</span>
<span class="token keyword">class</span> <span class="token class-name">ProductFilter</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  Items <span class="token function">BySize</span><span class="token punctuation">(</span>Items<span class="token operator">&amp;</span> items<span class="token punctuation">,</span> Size size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
    
  <span class="token comment">// other filters implements...</span>
  <span class="token comment">// oops...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单一职责原则-3"><p>We want filtering that is extensible without having modify it !!!</p>
<p>How can we achieve it? Well, first of all, we conceptually separate(SRP)!</p>
<p>out filtering process into two parts: a filter(a process which takes all items and only return some) and a specication(the definition of a predicate to apply to a data element).</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">Color</span> <span class="token punctuation">&#123;</span>
  Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  Green <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  Blue <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">Size</span> <span class="token punctuation">&#123;</span>
  Small <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  Medium <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  Large <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>
  string name<span class="token punctuation">;</span>
  Color color<span class="token punctuation">;</span>
  Size size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// make a very simple definition of a specification interface</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Specification</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">IsSatisfied</span><span class="token punctuation">(</span>T<span class="token operator">*</span> item<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">virtual</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">*</span><span class="token operator">></span> <span class="token function">Filter</span><span class="token punctuation">(</span>Specification<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> spec<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// implementations of filter is really simple</span>
<span class="token keyword">class</span> <span class="token class-name">ExcellentFilter</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">Filter</span><span class="token operator">&lt;</span><span class="token class-name">Product</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Product<span class="token operator">*</span><span class="token operator">></span> <span class="token function">Filter</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Product<span class="token operator">*</span><span class="token operator">></span> items<span class="token punctuation">,</span> Specification<span class="token operator">&lt;</span>Product<span class="token operator">></span><span class="token operator">&amp;</span> spec<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Product<span class="token operator">*</span><span class="token operator">></span> result<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> p <span class="token operator">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>spc<span class="token punctuation">.</span><span class="token function">IsSatisfied</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// to make a lot of different filters is easy</span>
<span class="token keyword">class</span> <span class="token class-name">ColorSpecification</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">Specification</span><span class="token operator">&lt;</span><span class="token class-name">Product</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">explicit</span>  <span class="token function">ColorSpecification</span><span class="token punctuation">(</span><span class="token keyword">const</span> Color color<span class="token punctuation">)</span> 
    <span class="token operator">:</span> <span class="token function">color_</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">bool</span> <span class="token function">IsSatisfied</span><span class="token punctuation">(</span>Product<span class="token operator">*</span> item<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> item<span class="token operator">-></span>color <span class="token operator">==</span> color_<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  
<span class="token keyword">private</span><span class="token operator">:</span>
  Color color_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// complicated Specification</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">AndSpecification</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Specification</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">AndSpecification</span><span class="token punctuation">(</span>Specification<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> first<span class="token punctuation">,</span> Specification<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> second<span class="token punctuation">)</span> 
    <span class="token operator">:</span> <span class="token function">first_</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">second_</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      
    <span class="token punctuation">&#125;</span>
  <span class="token keyword">bool</span> <span class="token function">IsSatisfied</span><span class="token punctuation">(</span>T<span class="token operator">*</span> item<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> first_<span class="token punctuation">.</span><span class="token function">IsSatisfied</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sencond_<span class="token punctuation">.</span><span class="token function">IsSatisfied</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  
<span class="token keyword">private</span><span class="token operator">:</span>
  Specification<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> first_<span class="token punctuation">;</span>
  Specification<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> sencond_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Product<span class="token operator">*</span><span class="token operator">></span> all <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">&amp;</span>Product<span class="token punctuation">&#123;</span><span class="token string">"Tree"</span><span class="token punctuation">,</span> Color<span class="token double-colon punctuation">::</span>Green<span class="token punctuation">,</span> Size<span class="token double-colon punctuation">::</span>Large<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>Product<span class="token punctuation">&#123;</span><span class="token string">"Apple"</span><span class="token punctuation">,</span> Color<span class="token double-colon punctuation">::</span>Green<span class="token punctuation">,</span> Size<span class="token double-colon punctuation">::</span>Small<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>Product<span class="token punctuation">&#123;</span><span class="token string">"House"</span><span class="token punctuation">,</span> Color<span class="token double-colon punctuation">::</span>Blue<span class="token punctuation">,</span> Size<span class="token double-colon punctuation">::</span>Large<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  
  ExcellentFilter filter<span class="token punctuation">;</span>
  
  ColorSpecification <span class="token function">green_spec</span><span class="token punctuation">(</span>Color<span class="token double-colon punctuation">::</span>Green<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ColorSpecification <span class="token function">small_spec</span><span class="token punctuation">(</span>Size<span class="token double-colon punctuation">::</span>Small<span class="token punctuation">)</span><span class="token punctuation">;</span>
  AndSpecification<span class="token operator">&lt;</span>Product<span class="token operator">></span> green_and_small_spec<span class="token punctuation">&#123;</span>green_spec<span class="token punctuation">,</span> small_spec<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  
  <span class="token keyword">auto</span> green_stuff <span class="token operator">=</span> filter<span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>all<span class="token punctuation">,</span> green_spec<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> small_and_green_stuff <span class="token operator">=</span> filter<span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>all<span class="token punctuation">,</span> green_and_small_spec<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h4 id="里氏替换原则-Liskov-Substitution-Principle"><a href="#里氏替换原则-Liskov-Substitution-Principle" class="headerlink" title="里氏替换原则(Liskov Substitution Principle)"></a>里氏替换原则(Liskov Substitution Principle)</h4><div class="tabs" id="里氏替换原则"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#里氏替换原则-1">LSP</button></li><li class="tab"><button type="button" data-href="#里氏替换原则-2">LSP Bad Case</button></li><li class="tab"><button type="button" data-href="#里氏替换原则-3">LSP Good Case</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="里氏替换原则-1"><p>里氏替换原则（LSP：Liskov Substitution Principle）：<strong>派生类（子类）对象可以在程序中代替其基类（超类）对象</strong>。</p>
<p>有一功能 P1, 由类 A 完成，现需要将功能 P1 进行扩展，扩展后的功能为 P，其中 P 由原有功能 P1 与新功能 P2 组成。新功能 P 由类 A 的子类 B 来完成，则子类 B 在完成新功能 P2 的同时，有可能会导致原有功能 P1 发生故障。</p>
<p>当使用继承时候，类 B 继承类 A 时，<strong>除添加新的方法完成新增功能 P2，尽量不要修改父类方法预期的行为</strong>。</p>
<ul>
<li>里氏替换原则是<strong>实现开闭原则的重要方式之一</strong>。</li>
<li>里氏替换原则<strong>克服</strong>了继承中重写父类造成的<strong>可复用性变差的缺点</strong>。</li>
<li>里氏替换原则是动作正确性的保证。即<strong>类的扩展不会给已有的系统引入新的错误</strong>，降低了代码出错的可能性。</li>
<li>加强程序的<strong>健壮性</strong>，同时变更时可以做到非常好的<strong>兼容性</strong>，提高程序的维护性、可扩展性，降低需求变更时引入的风险。</li>
</ul>
<p>If an interface takes an object of type Parent, it should equally take an object of type Child without anything breaking.</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="里氏替换原则-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
  <span class="token keyword">int</span> width_<span class="token punctuation">,</span> height_<span class="token punctuation">;</span>
  
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">width_</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height_</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">int</span> <span class="token function">get_width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> width_<span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
  
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">set_width</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">this</span><span class="token operator">-></span>width_ <span class="token operator">=</span> w<span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
  
  <span class="token keyword">int</span> <span class="token function">get_height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> height_<span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">set_height</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">this</span><span class="token operator">-></span>height_ <span class="token operator">=</span> h<span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">int</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> width_ <span class="token operator">*</span> height_<span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// suppose we make a special kind of Rectangle called a Square</span>

<span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Rectangle</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">Square</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Retangle</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">void</span> <span class="token function">set_width</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>width_ <span class="token operator">=</span> w<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">set_height</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">this</span><span class="token operator">-></span>height_ <span class="token operator">=</span> h<span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// evil approach !!!</span>
<span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>Rectangle<span class="token operator">&amp;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> w <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">get_width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  r<span class="token punctuation">.</span><span class="token function">set_height</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"expected area = "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>w <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", got "</span> <span class="token operator">&lt;&lt;</span> r<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// The preceding function takes </span>
<span class="token comment">// the formula Area = Width × Height as an invariant. </span>
<span class="token comment">// It gets the width, sets the height, </span>
<span class="token comment">// and rightly expects the product to </span>
<span class="token comment">// be equal to the calculated area. </span>
<span class="token comment">// But calling the preceding function </span>
<span class="token comment">// with a Square yields a mismatch:</span>
<span class="token comment">// Square s&#123;5&#125;;</span>
<span class="token comment">// process(s); // expected area = 50, got 25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>process() breaks the LSP by being thoroughly unable to take a derived type Square instead of the base type Rectangle.</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="里氏替换原则-3"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// What’s the solution? Well, there are many. </span>
<span class="token comment">// Personally, I’d argue that </span>
<span class="token comment">// the type Square shouldn’t even exist : </span>
<span class="token comment">// instead, we can make a Factory (see Chapter 3) that </span>
<span class="token comment">// creates both rectangles and squares:</span>
<span class="token keyword">struct</span> <span class="token class-name">RectangleFactory</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">static</span> Rectangle <span class="token function">create_rectangle</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> Rectangle <span class="token function">create_square</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// You might also want a way of detecting that a Rectangle is, in fact, a square:</span>
<span class="token keyword">bool</span> <span class="token class-name">Rectangle</span><span class="token double-colon punctuation">::</span><span class="token function">is_square</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> width <span class="token operator">==</span> height<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// The nuclear option, in this case, </span>
<span class="token comment">// would be to throw an exception in </span>
<span class="token comment">// Square’s set_width()/set_height(), </span>
<span class="token comment">// stating that these operations are </span>
<span class="token comment">// unsupported and you should be using </span>
<span class="token comment">// set_size() instead. </span>
<span class="token comment">// This, however, violates the principle of </span>
<span class="token comment">// least surpise, since you would expect </span>
<span class="token comment">// a call to set_width() to make a meaningful change</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h4 id="接口隔离原则-Interface-Segregation-Principle"><a href="#接口隔离原则-Interface-Segregation-Principle" class="headerlink" title="接口隔离原则(Interface Segregation Principle)"></a>接口隔离原则(Interface Segregation Principle)</h4><div class="tabs" id="接口隔离原则"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#接口隔离原则-1">ISP</button></li><li class="tab"><button type="button" data-href="#接口隔离原则-2">ISP Bad Case</button></li><li class="tab"><button type="button" data-href="#接口隔离原则-3">ISP Good Case</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="接口隔离原则-1"><p>接口隔离原则（ISP ：Interface Segregation Principle）：客户端<strong>不应该依赖它不需要的接口</strong>。一个类对另一个类的依赖应该建立在<strong>最小的接口</strong>上。</p>
<p>类 A 通过接口 I 依赖类 B，类 C 通过接口 I 依赖类 D，如果接口 I 对于类 A 和类 B 来说不是最小接口，则类 B 和类 D 必须去实现他们不需要的方法。</p>
<p><strong>将臃肿的接口 I 拆分为独立的几个接口</strong>，类 A 和类 C 分别与他们需要的接口建立依赖关系。</p>
<p>Suggests is that you split up interfaces so that implementors can pick and choose depending on their needs.</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="接口隔离原则-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyFavouritePrinter</span> <span class="token comment">/* : public IMachine */</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Document<span class="token operator">*</span><span class="token operator">></span> docs<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">fax</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Document<span class="token operator">*</span><span class="token operator">></span> docs<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">scan</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Document<span class="token operator">*</span><span class="token operator">></span> docs<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// some implementor of this interface </span>
<span class="token comment">// might not need scanning or faxing, </span>
<span class="token comment">// just printing. And yet, </span>
<span class="token comment">// you are forcing them to implement those extra features</span>
<span class="token keyword">class</span> <span class="token class-name">IMachine</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Document<span class="token operator">*</span><span class="token operator">></span> docs<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fax</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Document<span class="token operator">*</span><span class="token operator">></span> docs<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">scan</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Document<span class="token operator">*</span><span class="token operator">></span> docs<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="接口隔离原则-3"><p>To segregate parts of a complicated interface into separate interfaces so as to avoid forcing implementors to implement functionality that they do not really need. Anytime you write<br>a plug-in for some complicated application and you’re given an interface with 20 confusing functions to implement with various no-ops and return nullptr, more likely than not the API authors have violated the ISP.</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">IPrinter</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Document<span class="token operator">*</span><span class="token operator">></span> docs<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">IScanner</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">scan</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Document<span class="token operator">*</span><span class="token operator">></span> docs<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Printer</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IPrinter</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Document<span class="token operator">*</span><span class="token operator">></span> docs<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Scanner</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IScanner</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">scan</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Document<span class="token operator">*</span><span class="token operator">></span> docs<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// if we really want an IMachine interface, </span>
<span class="token comment">// we can define it as a combination of </span>
<span class="token comment">// the aforementioned interfaces:</span>
<span class="token keyword">class</span> <span class="token class-name">IMachine</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IPrinter</span><span class="token punctuation">,</span> <span class="token class-name">IScanner</span> <span class="token comment">/* IFax and so on */</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// we could use simple delegation to ensure that </span>
<span class="token comment">// Machine reuses the functionality provided by </span>
<span class="token comment">// a particular IPrinter and IScanner:</span>
<span class="token keyword">class</span> <span class="token class-name">Machine</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IMachine</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  IPrinter<span class="token operator">&amp;</span> printer_<span class="token punctuation">;</span>
  IScanner<span class="token operator">&amp;</span> scanner_<span class="token punctuation">;</span>
 
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">Machine</span><span class="token punctuation">(</span>IPrinter<span class="token operator">&amp;</span> printer<span class="token punctuation">,</span> IScanner<span class="token operator">&amp;</span> scanner<span class="token punctuation">)</span> 
    <span class="token operator">:</span> <span class="token function">printer_</span><span class="token punctuation">(</span>printer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">scanner_</span><span class="token punctuation">(</span>scanner<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  
  <span class="token punctuation">&#125;</span>
  
  <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Document<span class="token operator">*</span><span class="token operator">></span> docs<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>printer_<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>docs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token keyword">void</span> <span class="token function">scan</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Document<span class="token operator">*</span><span class="token operator">></span> docs<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>scanner_<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>docs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h4 id="依赖倒置原则-Dependency-Inversion-Principle"><a href="#依赖倒置原则-Dependency-Inversion-Principle" class="headerlink" title="依赖倒置原则(Dependency Inversion Principle)"></a>依赖倒置原则(Dependency Inversion Principle)</h4><div class="tabs" id="依赖倒置原则"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#依赖倒置原则-1">DIP</button></li><li class="tab"><button type="button" data-href="#依赖倒置原则-2">DIP Bad Case</button></li><li class="tab"><button type="button" data-href="#依赖倒置原则-3">DIP Good Case</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="依赖倒置原则-1"><p>依赖倒置原则（DIP ：Dependence Inversion Principle）：</p>
<ul>
<li>高层模块不应该依赖低层模块，二者都应该依赖其抽象</li>
<li>抽象不应该依赖细节</li>
<li>细节应该依赖抽象</li>
</ul>
<p><strong>也就是说高层模块，低层模块，细节都应该依赖抽象。</strong></p>
<p>  类 A 直接依赖类 B，假如要将类 B 改为类 C，则必须通过修改类 A 的代码来达成。 类 A 一般是高层模块，负责复杂的业务逻辑。 类 B 和类 C 是低层模块，负责基本的原子操作。 修改类 A，会给程序带来不必要的风险。</p>
<p> <strong>The original definition of the DIP states the following:</strong></p>
<ul>
<li><p><strong>A. High-level modules should not depend on low-level modules. Both should depend on abstractions.</strong><br>  What this statement basically means is that, if you’re interested in logging, your reporting component should not depend on a concrete ConsoleLogger, but can depend on an ILogger interface. In this case, we are considering the reporting component to be high level (closer to the business domain), whereas logging, being a fundamental concern (kind of like file I&#x2F;O or threading, but not quite) is considered a low-level module.</p>
</li>
<li><p><strong>B. Abstractions should not depend on details. Details should depend on abstractions.</strong><br>  This is, once again, restating that dependencies on interfaces or base classes are better than dependencies on concrete types. Hopefully the truth of this statement is obvious, because such an approach supports better configurability and testability—provided you’re using a good framework to handle these dependencies for you.</p>
</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="依赖倒置原则-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token comment">// a common vialation of the DIP in C++ </span>
<span class="token comment">// is when a high-level module depends on</span>
<span class="token comment">// a low-level module via a concrete class</span>
<span class="token comment">// rather than an abstraction.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token keyword">class</span> <span class="token class-name">Database</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">insertData</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Inserting "</span> <span class="token operator">&lt;&lt;</span> data <span class="token operator">&lt;&lt;</span> <span class="token string">" into database."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">DataProcessor</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">processData</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token operator">&amp;</span> data<span class="token punctuation">,</span> Database database<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> d <span class="token operator">:</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            database<span class="token punctuation">.</span><span class="token function">insertData</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// in this exxamlple, the DataProcessor depends on </span>
<span class="token comment">// the Database class via a concrete class, rather than</span>
<span class="token comment">// an abstraction.This makes the DataProcessor tightly coupled</span>
<span class="token comment">// to the Database class, making it difficult to replace to </span>
<span class="token comment">// the Database class with a different implementation, or to </span>
<span class="token comment">// test the DataProcessor class in isolation.</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> data <span class="token punctuation">&#123;</span><span class="token string">"data1"</span><span class="token punctuation">,</span> <span class="token string">"data2"</span><span class="token punctuation">,</span> <span class="token string">"data3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    Database database<span class="token punctuation">;</span>
    DataProcessor processor<span class="token punctuation">;</span>
    processor<span class="token punctuation">.</span><span class="token function">processData</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> database<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="依赖倒置原则-3"><p>To fix this vialation of the DIP, we can introduce an abstraction for the </p>
<p>Database class, such as an interface or abstract base class, and have the</p>
<p>DataProcessor depend on this abstraction rather than the concrete Database class.</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token keyword">class</span> <span class="token class-name">IDatabase</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">insertData</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> data<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">IDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Database</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IDatabase</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">insertData</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> data<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Inserting "</span> <span class="token operator">&lt;&lt;</span> data <span class="token operator">&lt;&lt;</span> <span class="token string">" into database."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">DataProcessor</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">processData</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token operator">&amp;</span> data<span class="token punctuation">,</span> IDatabase<span class="token operator">&amp;</span> database<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> d <span class="token operator">:</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            database<span class="token punctuation">.</span><span class="token function">insertData</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> data <span class="token punctuation">&#123;</span><span class="token string">"data1"</span><span class="token punctuation">,</span> <span class="token string">"data2"</span><span class="token punctuation">,</span> <span class="token string">"data3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    Database database<span class="token punctuation">;</span>
    DataProcessor processor<span class="token punctuation">;</span>
    processor<span class="token punctuation">.</span><span class="token function">processData</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> database<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h4 id="合成-聚合复用原则-Composite-Aggregate-Reuse-Principle"><a href="#合成-聚合复用原则-Composite-Aggregate-Reuse-Principle" class="headerlink" title="合成&#x2F;聚合复用原则(Composite&#x2F;Aggregate Reuse Principle)"></a>合成&#x2F;聚合复用原则(Composite&#x2F;Aggregate Reuse Principle)</h4><div class="tabs" id="迪米特法则"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#迪米特法则-1">CARP</button></li><li class="tab"><button type="button" data-href="#迪米特法则-2">CARP Bad Case</button></li><li class="tab"><button type="button" data-href="#迪米特法则-3">CARP Good Case</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="迪米特法则-1"><p>组合&#x2F;聚合复用原则（CARP：Composite&#x2F;Aggregate Reuse Principle）：在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分，新对象通过向这些对象的委派达到复用已有功能的目的。就是说要尽量的使用合成和聚合，而<strong>不是继承关系达到复用的目的</strong>。</p>
<p>简短表达就是：<strong>尽量使用组合&#x2F;聚合，尽量不要使用继承</strong>。</p>
<p>在面向对象的设计里，有两种基本的方法可以在不同的环境中复用已有的设计和实现，即通过<strong>组合</strong>或<strong>继承</strong>。</p>
<p><strong>组合</strong></p>
<p>由于组合可以将已有的对象纳入到新对象中，使之成为新对象的一部分，因此<strong>新对象可以调用已有对象的功能</strong>，这样做有下面的好处：</p>
<ul>
<li>新对象存取成分对象的唯一方法是通过<strong>成分对象的接口</strong></li>
<li>这种复用是<strong>黑箱复用</strong>，因为成分对象的内部细节是新对象所看不见的</li>
<li>这种复用所需的<strong>依赖较少</strong></li>
<li>每一个<strong>新的类</strong>可以将焦点<strong>集中在一个任务上</strong></li>
<li>这种复用可以在运行时间内动态进行，作为整体的新对象可以动态地引用与部分对象类型相同的对象。也就是说，<strong>组合&#x2F;聚合是动态行为</strong>，即运行时行为。可以通过使用组合&#x2F;聚合的方式在设计上获得更高的<strong>灵活性</strong></li>
</ul>
<p>组合复用的缺点就是用组合复用建造的系统会<strong>有较多的对象需要管理</strong>。</p>
<p><strong>继承</strong></p>
<p><strong>组合几乎可以用到任何环境中去，但是继承只能用到一些环境中</strong>。</p>
<p>继承复用通过扩展一个已有对象的实现来得到新的功能，基类明显的捕获共同的属性和方法，而子类通过增加新的属性和方法来扩展超类的实现。</p>
<p>继承的优点：</p>
<ul>
<li><strong>新的实现比较容易</strong>，因为基类的大部分功能都可以通过继承自动的进入子类。</li>
<li>修改或扩展继承而来的实现较为容易。</li>
</ul>
<p>继承的缺点：</p>
<ul>
<li><p>继承复用<strong>破坏了包装</strong>，因为继承超类的的实现细节暴露给子类。由于超类的内部细节常常对子类是透明的，因此这种复用是<strong>透明的复用</strong>，又称“白箱”复用。</p>
</li>
<li><p>如果<strong>超类的实现发生改变</strong>，那么<strong>子类的实现也不得不发生改变</strong>。因此，当一个基类发生改变时，这种改变就会像水中投入石子引起的水波一样，将变化一圈又一圈的传导到一级又一级的子类，使设计师不得不相应地改变这些子类，以适应超类的变化。</p>
</li>
<li><p>从超类继承而来的实现是<strong>静态的</strong>，不可能在运行时间内发生改变，因此<strong>没有足够的灵活性</strong>。</p>
</li>
</ul>
<p><strong>使用组合还是继承?</strong></p>
<p>满足 “Is-A” 的关系是才可以使用继承，而组合却是一种 “Has-A”（整体与部分）的关系。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="迪米特法则-2"><p>雇员、销售员、经理，这三者可以设计为人是基类、雇员和经理都继承于人(代码如下);</p>
<p>这种设计的错误在于把<strong>角色</strong>的等级结构和<strong>雇员</strong>的<strong>等级结构混淆</strong>了。经理、销售员是一个人的角色，<strong>一个人可以同时拥有上述角色</strong>。如果按继承来设计，那么如果<strong>一个人是销售员的话，就不可能是经理</strong>，这显然不合理。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  std<span class="token double-colon punctuation">::</span>string name_<span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Employee</span></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Sales</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Employee</span></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="迪米特法则-3"><p>正确的设计是有个抽象类<strong>角色</strong>，人可以拥有<strong>多个角色（聚合）</strong>，销售员、经理是角色的子类(代码如下)；</p>
<p>这样做降低了类与类之间的耦合度，<code>Employee</code> 类的变化对其它类造成的影响相对较少。</p>
<p>从这个例子可以看出，<strong>当一个类是另一个类的角色时，不应该使用继承描述这种关系</strong>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  std<span class="token double-colon punctuation">::</span>string name_<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Role<span class="token operator">></span> roles_<span class="token punctuation">;</span> <span class="token comment">// "Has-A"</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Role</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Role</span></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Sales</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Role</span></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h4 id="迪米特法则-Law-of-Demeter"><a href="#迪米特法则-Law-of-Demeter" class="headerlink" title="迪米特法则(Law of Demeter)"></a>迪米特法则(Law of Demeter)</h4><div class="tabs" id="迪米特法则"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#迪米特法则-1">LOD</button></li><li class="tab"><button type="button" data-href="#迪米特法则-2">LOD Bad Case</button></li><li class="tab"><button type="button" data-href="#迪米特法则-3">LOD Good Case</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="迪米特法则-1"><p>  迪米特法则（LOD：Law Of Demeter）：又叫作<strong>最少知识原则</strong>（Least Knowledge Principle，LKP)。只与你的<strong>直接的</strong>朋友交谈，<strong>不跟“陌生人”说话</strong>（Talk only to your immediate friends and not to strangers）。其含义是：如果两个软件实体<strong>无须直接通信</strong>，那么就<strong>不应当发生直接的相互调用</strong>，可以通过第三方<strong>转发</strong>该调用。其目的是<strong>降低类之间的耦合度</strong>，提高模块的相对<strong>独立性</strong>。</p>
<p>  类与类之间的<strong>关系越密切</strong>，<strong>耦合度越大</strong>，当一个类发生改变时，对另一个类的<strong>影响也越大</strong>。</p>
<p>  <strong>每个类尽量减少对其他类的依赖</strong>。</p>
<p>迪米特法则要求<strong>限制</strong>软件实体之间<strong>通信的宽度和深度</strong>，正确使用迪米特法则将有以下两个优点。</p>
<ul>
<li><p>降低了类之间的<strong>耦合度</strong>，提高了模块的相对<strong>独立性</strong>。</p>
</li>
<li><p>由于亲合度降低，从而提高了<strong>类的可复用率</strong>和系统的<strong>扩展性</strong>。</p>
</li>
<li><p>迪米特法则中的“朋友”指什么？</p>
<p>当前<strong>对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数</strong>等，这些对象同当前对象<strong>存在关联、聚合或组合关系</strong>，<strong>可以直接访问</strong>这些对象的方法。</p>
</li>
<li><p>迪米特法则在强调什么？</p>
<ul>
<li>从依赖者的角度来说，<strong>只依赖应该依赖的对象</strong>。</li>
<li>从被依赖者的角度说，<strong>只暴露应该暴露的方法</strong>。</li>
</ul>
</li>
<li><p>如何实现迪米特法则？</p>
<ul>
<li>在<strong>类的划分</strong>上，应当尽量<strong>创建松耦合的类</strong>，类之间的耦合度越低，就越有利于复用，一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波及。</li>
<li>在<strong>类的结构设计</strong>上，每一个类都应当尽量<strong>降低其成员变量和成员函数的访问权限</strong>。</li>
<li>在<strong>类的设计</strong>上，只要有可能，一个类型应当设计成<strong>不变类</strong>。</li>
<li>在<strong>对其他类的引用</strong>上，一个对象对其他对象的引用应当<strong>降到最低</strong>。</li>
<li><strong>不暴露类的属性成员</strong>，而应该提供相应的<strong>访问器</strong>（set 和 get 方法）。</li>
<li><strong>谨慎使用序列化（Serializable）功能</strong>：当通过序列化进行对象传输的时候，如果<strong>对象修改了属性的访问权限</strong>，而传输的另一方没有进行同步修改，则会报<strong>序列化失败</strong>。</li>
</ul>
<p>防止过度使用!!!</p>
<ul>
<li><strong>过度使用迪米特法则</strong>会使系统产生<strong>大量的中介类</strong>，从而增加系统的复杂性，使模块之间的<strong>通信效率降低</strong>。所以，在釆用迪米特法则时需要<strong>反复权衡</strong>，确保高内聚和低耦合的同时，保证系统的<strong>结构清晰</strong>。</li>
</ul>
</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="迪米特法则-2"><p>States that the less a class knows about other classes, the better, which means an object should have as little knowledge as possible about other objects, communicate only with friends, and not talk to strangers.</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">int</span> id_<span class="token punctuation">;</span>
  string name_<span class="token punctuation">;</span>
  <span class="token comment">// ...</span>

<span class="token keyword">public</span><span class="token operator">:</span>
  std<span class="token double-colon punctuation">::</span>string <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> name_<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Class</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">int</span> id_<span class="token punctuation">;</span>
  string name_<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Student<span class="token operator">*</span><span class="token operator">></span> sudents_<span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
  
<span class="token keyword">public</span><span class="token operator">:</span>
  std<span class="token double-colon punctuation">::</span>string <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> name_<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  
  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Student<span class="token operator">*</span><span class="token operator">></span> <span class="token function">get_students</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> sudents_<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">int</span> address_<span class="token punctuation">;</span>
  string name_<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Class<span class="token operator">*</span><span class="token operator">></span> classes_<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> cls <span class="token operator">:</span> classes_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> cls<span class="token punctuation">.</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
      <span class="token comment">// oops...</span>
      <span class="token keyword">auto</span> students <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">get_students</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> s <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="迪米特法则-3"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">int</span> id_<span class="token punctuation">;</span>
  string name_<span class="token punctuation">;</span>
  <span class="token comment">// ...</span>

<span class="token keyword">public</span><span class="token operator">:</span>
  std<span class="token double-colon punctuation">::</span>string <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> name_<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Class</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">int</span> id_<span class="token punctuation">;</span>
  string name_<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Student<span class="token operator">*</span><span class="token operator">></span> sudents_<span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
  
<span class="token keyword">public</span><span class="token operator">:</span>
  std<span class="token double-colon punctuation">::</span>string <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> name_<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token comment">// std::vector&lt;Student*> get_students() &#123;</span>
  <span class="token comment">//   return sudents_;</span>
  <span class="token comment">// &#125;</span>
  <span class="token keyword">void</span> <span class="token function">PrintStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> s <span class="token operator">:</span> students_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">int</span> address_<span class="token punctuation">;</span>
  string name_<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Class<span class="token operator">*</span><span class="token operator">></span> classes_<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> cls <span class="token operator">:</span> classes_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> cls<span class="token punctuation">.</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
      <span class="token comment">// 调用班级打印学生名称的方法，</span>
      <span class="token comment">// 学校直接调用来打印，从而避免了与班级的学生发生耦合</span>
      cls<span class="token punctuation">.</span><span class="token function">PrintStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>常见设计模式</title>
    <url>/2020/07/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/design%20patterns/</url>
    <content><![CDATA[<h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式(Singleton)"></a>单例模式(Singleton)</h3><h4 id="单例模式介绍"><a href="#单例模式介绍" class="headerlink" title="单例模式介绍"></a>单例模式介绍</h4><p>What is Singleton</p>
<p>The Singleton design pattern grew out of a very simple idea that<br>you should only have one instance of a particular component in your application. For example, a component that loads a database into memory and offers a read-only interface is a prime candidate for a Singleton, since it really doesn’t make sense to waste memory storing several identical datasets. In fact, your application might have constraints such that two or more instances of the database simply won’t fit into memory, or will result in such a lack of memory as to cause the program to malfunction.</p>
<br/>

<h4 id="单例模式实现-C"><a href="#单例模式实现-C" class="headerlink" title="单例模式实现(C++)"></a>单例模式实现(C++)</h4><div class="tabs" id="singleton-c++"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#singleton-c++-1">C++11 线程安全的单例模式</button></li><li class="tab"><button type="button" data-href="#singleton-c++-2">C++17 Template 版本</button></li><li class="tab"><button type="button" data-href="#singleton-c++-3">C++17 Variadic Template 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="singleton-c++-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 线程安全的单例模式</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
 
<span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> Singleton<span class="token operator">&amp;</span> <span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>  
    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span> src<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
    Singleton<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>once_flag once_flag_<span class="token punctuation">;</span>
    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Singleton<span class="token operator">></span> instance_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>once_flag Singleton<span class="token double-colon punctuation">::</span>once_flag_<span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Singleton<span class="token operator">></span> Singleton<span class="token double-colon punctuation">::</span>instance_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
 
Singleton<span class="token operator">&amp;</span> <span class="token class-name">Singleton</span><span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">call_once</span><span class="token punctuation">(</span>once_flag_<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
      instance_<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">new</span> Singleton<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span>instance_<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="singleton-c++-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">static</span> T <span class="token operator">&amp;</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
  Singleton <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

<span class="token keyword">protected</span><span class="token operator">:</span>
  <span class="token keyword">struct</span> <span class="token class-name">token</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//  C++17 static inline</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">inline</span> T <span class="token operator">&amp;</span><span class="token class-name">Singleton</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">static</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>T<span class="token operator">></span> instance<span class="token punctuation">&#123;</span><span class="token keyword">new</span> T<span class="token punctuation">&#123;</span>token<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">*</span>instance<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">GlobalConfig</span> <span class="token keyword">final</span> <span class="token operator">:</span> <span class="token keyword">public</span> Singleton<span class="token operator">&lt;</span>GlobalConfig<span class="token operator">></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Deprecated!!!</span>
  <span class="token comment">// friend Singleton&lt;GlobalConfig>;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token comment">// Using a constructor token to allow </span>
  <span class="token comment">// the base class to call the subclass's constructor </span>
  <span class="token comment">// without needing to be a friend.</span>
  <span class="token function">GlobalConfig</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Do GlobalConfig construction stuff~"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token operator">~</span><span class="token function">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Do GlobalConfig destruction stuff~"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">void</span> <span class="token function">GetConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Get global config now~"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token comment">// ...</span>

<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">GlobalConfig</span><span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="singleton-c++-3"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
    <span class="token keyword">static</span> T <span class="token operator">&amp;</span><span class="token function">GetInstance</span><span class="token punctuation">(</span>Args <span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>

    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
    Singleton <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

<span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>once_flag once_flag_<span class="token punctuation">;</span>
    <span class="token keyword">inline</span> <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>T<span class="token operator">></span> instance_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
std<span class="token double-colon punctuation">::</span>once_flag Singleton<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span>once_flag_<span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
<span class="token keyword">inline</span> T <span class="token operator">&amp;</span><span class="token class-name">Singleton</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span>Args <span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">call_once</span><span class="token punctuation">(</span>once_flag_<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
      instance_<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">T</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Singleton&lt;T> call once~"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span>instance_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">GlobalConfig</span> <span class="token keyword">final</span> <span class="token operator">:</span> <span class="token keyword">public</span> Singleton<span class="token operator">&lt;</span>GlobalConfig<span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Deprecated!!!</span>
    <span class="token comment">// friend Singleton&lt;GlobalConfig>;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// using a constructor token to allow </span>
    <span class="token comment">// the base class to call the subclass's constructor </span>
    <span class="token comment">// without needing to be a friend.</span>
    <span class="token function">GlobalConfig</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> 
    <span class="token operator">:</span> <span class="token function">x_</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y_</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"GlobalConfig construction~"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"GlobalConfig default construction~"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token operator">~</span><span class="token function">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"GlobalConfig destruction~"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">GetConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"get global config now, x,y:"</span> <span class="token operator">&lt;&lt;</span>  x_ <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> y_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> x_ <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> y_ <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  	<span class="token comment">// variadic</span>
    <span class="token class-name">GlobalConfig</span><span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">GlobalConfig</span><span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h4 id="单例模式实现-Go"><a href="#单例模式实现-Go" class="headerlink" title="单例模式实现(Go)"></a>单例模式实现(Go)</h4><div class="tabs" id="singleton-golang"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#singleton-golang-1">singleton</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="singleton-golang-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> singleton

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"sync"</span>
<span class="token punctuation">)</span>

<span class="token comment">// Singleton 是单例模式接口，导出的</span>
<span class="token comment">// 通过该接口可以避免 GetInstance 返回一个包私有类型的指针</span>
<span class="token keyword">type</span> Singleton <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
  <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// singleton 是单例模式类，包私有的</span>
<span class="token keyword">type</span> singleton <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
  instance <span class="token operator">*</span>singleton
  once     sync<span class="token punctuation">.</span>Once
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s singleton<span class="token punctuation">)</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Singleton <span class="token punctuation">&#123;</span>
  once<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    instance <span class="token operator">=</span> <span class="token operator">&amp;</span>singleton<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> instance
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h3 id="简单工厂模式-Simple-Factory"><a href="#简单工厂模式-Simple-Factory" class="headerlink" title="简单工厂模式(Simple Factory)"></a>简单工厂模式(Simple Factory)</h3><h4 id="简单工厂模式介绍"><a href="#简单工厂模式介绍" class="headerlink" title="简单工厂模式介绍"></a>简单工厂模式介绍</h4><p>简单工厂模式是一种创建型设计模式，它提供了一种简单的方式来创建对象，而不需要暴露对象的创建逻辑。在这个模式中，我们将创建对象的责任交给一个专门的工厂函数。该函数根据参数不同，返回不同的实例对象。</p>
<br/>

<h4 id="简单工厂模式实现-C"><a href="#简单工厂模式实现-C" class="headerlink" title="简单工厂模式实现(C++)"></a>简单工厂模式实现(C++)</h4><div class="tabs" id="simple-factory-c++-版本"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#simple-factory-c++-版本-1">Class: IAminal</button></li><li class="tab"><button type="button" data-href="#simple-factory-c++-版本-2">Class Dog</button></li><li class="tab"><button type="button" data-href="#simple-factory-c++-版本-3">Class: Tiger</button></li><li class="tab"><button type="button" data-href="#simple-factory-c++-版本-4">Class: AnimalFactory</button></li><li class="tab"><button type="button" data-href="#simple-factory-c++-版本-5">main</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="simple-factory-c++-版本-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">AnimalType</span> <span class="token punctuation">&#123;</span>
    Unknown<span class="token punctuation">,</span>
    Dog<span class="token punctuation">,</span> 
    Tiger
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">IAnimal</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">IAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"IAnimal released~"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">IAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="simple-factory-c++-版本-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once </span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./animal.h"</span></span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IAnimal</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

    <span class="token operator">~</span><span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// dog eat shit!!!</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Dog eat shit!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="simple-factory-c++-版本-3"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once </span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./animal.h"</span></span>

<span class="token keyword">class</span> <span class="token class-name">Tiger</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IAnimal</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Tiger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

    <span class="token operator">~</span><span class="token function">Tiger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Tiger go die~"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// tiger eat meats!!!</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Tiger eat meat!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="simple-factory-c++-版本-4"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once </span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./animal.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./dog.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./tiger.h"</span></span>

<span class="token keyword">class</span> <span class="token class-name">AnimalFactory</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">inline</span> <span class="token keyword">static</span> IAnimal<span class="token operator">*</span> <span class="token function">GetAnimal</span><span class="token punctuation">(</span>AnimalType t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">switch</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> AnimalType<span class="token double-colon punctuation">::</span>Dog<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">&#125;</span> <span class="token keyword">case</span> AnimalType<span class="token double-colon punctuation">::</span>Tiger<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">Tiger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">&#125;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="simple-factory-c++-版本-5"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./animal_factory.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">auto</span> a <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">shared_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>IAnimal<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token class-name">AnimalFactory</span><span class="token double-colon punctuation">::</span><span class="token function">GetAnimal</span><span class="token punctuation">(</span>AnimalType<span class="token double-colon punctuation">::</span>Tiger<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Lunch time~"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        a<span class="token operator">-></span><span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h4 id="简单工厂模式实现-Go"><a href="#简单工厂模式实现-Go" class="headerlink" title="简单工厂模式实现(Go)"></a>简单工厂模式实现(Go)</h4><div class="tabs" id="simple-factory-go-版本"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#simple-factory-go-版本-1">Class: IAnimal</button></li><li class="tab"><button type="button" data-href="#simple-factory-go-版本-2">Class: Dog</button></li><li class="tab"><button type="button" data-href="#simple-factory-go-版本-3">Class: Tiger</button></li><li class="tab"><button type="button" data-href="#simple-factory-go-版本-4">Common Definations</button></li><li class="tab"><button type="button" data-href="#simple-factory-go-版本-5">Factory Function</button></li><li class="tab"><button type="button" data-href="#simple-factory-go-版本-6">main</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="simple-factory-go-版本-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> simplefactory

<span class="token keyword">type</span> IAnimal <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
  <span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="simple-factory-go-版本-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> simplefactory

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> dog <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Eat dog eating</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>dog<span class="token punctuation">)</span> <span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">`Dog eat shit!`</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="simple-factory-go-版本-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> simplefactory

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> tiger <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Eat tiger eating</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>tiger<span class="token punctuation">)</span> <span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">`Tiger eat meat!`</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="simple-factory-go-版本-4"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> simplefactory

<span class="token comment">// 动物种类</span>
<span class="token keyword">type</span> AnimalSpecies <span class="token builtin">int8</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
  AnimalUnknown AnimalSpecies <span class="token operator">=</span> <span class="token boolean">iota</span>
  AnimalSpeciesDog
  AnimalSpeciesTiger
<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="simple-factory-go-版本-5"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> simplefactory

<span class="token keyword">func</span> <span class="token function">NewAnimal</span><span class="token punctuation">(</span>species AnimalSpecies<span class="token punctuation">)</span> IAnimal <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> species <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> AnimalSpeciesDog<span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>dog<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

  <span class="token keyword">case</span> AnimalSpeciesTiger<span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>tiger<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="simple-factory-go-版本-6"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> simplefactory

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"testing"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TestDogEat</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  animal <span class="token operator">:=</span> <span class="token function">NewAnimal</span><span class="token punctuation">(</span>AnimalSpeciesDog<span class="token punctuation">)</span>
  animal<span class="token punctuation">.</span><span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">TestTigerEat</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  animal <span class="token operator">:=</span> <span class="token function">NewAnimal</span><span class="token punctuation">(</span>AnimalSpeciesTiger<span class="token punctuation">)</span>
  animal<span class="token punctuation">.</span><span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h3 id="工厂方法模式-Factory-Method"><a href="#工厂方法模式-Factory-Method" class="headerlink" title="工厂方法模式(Factory Method)"></a>工厂方法模式(Factory Method)</h3><h4 id="工厂方法模式介绍"><a href="#工厂方法模式介绍" class="headerlink" title="工厂方法模式介绍"></a>工厂方法模式介绍</h4><p>工厂方法模式是一种创建型设计模式，它定义了一个用于创建对象的接口，但是让子类决定实例化哪个类。在工厂方法模式中，客户端无需知道实际创建的对象类型，而只需调用工厂方法即可。</p>
<br/>

<h4 id="工厂方法模式实现-C"><a href="#工厂方法模式实现-C" class="headerlink" title="工厂方法模式实现(C++)"></a>工厂方法模式实现(C++)</h4><div class="tabs" id="factory-method-c++-版本"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#factory-method-c++-版本-1">Class: Game</button></li><li class="tab"><button type="button" data-href="#factory-method-c++-版本-2">Class: CSgo</button></li><li class="tab"><button type="button" data-href="#factory-method-c++-版本-3">Class: PUBG</button></li><li class="tab"><button type="button" data-href="#factory-method-c++-版本-4">Class: GameMaker</button></li><li class="tab"><button type="button" data-href="#factory-method-c++-版本-5">main</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="factory-method-c++-版本-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once </span></span>

<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">Currency</span> <span class="token punctuation">&#123;</span>
    RMB <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    Dollar<span class="token punctuation">,</span>
    Euro<span class="token punctuation">,</span>
    VietnamDong<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 游戏价格</span>
<span class="token keyword">struct</span> <span class="token class-name">Payment</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> price<span class="token punctuation">;</span>
    Currency currency<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Guidence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">set_price</span><span class="token punctuation">(</span><span class="token keyword">const</span> Payment<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        price_ <span class="token operator">=</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">const</span> Payment <span class="token function">get_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
        <span class="token keyword">return</span> price_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">// ...</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Payment price_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="factory-method-c++-版本-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./game.h"</span></span>

<span class="token keyword">class</span> <span class="token class-name">CSgo</span> <span class="token keyword">final</span> <span class="token operator">:</span> <span class="token keyword">public</span> Game <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">CSgo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">CSgo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">Guidence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Here is the CSgo guidence~"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="factory-method-c++-版本-3"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./game.h"</span></span>

<span class="token keyword">class</span> <span class="token class-name">CSgo</span> <span class="token keyword">final</span> <span class="token operator">:</span> <span class="token keyword">public</span> Game <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">CSgo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">CSgo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">Guidence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Here is the CSgo guidence~"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="factory-method-c++-版本-4"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./csgo.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./pubg.h"</span></span>

<span class="token comment">// GameMaker 游戏厂商基类</span>
<span class="token keyword">class</span> <span class="token class-name">GameMaker</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">GameMaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">GameMaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">// factory method!!!</span>
    <span class="token keyword">virtual</span> Game<span class="token operator">*</span> <span class="token function">Make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>


    <span class="token keyword">void</span> <span class="token function">Publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> game <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">shared_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>Game<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">Make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Going to publish the game! "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        game<span class="token operator">-></span><span class="token function">Guidence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// CSgo 游戏厂商</span>
<span class="token keyword">class</span> <span class="token class-name">Valve</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">GameMaker</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    Game<span class="token operator">*</span> <span class="token function">Make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">CSgo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// PUBG 游戏厂商</span>
<span class="token keyword">class</span> <span class="token class-name">Krafton</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">GameMaker</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    Game<span class="token operator">*</span> <span class="token function">Make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">PUBG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="factory-method-c++-版本-5"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./game_maker.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 发行游戏 CSgo</span>
    <span class="token function">Valve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发行游戏 PUBG</span>
    <span class="token function">Krafton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h4 id="工厂方法模式实现-Go"><a href="#工厂方法模式实现-Go" class="headerlink" title="工厂方法模式实现(Go)"></a>工厂方法模式实现(Go)</h4><div class="tabs" id="factory-method-go-版本"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#factory-method-go-版本-1">Common Definations</button></li><li class="tab"><button type="button" data-href="#factory-method-go-版本-2">Base Class: Game</button></li><li class="tab"><button type="button" data-href="#factory-method-go-版本-3">Game: CSgo</button></li><li class="tab"><button type="button" data-href="#factory-method-go-版本-4">Game: PUBG</button></li><li class="tab"><button type="button" data-href="#factory-method-go-版本-5">Base Class: GameMaker</button></li><li class="tab"><button type="button" data-href="#factory-method-go-版本-6">GameMaker: Valve</button></li><li class="tab"><button type="button" data-href="#factory-method-go-版本-7">GameMaker: Krafton</button></li><li class="tab"><button type="button" data-href="#factory-method-go-版本-8">main</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="factory-method-go-版本-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> factorymethod

<span class="token keyword">type</span> GameType <span class="token builtin">int8</span>
<span class="token keyword">type</span> CurrencyType <span class="token builtin">int8</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
  GameTypeUnknown <span class="token operator">=</span> <span class="token boolean">iota</span>
  GameTypeCsgo
  GameTypePUBG
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
  RMBCurrency CurrencyType <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span>
  DollarCurrency
  EuroCurrency
  VietnamDongCurrency
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Payment <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  Price    <span class="token builtin">int64</span>          <span class="token string">`json:"price"`</span>
  Currency CurrencyType <span class="token string">`json:"currency"`</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="factory-method-go-版本-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> factorymethod

<span class="token comment">// Game base class of all games</span>
<span class="token keyword">type</span> Game <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Guidence 游戏指南</span>
  <span class="token function">Guidence</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// Price 游戏售价</span>
  <span class="token function">Price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Payment

  <span class="token comment">// AdjustPrice 游戏定价</span>
  <span class="token function">AdjustPrice</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="factory-method-go-版本-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> factorymethod

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> csgo <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  price Payment
  <span class="token comment">// ..</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewCSgo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Game <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>csgo<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>csgo<span class="token punctuation">)</span> <span class="token function">Guidence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`CSgo Play guidence`</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>csgo<span class="token punctuation">)</span> <span class="token function">Price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Payment <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`Price of CSgo:`</span><span class="token punctuation">,</span> g<span class="token punctuation">.</span>price<span class="token punctuation">)</span>
  <span class="token keyword">return</span> g<span class="token punctuation">.</span>price
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>csgo<span class="token punctuation">)</span> <span class="token function">AdjustPrice</span><span class="token punctuation">(</span>price Payment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  g<span class="token punctuation">.</span>price <span class="token operator">=</span> price
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="factory-method-go-版本-4"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> factorymethod

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> pubg <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  price Payment
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewPUBG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Game <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>pubg<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>pubg<span class="token punctuation">)</span> <span class="token function">Guidence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`PUBG Play guidence`</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>pubg<span class="token punctuation">)</span> <span class="token function">Price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Payment <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`Price of PUBG:`</span><span class="token punctuation">,</span> g<span class="token punctuation">.</span>price<span class="token punctuation">)</span>
  <span class="token keyword">return</span> g<span class="token punctuation">.</span>price
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>pubg<span class="token punctuation">)</span> <span class="token function">AdjustPrice</span><span class="token punctuation">(</span>price Payment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  g<span class="token punctuation">.</span>price <span class="token operator">=</span> price
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="factory-method-go-版本-5"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> factorymethod

<span class="token comment">// base class of all game makers</span>
<span class="token keyword">type</span> GameMaker <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Publish games to players</span>
  <span class="token function">Publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// Make develop a game</span>
  <span class="token function">Make</span><span class="token punctuation">(</span>t GameType<span class="token punctuation">)</span> Game
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="factory-method-go-版本-6"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> factorymethod

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token comment">// game maker of csgo</span>
<span class="token keyword">type</span> valve <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Valve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> GameMaker <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>valve<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>valve<span class="token punctuation">)</span> <span class="token function">Make</span><span class="token punctuation">(</span>t GameType<span class="token punctuation">)</span> Game <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> t <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> GameTypeCsgo<span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token function">NewCSgo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// other games of krafton publish</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>valve<span class="token punctuation">)</span> <span class="token function">Publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  csgo <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>GameTypeCsgo<span class="token punctuation">)</span>
  <span class="token keyword">if</span> csgo <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`CSgo is on the shelf~`</span><span class="token punctuation">)</span>
  <span class="token comment">// 定制售价</span>
  csgo<span class="token punctuation">.</span><span class="token function">AdjustPrice</span><span class="token punctuation">(</span>Payment<span class="token punctuation">&#123;</span>
    Price<span class="token punctuation">:</span>    <span class="token number">1000</span><span class="token punctuation">,</span>
    Currency<span class="token punctuation">:</span> DollarCurrency<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token comment">// 公开售价</span>
  csgo<span class="token punctuation">.</span><span class="token function">Price</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 发布游戏指南</span>
  csgo<span class="token punctuation">.</span><span class="token function">Guidence</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="factory-method-go-版本-7"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> factorymethod

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token comment">// game maker of PUBG</span>
<span class="token keyword">type</span> krafton <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Krafton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> GameMaker <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>krafton<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>krafton<span class="token punctuation">)</span> <span class="token function">Make</span><span class="token punctuation">(</span>t GameType<span class="token punctuation">)</span> Game <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> t <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> GameTypePUBG<span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token function">NewPUBG</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// other games of krafton publish</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>krafton<span class="token punctuation">)</span> <span class="token function">Publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  pubg <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>GameTypePUBG<span class="token punctuation">)</span>
  <span class="token keyword">if</span> pubg <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`PUBG is on the shelf~`</span><span class="token punctuation">)</span>
  <span class="token comment">// 定制售价</span>
  pubg<span class="token punctuation">.</span><span class="token function">AdjustPrice</span><span class="token punctuation">(</span>Payment<span class="token punctuation">&#123;</span>
    Price<span class="token punctuation">:</span>    <span class="token number">500</span><span class="token punctuation">,</span>
    Currency<span class="token punctuation">:</span> RMBCurrency<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token comment">// 公开售价</span>
  pubg<span class="token punctuation">.</span><span class="token function">Price</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 发布游戏指南</span>
  pubg<span class="token punctuation">.</span><span class="token function">Guidence</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="factory-method-go-版本-8"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> factorymethod

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"testing"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TestPublishCSgo</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 发行游戏 CSgo</span>
  <span class="token function">Valve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">TestPublishPUBG</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 发行游戏 PUBG</span>
  <span class="token function">Krafton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h3 id="抽象工厂模式-Abstract-Factory"><a href="#抽象工厂模式-Abstract-Factory" class="headerlink" title="抽象工厂模式(Abstract Factory)"></a>抽象工厂模式(Abstract Factory)</h3><h4 id="抽象工厂模式的介绍"><a href="#抽象工厂模式的介绍" class="headerlink" title="抽象工厂模式的介绍"></a>抽象工厂模式的介绍</h4><p>Factory Method 与 Abstract Factory</p>
<p>The Factory Method pattern uses inheritance and relies on a subclass to handle the desired object instantiation.</p>
<p>The Abstract Factory pattern, a class delegates the responsibility of object instantiation to another object via composition.</p>
<p>抽象工厂模式是一种创建型设计模式，用于创建一系列相关或相互依赖的对象，而无需指定其具体类。</p>
<p>在抽象工厂模式中，我们定义一个抽象工厂接口，它包含多个工厂方法，每个工厂方法可以创建一类相关的对象。然后，我们创建一个具体工厂实现该接口，用于创建具体对象。</p>
<br/>

<h4 id="抽象工厂模式实现-C"><a href="#抽象工厂模式实现-C" class="headerlink" title="抽象工厂模式实现(C++)"></a>抽象工厂模式实现(C++)</h4><div class="tabs" id="abstract-factory-c++-版本"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#abstract-factory-c++-版本-1">Common Definations</button></li><li class="tab"><button type="button" data-href="#abstract-factory-c++-版本-2">ICar</button></li><li class="tab"><button type="button" data-href="#abstract-factory-c++-版本-3">Car: AitoM7</button></li><li class="tab"><button type="button" data-href="#abstract-factory-c++-版本-4">Car: Zeekr001</button></li><li class="tab"><button type="button" data-href="#abstract-factory-c++-版本-5">Car: XiaomiSU7</button></li><li class="tab"><button type="button" data-href="#abstract-factory-c++-版本-6">CarFactory</button></li><li class="tab"><button type="button" data-href="#abstract-factory-c++-版本-7">Factory: 赛力斯</button></li><li class="tab"><button type="button" data-href="#abstract-factory-c++-版本-8">Factory: 吉利</button></li><li class="tab"><button type="button" data-href="#abstract-factory-c++-版本-9">Factory: 北汽集团</button></li><li class="tab"><button type="button" data-href="#abstract-factory-c++-版本-10">main</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="abstract-factory-c++-版本-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">Currency</span> <span class="token punctuation">&#123;</span>
    RMB <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    Dollar<span class="token punctuation">,</span>
    Euro<span class="token punctuation">,</span>
    VietnamDong<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Payment</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> price<span class="token punctuation">;</span>
    Currency currency<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">ChinaCarFactory</span> <span class="token punctuation">&#123;</span>
    SERESFactory <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>   <span class="token comment">// 赛力斯</span>
    GEELYFactory<span class="token punctuation">,</span>       <span class="token comment">// 吉利</span>
    BAICGROUPFactory<span class="token punctuation">,</span>   <span class="token comment">// 北汽集团</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">ChinaModernCarType</span> <span class="token punctuation">&#123;</span>
    AitoM7 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>     <span class="token comment">// 问界M7</span>
    AitoM9<span class="token punctuation">,</span>         <span class="token comment">// 问界M9</span>
    Zeekr001<span class="token punctuation">,</span>       <span class="token comment">// 极氪001</span>
    XiaomiSU7<span class="token punctuation">,</span>      <span class="token comment">// 小米SU7</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-c++-版本-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">class</span> <span class="token class-name">ICar</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">ICar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">ICar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    
    <span class="token comment">// 每个车型都有自己不同与其他车的驾驶体验</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">DrivingExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    Payment <span class="token function">get_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this car price:"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>price_<span class="token punctuation">.</span>price <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>price_<span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">bool</span> <span class="token function">IsElectronic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this car is electronic:"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>is_electronic_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>is_electronic_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">float</span> <span class="token function">get_mileage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this car mileage:"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>mileage_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>mileage_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">get_colors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this car colors:"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>colors_<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>colors_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">set_price</span><span class="token punctuation">(</span><span class="token keyword">const</span> Payment<span class="token operator">&amp;</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token operator">-></span>price_ <span class="token operator">=</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">set_electronic</span><span class="token punctuation">(</span><span class="token keyword">bool</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token operator">-></span>is_electronic_ <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">set_mileage</span><span class="token punctuation">(</span><span class="token keyword">float</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token operator">-></span>mileage_ <span class="token operator">=</span> m<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">set_colors</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token operator">&amp;</span> colors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token operator">-></span>colors_ <span class="token operator">=</span> colors<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Payment price_<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> is_electronic_<span class="token punctuation">;</span>
    <span class="token keyword">float</span> mileage_<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> colors_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-c++-版本-3"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./car.h"</span></span>

<span class="token comment">// 问界M7</span>
<span class="token keyword">class</span> <span class="token class-name">AitoM7</span> <span class="token keyword">final</span> <span class="token operator">:</span> <span class="token keyword">public</span> ICar <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">AitoM7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ICar</span><span class="token double-colon punctuation">::</span><span class="token function">set_price</span><span class="token punctuation">(</span>Payment<span class="token punctuation">&#123;</span>
            <span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">268000</span><span class="token punctuation">,</span>
            <span class="token punctuation">.</span>currency <span class="token operator">=</span> Currency<span class="token double-colon punctuation">::</span>RMB<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ICar</span><span class="token double-colon punctuation">::</span><span class="token function">set_mileage</span><span class="token punctuation">(</span><span class="token number">720</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ICar</span><span class="token double-colon punctuation">::</span><span class="token function">set_colors</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            <span class="token string">"White"</span><span class="token punctuation">,</span> 
            <span class="token string">"Gray"</span><span class="token punctuation">,</span> 
            <span class="token string">"Black"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ICar</span><span class="token double-colon punctuation">::</span><span class="token function">set_electronic</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">DrivingExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"M7 is suv, very comfortable"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-c++-版本-4"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once </span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./car.h"</span></span>

<span class="token comment">// 极氪001</span>
<span class="token keyword">class</span> <span class="token class-name">Zeekr001</span> <span class="token keyword">final</span> <span class="token operator">:</span> <span class="token keyword">public</span> ICar <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Zeekr001</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ICar</span><span class="token double-colon punctuation">::</span><span class="token function">set_price</span><span class="token punctuation">(</span>Payment<span class="token punctuation">&#123;</span>
            <span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">226000</span><span class="token punctuation">,</span>
            <span class="token punctuation">.</span>currency <span class="token operator">=</span> Currency<span class="token double-colon punctuation">::</span>RMB<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ICar</span><span class="token double-colon punctuation">::</span><span class="token function">set_mileage</span><span class="token punctuation">(</span><span class="token number">720.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ICar</span><span class="token double-colon punctuation">::</span><span class="token function">set_colors</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            <span class="token string">"Black"</span><span class="token punctuation">,</span> 
            <span class="token string">"Gray"</span><span class="token punctuation">,</span> 
            <span class="token string">"White"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ICar</span><span class="token double-colon punctuation">::</span><span class="token function">set_electronic</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">DrivingExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Zeekr001 is popular with many families."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-c++-版本-5"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./car.h"</span></span>

<span class="token comment">// XiaomiSU7</span>
<span class="token keyword">class</span> <span class="token class-name">XiaomiSU7</span> <span class="token keyword">final</span> <span class="token operator">:</span> <span class="token keyword">public</span> ICar <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">XiaomiSU7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ICar</span><span class="token double-colon punctuation">::</span><span class="token function">set_price</span><span class="token punctuation">(</span>Payment<span class="token punctuation">&#123;</span>
            <span class="token punctuation">.</span>price<span class="token operator">=</span><span class="token number">240000</span><span class="token punctuation">,</span>
            <span class="token punctuation">.</span>currency<span class="token operator">=</span>Currency<span class="token double-colon punctuation">::</span>RMB<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ICar</span><span class="token double-colon punctuation">::</span><span class="token function">set_mileage</span><span class="token punctuation">(</span><span class="token number">700.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ICar</span><span class="token double-colon punctuation">::</span><span class="token function">set_colors</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            <span class="token string">"Blue"</span><span class="token punctuation">,</span> 
            <span class="token string">"Gray"</span><span class="token punctuation">,</span> 
            <span class="token string">"Olive Green"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ICar</span><span class="token double-colon punctuation">::</span><span class="token function">set_electronic</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">DrivingExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"XiaomiSU7 is faster than porche, driving cool"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-c++-版本-6"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../common.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../car/car.h"</span></span>

<span class="token comment">// 汽车抽象工厂类</span>
<span class="token keyword">class</span> <span class="token class-name">ICarFactory</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">ICarFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ICarFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token comment">// 造车</span>
    <span class="token keyword">virtual</span> std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>ICar<span class="token operator">></span> <span class="token function">MakeCar</span><span class="token punctuation">(</span>ChinaModernCarType car_type<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// 返厂维修服务</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">ReturnFactory4Repair</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>ICar<span class="token operator">></span><span class="token operator">&amp;</span> broken<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>

<span class="token keyword">private</span><span class="token operator">:</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-c++-版本-7"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./car_factory.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../car/aitom7.h"</span></span>

<span class="token comment">// 赛力斯汽车工厂</span>
<span class="token keyword">class</span> <span class="token class-name">SERESFactory</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">ICarFactory</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>ICar<span class="token operator">></span> <span class="token function">MakeCar</span><span class="token punctuation">(</span>ChinaModernCarType car_type<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>car_type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> ChinaModernCarType<span class="token double-colon punctuation">::</span>AitoM7<span class="token operator">:</span><span class="token punctuation">&#123;</span>
                std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Incoming AitoM7..."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
                <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>AitoM7<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">&#125;</span> <span class="token keyword">default</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">ReturnFactory4Repair</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>ICar<span class="token operator">></span><span class="token operator">&amp;</span> broken<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-c++-版本-8"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./car_factory.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../car/zeekr001.h"</span></span>

<span class="token comment">// 吉利汽车工厂</span>
<span class="token keyword">class</span> <span class="token class-name">GEELYFactory</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">ICarFactory</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>ICar<span class="token operator">></span> <span class="token function">MakeCar</span><span class="token punctuation">(</span>ChinaModernCarType car_type<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>car_type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> ChinaModernCarType<span class="token double-colon punctuation">::</span>Zeekr001<span class="token operator">:</span><span class="token punctuation">&#123;</span>
                std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Incoming Zeekr001..."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
                <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Zeekr001<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">&#125;</span> <span class="token keyword">default</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">ReturnFactory4Repair</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>ICar<span class="token operator">></span><span class="token operator">&amp;</span> broken<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-c++-版本-9"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../car_factory/car_factory.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../car/xiaomisu7.h"</span></span>

<span class="token comment">// 北汽集团工厂</span>
<span class="token keyword">class</span> <span class="token class-name">BAICGROUPFactory</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">ICarFactory</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>ICar<span class="token operator">></span> <span class="token function">MakeCar</span><span class="token punctuation">(</span>ChinaModernCarType car_type<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>car_type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> ChinaModernCarType<span class="token double-colon punctuation">::</span>XiaomiSU7<span class="token operator">:</span><span class="token punctuation">&#123;</span>
                std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Incoming XiaomiSU7..."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
                <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>XiaomiSU7<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">&#125;</span> <span class="token keyword">default</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">ReturnFactory4Repair</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>ICar<span class="token operator">></span><span class="token operator">&amp;</span> broken<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// do reparing stuff...</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-c++-版本-10"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./car_factory/geely_factory.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./car_factory/seres_factory.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./car_factory/baicgroup_factory.h"</span></span>

<span class="token comment">// 汽车抽象工厂生成</span>
std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>ICarFactory<span class="token operator">></span> <span class="token function">NewCarFactory</span><span class="token punctuation">(</span>ChinaCarFactory f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> ChinaCarFactory<span class="token double-colon punctuation">::</span>SERESFactory<span class="token operator">:</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>SERESFactory<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 赛力斯</span>

        <span class="token punctuation">&#125;</span> <span class="token keyword">case</span> ChinaCarFactory<span class="token double-colon punctuation">::</span>GEELYFactory<span class="token operator">:</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>GEELYFactory<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 吉利</span>

        <span class="token punctuation">&#125;</span> <span class="token keyword">case</span> ChinaCarFactory<span class="token double-colon punctuation">::</span>BAICGROUPFactory<span class="token operator">:</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>BAICGROUPFactory<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 北汽集团</span>

        <span class="token punctuation">&#125;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// M7</span>
    <span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token function">NewCarFactory</span><span class="token punctuation">(</span>ChinaCarFactory<span class="token double-colon punctuation">::</span>GEELYFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">auto</span> car <span class="token operator">=</span> f<span class="token operator">-></span><span class="token function">MakeCar</span><span class="token punctuation">(</span>ChinaModernCarType<span class="token double-colon punctuation">::</span>Zeekr001<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>car <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    car<span class="token operator">-></span><span class="token function">get_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    car<span class="token operator">-></span><span class="token function">DrivingExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h4 id="抽象工厂模式实现-Go"><a href="#抽象工厂模式实现-Go" class="headerlink" title="抽象工厂模式实现(Go)"></a>抽象工厂模式实现(Go)</h4><div class="tabs" id="abstract-factory-go-版本"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#abstract-factory-go-版本-1">CarFactory</button></li><li class="tab"><button type="button" data-href="#abstract-factory-go-版本-2">Common Defination</button></li><li class="tab"><button type="button" data-href="#abstract-factory-go-版本-3">Factory: 赛力斯</button></li><li class="tab"><button type="button" data-href="#abstract-factory-go-版本-4">Factory: 吉利</button></li><li class="tab"><button type="button" data-href="#abstract-factory-go-版本-5">Factory: 北汽集团</button></li><li class="tab"><button type="button" data-href="#abstract-factory-go-版本-6">ICar</button></li><li class="tab"><button type="button" data-href="#abstract-factory-go-版本-7">Car: 问界M7</button></li><li class="tab"><button type="button" data-href="#abstract-factory-go-版本-8">Car: 极氪001</button></li><li class="tab"><button type="button" data-href="#abstract-factory-go-版本-9">Car: 小米SU7</button></li><li class="tab"><button type="button" data-href="#abstract-factory-go-版本-10">main</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="abstract-factory-go-版本-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> abstractfactory

<span class="token keyword">type</span> CarFactory <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 造车</span>
  <span class="token function">MakeCar</span><span class="token punctuation">(</span>carType ChinaModernCarType<span class="token punctuation">)</span> Car
  <span class="token comment">// 返厂维修服务</span>
  <span class="token function">ReturnFactory4Repair</span><span class="token punctuation">(</span>broken <span class="token operator">*</span>Car<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// NewCarFactory 抽象汽车工厂</span>
<span class="token keyword">func</span> <span class="token function">NewCarFactory</span><span class="token punctuation">(</span>factory ChinaCarFactory<span class="token punctuation">)</span> CarFactory <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> factory <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> SERESFactory<span class="token punctuation">:</span> <span class="token comment">// 赛力斯</span>
    <span class="token keyword">return</span> <span class="token function">NewSeresFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">case</span> GEELYFactory<span class="token punctuation">:</span> <span class="token comment">// 吉利</span>
    <span class="token keyword">return</span> <span class="token function">NewGeelyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">case</span> BAICGROUPFactory<span class="token punctuation">:</span> <span class="token comment">// 北汽</span>
    <span class="token keyword">return</span> <span class="token function">NewBaicGroupFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-go-版本-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> abstractfactory

<span class="token keyword">type</span> ChinaCarFactory <span class="token builtin">uint8</span>
<span class="token keyword">type</span> ChinaModernCarType <span class="token builtin">uint8</span>
<span class="token keyword">type</span> CurrencyType <span class="token builtin">uint8</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
  SERESFactory     ChinaCarFactory <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 小康汽车 赛力斯</span>
  GEELYFactory                                <span class="token comment">// 吉利</span>
  BAICGROUPFactory                            <span class="token comment">// 北汽集团</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
  AitoM7    ChinaModernCarType <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 问界M7</span>
  AitoM9                                  <span class="token comment">// 问界M9</span>
  Zeekr001                                <span class="token comment">// 极氪001</span>
  XiaomiSU7                               <span class="token comment">// 小米SU7</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">)</span>

<span class="token comment">// 售价</span>
<span class="token keyword">const</span> <span class="token punctuation">(</span>
  RMBCurrency CurrencyType <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span>
  DollarCurrency
  EuroCurrency
  VietnamDongCurrency
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Payment <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  Price    <span class="token builtin">float32</span>      <span class="token string">`json:"price"`</span>
  Currency CurrencyType <span class="token string">`json:"currency"`</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-go-版本-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> abstractfactory

<span class="token comment">// 赛力斯工厂</span>

<span class="token keyword">type</span> seres <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewSeresFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> CarFactory <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>seres<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// MakeCar 造车</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>seres<span class="token punctuation">)</span> <span class="token function">MakeCar</span><span class="token punctuation">(</span>carType ChinaModernCarType<span class="token punctuation">)</span> Car <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> carType <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> AitoM7<span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token function">NewAitom7</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ReturnFactory4Repair 提供返厂维修服务</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>seres<span class="token punctuation">)</span> <span class="token function">ReturnFactory4Repair</span><span class="token punctuation">(</span>broken <span class="token operator">*</span>Car<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// do reparing stuff...</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-go-版本-4"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> abstractfactory

<span class="token comment">// 吉利汽车工厂</span>

<span class="token keyword">type</span> geely <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewGeelyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> CarFactory <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>geely<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// MakeCar 造车</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>geely<span class="token punctuation">)</span> <span class="token function">MakeCar</span><span class="token punctuation">(</span>carType ChinaModernCarType<span class="token punctuation">)</span> Car <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> carType <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> Zeekr001<span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token function">NewZeekr001</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ReturnFactory4Repair 提供返厂维修服务</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>geely<span class="token punctuation">)</span> <span class="token function">ReturnFactory4Repair</span><span class="token punctuation">(</span>broken <span class="token operator">*</span>Car<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// do repairing stuff...</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-go-版本-5"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> abstractfactory

<span class="token comment">// 北汽集团工厂</span>

<span class="token keyword">type</span> baicgroup <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewBaicGroupFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> CarFactory <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>baicgroup<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// MakeCar 造车</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>baicgroup<span class="token punctuation">)</span> <span class="token function">MakeCar</span><span class="token punctuation">(</span>carType ChinaModernCarType<span class="token punctuation">)</span> Car <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> carType <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> XiaomiSU7<span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token function">NewXiaomisu7</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ReturnFactory4Repair 提供返厂维修服务</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>baicgroup<span class="token punctuation">)</span> <span class="token function">ReturnFactory4Repair</span><span class="token punctuation">(</span>broken <span class="token operator">*</span>Car<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// do repairing stuff...</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-go-版本-6"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> abstractfactory

<span class="token keyword">type</span> Car <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 是否为电车</span>
  <span class="token function">IsElectric</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>

  <span class="token comment">// 汽车售价</span>
  <span class="token function">MarketPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Payment

  <span class="token comment">// 续航</span>
  <span class="token function">Mileage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float32</span>

  <span class="token comment">// 驾驶体验</span>
  <span class="token function">DriverExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// CarBaseInfo 一台汽车的基础信息</span>
<span class="token keyword">type</span> CarBaseInfo <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  price   Payment
  colors  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
  mileage <span class="token builtin">float32</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-go-版本-7"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> abstractfactory

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">// 问界M7</span>
<span class="token keyword">type</span> aitom7 <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  CarBaseInfo
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewAitom7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Car <span class="token punctuation">&#123;</span>
  c <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>aitom7<span class="token punctuation">)</span>
  c<span class="token punctuation">.</span>price <span class="token operator">=</span> Payment<span class="token punctuation">&#123;</span>
    Price<span class="token punctuation">:</span>    <span class="token number">24.6</span><span class="token punctuation">,</span>
    Currency<span class="token punctuation">:</span> RMBCurrency<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
  c<span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>
    <span class="token string">`balck`</span><span class="token punctuation">,</span>
    <span class="token string">`gray`</span><span class="token punctuation">,</span>
    <span class="token string">`white`</span><span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
  c<span class="token punctuation">.</span>mileage <span class="token operator">=</span> <span class="token number">756.0</span>
  <span class="token keyword">return</span> c
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>aitom7<span class="token punctuation">)</span> <span class="token function">IsElectric</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`zeekr001 IsElectric:`</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>aitom7<span class="token punctuation">)</span> <span class="token function">MarketPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Payment <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`zeekr001 price:`</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>price<span class="token punctuation">)</span>
  <span class="token keyword">return</span> c<span class="token punctuation">.</span>price
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>aitom7<span class="token punctuation">)</span> <span class="token function">Mileage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float32</span> <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`zeekr001 mileage:`</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>mileage<span class="token punctuation">)</span>
  <span class="token keyword">return</span> c<span class="token punctuation">.</span>mileage
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>aitom7<span class="token punctuation">)</span> <span class="token function">Colors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`zeekr001 colors:`</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>colors<span class="token punctuation">)</span>
  <span class="token keyword">return</span> c<span class="token punctuation">.</span>colors
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>aitom7<span class="token punctuation">)</span> <span class="token function">DriverExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`M7 is the most comfortable suv`</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>aitom7<span class="token punctuation">)</span> <span class="token function">IsSUV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`aitom7 IsSUV:`</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-go-版本-8"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> abstractfactory

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">// 极氪001</span>
<span class="token keyword">type</span> zeekr001 <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  CarBaseInfo
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewZeekr001</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Car <span class="token punctuation">&#123;</span>
  c <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>zeekr001<span class="token punctuation">)</span>
  c<span class="token punctuation">.</span>price <span class="token operator">=</span> Payment<span class="token punctuation">&#123;</span>
    Price<span class="token punctuation">:</span>    <span class="token number">246000</span><span class="token punctuation">,</span>
    Currency<span class="token punctuation">:</span> RMBCurrency<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
  c<span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>
    <span class="token string">`black`</span><span class="token punctuation">,</span>
    <span class="token string">`brown`</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
  c<span class="token punctuation">.</span>mileage <span class="token operator">=</span> <span class="token number">721.5</span>
  <span class="token keyword">return</span> c
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>zeekr001<span class="token punctuation">)</span> <span class="token function">IsElectric</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`zeekr001 IsElectric:`</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>zeekr001<span class="token punctuation">)</span> <span class="token function">MarketPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Payment <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`zeekr001 price:`</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>price<span class="token punctuation">)</span>
  <span class="token keyword">return</span> c<span class="token punctuation">.</span>price
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>zeekr001<span class="token punctuation">)</span> <span class="token function">Mileage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float32</span> <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`zeekr001 mileage:`</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>mileage<span class="token punctuation">)</span>
  <span class="token keyword">return</span> c<span class="token punctuation">.</span>mileage
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>zeekr001<span class="token punctuation">)</span> <span class="token function">DriverExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`zeekr001 is popular to many families`</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-go-版本-9"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> abstractfactory

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token comment">// 小米su7</span>
<span class="token keyword">type</span> xiaomisu7 <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  CarBaseInfo
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewXiaomisu7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Car <span class="token punctuation">&#123;</span>
  c <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>xiaomisu7<span class="token punctuation">)</span>
  c<span class="token punctuation">.</span>price <span class="token operator">=</span> Payment<span class="token punctuation">&#123;</span>
    Price<span class="token punctuation">:</span>    <span class="token number">224000</span><span class="token punctuation">,</span>
    Currency<span class="token punctuation">:</span> RMBCurrency<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
  c<span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>
    <span class="token string">`blue`</span><span class="token punctuation">,</span>
    <span class="token string">`gray`</span><span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
  c<span class="token punctuation">.</span>mileage <span class="token operator">=</span> <span class="token number">700.0</span>
  <span class="token keyword">return</span> c
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>xiaomisu7<span class="token punctuation">)</span> <span class="token function">IsElectric</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`xiaomisu7 IsElectric:`</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>xiaomisu7<span class="token punctuation">)</span> <span class="token function">MarketPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Payment <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`xiaomisu7 price:`</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>price<span class="token punctuation">)</span>
  <span class="token keyword">return</span> c<span class="token punctuation">.</span>price
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>xiaomisu7<span class="token punctuation">)</span> <span class="token function">Mileage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float32</span> <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`xiaomisu7 mileage:`</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>mileage<span class="token punctuation">)</span>
  <span class="token keyword">return</span> c<span class="token punctuation">.</span>mileage
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>xiaomisu7<span class="token punctuation">)</span> <span class="token function">Colors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`xiaomisu7 colors:`</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>colors<span class="token punctuation">)</span>
  <span class="token keyword">return</span> c<span class="token punctuation">.</span>colors
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>xiaomisu7<span class="token punctuation">)</span> <span class="token function">DriverExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`xiaomisu7 is faster than porsche`</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="abstract-factory-go-版本-10"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> abstractfactory

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">"testing"</span>
<span class="token punctuation">)</span>

<span class="token comment">// 问界M7</span>
<span class="token keyword">func</span> <span class="token function">TestMakeCarAitoM7</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  f <span class="token operator">:=</span> <span class="token function">NewCarFactory</span><span class="token punctuation">(</span>SERESFactory<span class="token punctuation">)</span>
  <span class="token keyword">if</span> f <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  c <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">MakeCar</span><span class="token punctuation">(</span>AitoM7<span class="token punctuation">)</span>
  <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  c<span class="token punctuation">.</span><span class="token function">IsElectric</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  c<span class="token punctuation">.</span><span class="token function">MarketPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  c<span class="token punctuation">.</span><span class="token function">Mileage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  c<span class="token punctuation">.</span><span class="token function">DriverExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 极氪001</span>
<span class="token keyword">func</span> <span class="token function">TestMakeCarZeekr001</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  f <span class="token operator">:=</span> <span class="token function">NewCarFactory</span><span class="token punctuation">(</span>GEELYFactory<span class="token punctuation">)</span>
  <span class="token keyword">if</span> f <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  c <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">MakeCar</span><span class="token punctuation">(</span>Zeekr001<span class="token punctuation">)</span>
  <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  c<span class="token punctuation">.</span><span class="token function">IsElectric</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  c<span class="token punctuation">.</span><span class="token function">MarketPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  c<span class="token punctuation">.</span><span class="token function">Mileage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  c<span class="token punctuation">.</span><span class="token function">DriverExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 小米SU7</span>
<span class="token keyword">func</span> <span class="token function">TestMakeCarXiaomisu7</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  f <span class="token operator">:=</span> <span class="token function">NewCarFactory</span><span class="token punctuation">(</span>BAICGROUPFactory<span class="token punctuation">)</span>
  <span class="token keyword">if</span> f <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  c <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">MakeCar</span><span class="token punctuation">(</span>XiaomiSU7<span class="token punctuation">)</span>
  <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  c<span class="token punctuation">.</span><span class="token function">IsElectric</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  c<span class="token punctuation">.</span><span class="token function">MarketPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  c<span class="token punctuation">.</span><span class="token function">Mileage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  c<span class="token punctuation">.</span><span class="token function">DriverExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h3 id="创建者模式-Builder"><a href="#创建者模式-Builder" class="headerlink" title="创建者模式(Builder)"></a>创建者模式(Builder)</h3><h4 id="创建者模式的介绍"><a href="#创建者模式的介绍" class="headerlink" title="创建者模式的介绍"></a>创建者模式的介绍</h4><p>  The Builder pattern is concerned with the creation of complicated objects, that is, objects that cannot be built up in a single-line constructor call. These types of objects may themselves be composed of other objects and might involve less-than-obvious logic, necessitating a separate component specifically dedicated to object construction.</p>
<p>Builder 是一种创造性的设计模式，可让您逐步构建复杂的对象。该模式允许您使用相同的构造代码生成对象的不同类型和表示形式。</p>
<br/>

<h4 id="创建者模式实现-C"><a href="#创建者模式实现-C" class="headerlink" title="创建者模式实现(C++)"></a>创建者模式实现(C++)</h4><div class="tabs" id="builder-c++版本"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#builder-c++版本-1">Common Definations</button></li><li class="tab"><button type="button" data-href="#builder-c++版本-2">ShoppingMall</button></li><li class="tab"><button type="button" data-href="#builder-c++版本-3">Mall: 华润万象天地</button></li><li class="tab"><button type="button" data-href="#builder-c++版本-4">Mall: 东部华侨城</button></li><li class="tab"><button type="button" data-href="#builder-c++版本-5">Mall: 京基 KKONE</button></li><li class="tab"><button type="button" data-href="#builder-c++版本-6">Builder</button></li><li class="tab"><button type="button" data-href="#builder-c++版本-7">Builder: 华润集团</button></li><li class="tab"><button type="button" data-href="#builder-c++版本-8">Builder: 华侨城集团</button></li><li class="tab"><button type="button" data-href="#builder-c++版本-9">Builder: 京基集团</button></li><li class="tab"><button type="button" data-href="#builder-c++版本-10">Director: 深圳市政府</button></li><li class="tab"><button type="button" data-href="#builder-c++版本-11">main</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="builder-c++版本-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>

<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">ShoppingMallType</span> <span class="token punctuation">&#123;</span>
    CoCoPark <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>   <span class="token comment">// 星河CoCoPark</span>
    MixCity<span class="token punctuation">,</span><span class="token comment">// 华润万象</span>
    KKone<span class="token punctuation">,</span><span class="token comment">// 京基大厦</span>
    OCT<span class="token punctuation">,</span> <span class="token comment">// 华侨城Oversea Chinese Town</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">ChinaCity</span> <span class="token punctuation">&#123;</span>
  ShenzhenCity <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  ShanghaiCity<span class="token punctuation">,</span>
  BeijingCity<span class="token punctuation">,</span>
  GuangzhouCity<span class="token punctuation">,</span>
  ChengduCity<span class="token punctuation">,</span>
  Hangzhou<span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Geometry</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">float</span> x<span class="token punctuation">;</span>
  <span class="token keyword">float</span> y<span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">ShoppingMallBaseInfo</span> <span class="token punctuation">&#123;</span>
  std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>
  Geometry geometry<span class="token punctuation">;</span>       <span class="token comment">// 地理位置</span>
  <span class="token keyword">float</span> area<span class="token punctuation">;</span>             <span class="token comment">// 占地面积</span>
  <span class="token keyword">float</span> cost<span class="token punctuation">;</span>             <span class="token comment">// 花费建造成本</span>
  <span class="token keyword">float</span> visitor_flowrate<span class="token punctuation">;</span> <span class="token comment">// 容纳人流量</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-c++版本-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../common.h"</span></span>

<span class="token keyword">class</span> <span class="token class-name">ShoppingMall</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">ShoppingMall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token function">ShoppingMall</span><span class="token punctuation">(</span><span class="token keyword">const</span> ShoppingMallBaseInfo<span class="token operator">&amp;</span> info<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">base_info_</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">ShoppingMall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token comment">// set_area 规划占地面积</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">set_area</span><span class="token punctuation">(</span><span class="token keyword">float</span> area<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        base_info_<span class="token punctuation">.</span>area <span class="token operator">=</span> area<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  <span class="token comment">// set_cost 预估建造花费</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">set_cost</span><span class="token punctuation">(</span><span class="token keyword">float</span> cost<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        base_info_<span class="token punctuation">.</span>cost <span class="token operator">=</span> cost<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  <span class="token comment">// SetGeometry 选择地理位置</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">set_geometry</span><span class="token punctuation">(</span><span class="token keyword">const</span> Geometry<span class="token operator">&amp;</span> g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        base_info_<span class="token punctuation">.</span>geometry <span class="token operator">=</span> g<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  <span class="token comment">// get_visitor_flowrate 获取每月客流量</span>
  <span class="token keyword">virtual</span> <span class="token keyword">float</span> <span class="token function">get_visitor_flowrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> base_info_<span class="token punctuation">.</span>visitor_flowrate<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  <span class="token comment">// get_name 名称</span>
  <span class="token keyword">virtual</span> std<span class="token double-colon punctuation">::</span>string <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> base_info_<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    ShoppingMallBaseInfo base_info_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-c++版本-3"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./shopping_mall.h"</span></span>

<span class="token keyword">class</span> <span class="token class-name">MixCityMall</span> <span class="token keyword">final</span> <span class="token operator">:</span> <span class="token keyword">public</span> ShoppingMall <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MixCityMall</span><span class="token punctuation">(</span><span class="token keyword">const</span> ShoppingMallBaseInfo<span class="token operator">&amp;</span> info<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ShoppingMall</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token operator">~</span><span class="token function">MixCityMall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-c++版本-4"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./shopping_mall.h"</span></span>

<span class="token keyword">class</span> <span class="token class-name">EastOctMall</span> <span class="token keyword">final</span> <span class="token operator">:</span> <span class="token keyword">public</span> ShoppingMall <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">EastOctMall</span><span class="token punctuation">(</span><span class="token keyword">const</span> ShoppingMallBaseInfo<span class="token operator">&amp;</span> info<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ShoppingMall</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token operator">~</span><span class="token function">EastOctMall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-c++版本-5"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"shopping_mall.h"</span></span>

<span class="token keyword">class</span> <span class="token class-name">KKoneMall</span> <span class="token keyword">final</span> <span class="token operator">:</span> <span class="token keyword">public</span> ShoppingMall <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">KKoneMall</span><span class="token punctuation">(</span><span class="token keyword">const</span> ShoppingMallBaseInfo<span class="token operator">&amp;</span> info<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ShoppingMall</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token operator">~</span><span class="token function">KKoneMall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-c++版本-6"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"shopping_mall/shopping_mall.h"</span></span>

<span class="token keyword">using</span> ShoppingMallPtr <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>ShoppingMall<span class="token operator">></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">IBuilder</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">IBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">IBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token comment">// Design 设计</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Design</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Construction 施工</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Construction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Mall 商场</span>
  <span class="token keyword">virtual</span> ShoppingMallPtr <span class="token function">Mall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-c++版本-7"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"shopping_mall/mixcity.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./builder.h"</span></span>

<span class="token comment">// 华润集团</span>
<span class="token keyword">class</span> <span class="token class-name">Crc</span> <span class="token keyword">final</span> <span class="token operator">:</span> <span class="token keyword">public</span> IBuilder <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Crc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">mix_city_</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>MixCityMall<span class="token operator">></span></span></span><span class="token punctuation">(</span>ShoppingMallBaseInfo<span class="token punctuation">&#123;</span>
        <span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"华润万象天地"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token comment">// Design 设计</span>
  <span class="token keyword">void</span> <span class="token function">Design</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"华润设计"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  <span class="token comment">// Construction 施工</span>
  <span class="token keyword">void</span> <span class="token function">Construction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"华润施工"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  <span class="token comment">// Mall 商场</span>
  ShoppingMallPtr <span class="token function">Mall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>mix_city_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>MixCityMall<span class="token operator">></span> mix_city_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-c++版本-8"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./builder.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"shopping_mall/est_oct.h"</span></span>

<span class="token comment">// 华侨城集团</span>
<span class="token keyword">class</span> <span class="token class-name">Oct</span> <span class="token keyword">final</span> <span class="token operator">:</span> <span class="token keyword">public</span> IBuilder <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Oct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">east_oct_</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>EastOctMall<span class="token operator">></span></span></span><span class="token punctuation">(</span>ShoppingMallBaseInfo<span class="token punctuation">&#123;</span>
        <span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"东部华侨城"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token comment">// Design 设计</span>
  <span class="token keyword">void</span> <span class="token function">Design</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"华侨城集团设计"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  <span class="token comment">// Construction 施工</span>
  <span class="token keyword">void</span> <span class="token function">Construction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"华侨城集团施工"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  <span class="token comment">// Mall 商场</span>
  ShoppingMallPtr <span class="token function">Mall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>east_oct_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>EastOctMall<span class="token operator">></span> east_oct_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-c++版本-9"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"shopping_mall/kkone.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./builder.h"</span></span>

<span class="token comment">// 京基集团</span>
<span class="token keyword">class</span> <span class="token class-name">Kingjee</span> <span class="token keyword">final</span> <span class="token operator">:</span> <span class="token keyword">public</span> IBuilder <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Kingjee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">kkone_</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>KKoneMall<span class="token operator">></span></span></span><span class="token punctuation">(</span>ShoppingMallBaseInfo<span class="token punctuation">&#123;</span>
        <span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"京基KKONE"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token comment">// Design 设计</span>
  <span class="token keyword">void</span> <span class="token function">Design</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"京基集团设计"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  <span class="token comment">// Construction 施工</span>
  <span class="token keyword">void</span> <span class="token function">Construction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"京基集团施工"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  <span class="token comment">// Mall 商场</span>
  ShoppingMallPtr <span class="token function">Mall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>kkone_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>KKoneMall<span class="token operator">></span> kkone_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-c++版本-10"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./common.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./crc_builder.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./oct_builder.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./kingjee_builder.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"shopping_mall/shopping_mall.h"</span></span>

<span class="token keyword">using</span> IBuilderPtr <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>IBuilder<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token comment">// XX市政府</span>
<span class="token keyword">class</span> <span class="token class-name">Government</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Government</span><span class="token punctuation">(</span>ChinaCity city<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">city_</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token comment">// 设置建造者</span>
    <span class="token keyword">void</span> <span class="token function">set_builder</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>IBuilder<span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        builder_ <span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 建商场</span>
    ShoppingMallPtr <span class="token function">BuildShoppingMall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>builder_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        builder_<span class="token operator">-></span><span class="token function">Design</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder_<span class="token operator">-></span><span class="token function">Construction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> builder_<span class="token operator">-></span><span class="token function">Mall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    ChinaCity city_<span class="token punctuation">;</span>
    IBuilderPtr builder_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-c++版本-11"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./crc_builder.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./kingjee_builder.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./oct_builder.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./government.h"</span></span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 深圳政府</span>
    Government <span class="token function">gov</span><span class="token punctuation">(</span>ChinaCity<span class="token double-colon punctuation">::</span>ShenzhenCity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 建立华润万象天地</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> b <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Crc<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gov<span class="token punctuation">.</span><span class="token function">set_builder</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> m <span class="token operator">=</span> gov<span class="token punctuation">.</span><span class="token function">BuildShoppingMall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 建立京基集团KKONE</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> b <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Kingjee<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gov<span class="token punctuation">.</span><span class="token function">set_builder</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> m <span class="token operator">=</span> gov<span class="token punctuation">.</span><span class="token function">BuildShoppingMall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h4 id="创建者模式实现-Go"><a href="#创建者模式实现-Go" class="headerlink" title="创建者模式实现(Go)"></a>创建者模式实现(Go)</h4><div class="tabs" id="builder-go-版本"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#builder-go-版本-1">Common Definations</button></li><li class="tab"><button type="button" data-href="#builder-go-版本-2">商场: 华侨城</button></li><li class="tab"><button type="button" data-href="#builder-go-版本-3">商场: 华润万象天地</button></li><li class="tab"><button type="button" data-href="#builder-go-版本-4">商场: KKOne</button></li><li class="tab"><button type="button" data-href="#builder-go-版本-5">Builder</button></li><li class="tab"><button type="button" data-href="#builder-go-版本-6">Builder: 华润集团</button></li><li class="tab"><button type="button" data-href="#builder-go-版本-7">Builder: 华侨城集团</button></li><li class="tab"><button type="button" data-href="#builder-go-版本-8">Builder: 京基集团</button></li><li class="tab"><button type="button" data-href="#builder-go-版本-9">Director: XX市政府</button></li><li class="tab"><button type="button" data-href="#builder-go-版本-10">main</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="builder-go-版本-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> builder

<span class="token keyword">type</span> ShoppingMallType <span class="token builtin">uint8</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
  CoCoPark ShoppingMallType <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 星河</span>
  MixCity                              <span class="token comment">// 华润万象</span>
  KKone                                <span class="token comment">// 京基大厦</span>
  OCT                                  <span class="token comment">// 华侨城Oversea Chinese Town</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> ChinaCity <span class="token builtin">uint8</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
  ShenzhenCity ChinaCity <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span>
  ShanghaiCity
  BeijingCity
  GuangzhouCity
  ChengduCity
  Hangzhou
  <span class="token comment">// ...</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Geometry <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  x <span class="token builtin">float32</span>
  y <span class="token builtin">float32</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> ShoppingMallBaseInfo <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  Name            <span class="token builtin">string</span>
  Geometry        Geometry <span class="token comment">// 地理位置</span>
  Area            <span class="token builtin">float64</span>  <span class="token comment">// 占地面积</span>
  Cost            <span class="token builtin">float64</span>  <span class="token comment">// 花费建造成本</span>
  VisitorFlowrate <span class="token builtin">float64</span>  <span class="token comment">// 容纳人流量</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-go-版本-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> builder

<span class="token comment">// OCTMall 华侨城</span>
<span class="token keyword">type</span> OCTMall <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  ShoppingMallBaseInfo
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>OCTMall<span class="token punctuation">)</span> <span class="token function">SetArea</span><span class="token punctuation">(</span>a <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  m<span class="token punctuation">.</span>Area <span class="token operator">=</span> a
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>OCTMall<span class="token punctuation">)</span> <span class="token function">SetGeometry</span><span class="token punctuation">(</span>g Geometry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  m<span class="token punctuation">.</span>Geometry <span class="token operator">=</span> g
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>OCTMall<span class="token punctuation">)</span> <span class="token function">SetCost</span><span class="token punctuation">(</span>cost <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  m<span class="token punctuation">.</span>Cost <span class="token operator">=</span> cost
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>OCTMall<span class="token punctuation">)</span> <span class="token function">GetVisitorFlowrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token number">200000.12</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>OCTMall<span class="token punctuation">)</span> <span class="token function">SetName</span><span class="token punctuation">(</span>n <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  m<span class="token punctuation">.</span>Name <span class="token operator">=</span> n
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>OCTMall<span class="token punctuation">)</span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> m<span class="token punctuation">.</span>Name
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-go-版本-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> builder

<span class="token comment">// MixCityMall 华润万象天地</span>
<span class="token keyword">type</span> MixCityMall <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  ShoppingMallBaseInfo
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MixCityMall<span class="token punctuation">)</span> <span class="token function">SetArea</span><span class="token punctuation">(</span>a <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  m<span class="token punctuation">.</span>Area <span class="token operator">=</span> a
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MixCityMall<span class="token punctuation">)</span> <span class="token function">SetGeometry</span><span class="token punctuation">(</span>g Geometry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  m<span class="token punctuation">.</span>Geometry <span class="token operator">=</span> g
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MixCityMall<span class="token punctuation">)</span> <span class="token function">SetCost</span><span class="token punctuation">(</span>cost <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  m<span class="token punctuation">.</span>Cost <span class="token operator">=</span> cost
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MixCityMall<span class="token punctuation">)</span> <span class="token function">GetVisitorFlowrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token number">1000000.1</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MixCityMall<span class="token punctuation">)</span> <span class="token function">SetName</span><span class="token punctuation">(</span>n <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  m<span class="token punctuation">.</span>Name <span class="token operator">=</span> n
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MixCityMall<span class="token punctuation">)</span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> m<span class="token punctuation">.</span>Name
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-go-版本-4"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> builder

<span class="token comment">// KKOne 京基大厦购物中心</span>
<span class="token keyword">type</span> KKOne <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  ShoppingMallBaseInfo
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>KKOne<span class="token punctuation">)</span> <span class="token function">SetArea</span><span class="token punctuation">(</span>a <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  m<span class="token punctuation">.</span>Area <span class="token operator">=</span> a
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>KKOne<span class="token punctuation">)</span> <span class="token function">SetGeometry</span><span class="token punctuation">(</span>g Geometry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  m<span class="token punctuation">.</span>Geometry <span class="token operator">=</span> g
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>KKOne<span class="token punctuation">)</span> <span class="token function">SetCost</span><span class="token punctuation">(</span>cost <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  m<span class="token punctuation">.</span>Cost <span class="token operator">=</span> cost
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>KKOne<span class="token punctuation">)</span> <span class="token function">GetVisitorFlowrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token number">400000.66</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>KKOne<span class="token punctuation">)</span> <span class="token function">SetName</span><span class="token punctuation">(</span>n <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  m<span class="token punctuation">.</span>Name <span class="token operator">=</span> n
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>KKOne<span class="token punctuation">)</span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> m<span class="token punctuation">.</span>Name
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-go-版本-5"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> builder

<span class="token keyword">type</span> Builder <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Design 设计</span>
  <span class="token function">Design</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// Construction 施工</span>
  <span class="token function">Construction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// Mall 商场</span>
  <span class="token function">Mall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ShoppingMall
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-go-版本-6"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> builder

<span class="token comment">// 华润集团</span>

<span class="token keyword">type</span> crcBuilder <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  mixCity MixCityMall
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewCrcBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Builder <span class="token punctuation">&#123;</span>
  b <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>crcBuilder<span class="token punctuation">)</span>
  b<span class="token punctuation">.</span>mixCity<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">`MixCity`</span>
  <span class="token keyword">return</span> b
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>crcBuilder<span class="token punctuation">)</span> <span class="token function">Design</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>crcBuilder<span class="token punctuation">)</span> <span class="token function">Construction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>crcBuilder<span class="token punctuation">)</span> <span class="token function">Mall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ShoppingMall <span class="token punctuation">&#123;</span>

  <span class="token keyword">return</span> <span class="token operator">&amp;</span>b<span class="token punctuation">.</span>mixCity
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-go-版本-7"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> builder

<span class="token comment">// 华侨城集团</span>

<span class="token keyword">type</span> octBuilder <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  estOct OCTMall
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewOctBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Builder <span class="token punctuation">&#123;</span>
  b <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>octBuilder<span class="token punctuation">)</span>
  b<span class="token punctuation">.</span>estOct<span class="token punctuation">.</span><span class="token function">SetName</span><span class="token punctuation">(</span><span class="token string">`OCT East`</span><span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>octBuilder<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>octBuilder<span class="token punctuation">)</span> <span class="token function">Design</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>octBuilder<span class="token punctuation">)</span> <span class="token function">Construction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>octBuilder<span class="token punctuation">)</span> <span class="token function">Mall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ShoppingMall <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>b<span class="token punctuation">.</span>estOct
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-go-版本-8"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> builder

<span class="token comment">// 京基集团</span>

<span class="token keyword">type</span> kingjeeBuilder <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  kkone KKOne
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewKingjeeBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Builder <span class="token punctuation">&#123;</span>
  b <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>kingjeeBuilder<span class="token punctuation">)</span>
  b<span class="token punctuation">.</span>kkone<span class="token punctuation">.</span><span class="token function">SetName</span><span class="token punctuation">(</span><span class="token string">`KKONE`</span><span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> b
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>kingjeeBuilder<span class="token punctuation">)</span> <span class="token function">Design</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>kingjeeBuilder<span class="token punctuation">)</span> <span class="token function">Construction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>kingjeeBuilder<span class="token punctuation">)</span> <span class="token function">Mall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ShoppingMall <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>b<span class="token punctuation">.</span>kkone
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-go-版本-9"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> builder

<span class="token comment">// Government is a director</span>
<span class="token keyword">type</span> Government <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  builder Builder
  city    ChinaCity
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewGovernment</span><span class="token punctuation">(</span>city ChinaCity<span class="token punctuation">)</span> <span class="token operator">*</span>Government <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> city <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> ShenzhenCity<span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Government<span class="token punctuation">&#123;</span>
      city<span class="token punctuation">:</span> ShenzhenCity<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>

  <span class="token keyword">case</span> ShanghaiCity<span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Government<span class="token punctuation">&#123;</span>
      city<span class="token punctuation">:</span> ShanghaiCity<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>

  <span class="token keyword">case</span> BeijingCity<span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Government<span class="token punctuation">&#123;</span>
      city<span class="token punctuation">:</span> BeijingCity<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// ...</span>
  <span class="token keyword">default</span><span class="token punctuation">:</span>

  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Government<span class="token punctuation">)</span> <span class="token function">SetBuilder</span><span class="token punctuation">(</span>b Builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  g<span class="token punctuation">.</span>builder <span class="token operator">=</span> b
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Government<span class="token punctuation">)</span> <span class="token function">BuildSHoppingMall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ShoppingMall <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> g<span class="token punctuation">.</span>builder <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
  <span class="token punctuation">&#125;</span>

  g<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">Design</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  g<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">Construction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> g<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">Mall</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="builder-go-版本-10"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> builder

<span class="token keyword">import</span> <span class="token string">"testing"</span>

<span class="token keyword">func</span> <span class="token function">TestBuilder</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  gov <span class="token operator">:=</span> <span class="token function">NewGovernment</span><span class="token punctuation">(</span>ShenzhenCity<span class="token punctuation">)</span>
  <span class="token keyword">if</span> gov <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 华润</span>
  gov<span class="token punctuation">.</span><span class="token function">SetBuilder</span><span class="token punctuation">(</span><span class="token function">NewCrcBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  mall <span class="token operator">:=</span> gov<span class="token punctuation">.</span><span class="token function">BuildSHoppingMall</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> mall <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>mall<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h3 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式(Prototype)"></a>原型模式(Prototype)</h3><h4 id="原型模式的介绍"><a href="#原型模式的介绍" class="headerlink" title="原型模式的介绍"></a>原型模式的介绍</h4><p>Overall, the Prototype pattern can be a useful tool for creating objects in a more efficient and flexible way. By leveraging existing objects, you can avoid unnecessary duplication and improve the performance of your application.</p>
<h4 id="Advantages-of-the-Prototype-Pattern"><a href="#Advantages-of-the-Prototype-Pattern" class="headerlink" title="Advantages of the Prototype Pattern"></a>Advantages of the Prototype Pattern</h4><p>Here are the some of advantages of Prototype Pattern:</p>
<ul>
<li><p><em><strong>*Efficient Object Creation:*</strong></em> It allows you to create new objects by copying existing ones, which can be faster and more efficinet than creating objects from scratch.</p>
</li>
<li><p><em><strong>*Flexibility:*</strong></em> It provides a flexible way to create objects with different configurations or states by cloning prototypes, reducing the need for complex initialization.</p>
</li>
<li><p><em><strong>*Reduces Code Duplication:*</strong></em> It helps reduce code duplication by centralizing the creation logic in one place (the Prototype) and reusing it throughout the codebase.</p>
</li>
</ul>
<h4 id="Disadvantages-of-the-Prototype-Pattern"><a href="#Disadvantages-of-the-Prototype-Pattern" class="headerlink" title="Disadvantages of the Prototype Pattern"></a>Disadvantages of the Prototype Pattern</h4><p>Here are the some of disadvantages of Prototype Pattern:</p>
<ul>
<li><em><strong>*Complexity:*</strong></em> Implementing the Prototye Pattern can be complex, especially when dealing with deep copying of complex objects.</li>
<li><em><strong>*Not Suitable for All Scenarios:*</strong></em> It may not be suitable for all scenarios, especially when objects have circular references or complex interdependencies.</li>
<li><em><strong>*Memory Usage:*</strong></em> If not managed properly, cloning objects can lead to increased memory usage, potentially causing memory leaks.</li>
</ul>
<h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>  The Prototype Pattern allows us to efficiently create new objects by copying exisiting prototypes. It promotes code reusability and flexibility, making it an invaluable tools in software design. Implemeting the Prototype Pattern can significantly improve your software design, allowing you to create new objects with ease while maintaing the integrity of your codebase.</p>
<br/>

<h4 id="原型模式实现-C"><a href="#原型模式实现-C" class="headerlink" title="原型模式实现(C++)"></a>原型模式实现(C++)</h4><div class="tabs" id="prototype-in-c++"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#prototype-in-c++-1">C++ 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="prototype-in-c++-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h4 id="原型模式实现-Go"><a href="#原型模式实现-Go" class="headerlink" title="原型模式实现(Go)"></a>原型模式实现(Go)</h4><div class="tabs" id="prototype-in-go"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#prototype-in-go-1">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="prototype-in-go-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<br/>

<h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="外观模式-Facade"><a href="#外观模式-Facade" class="headerlink" title="外观模式(Facade)"></a>外观模式(Facade)</h3><div class="tabs" id="facade"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#facade-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#facade-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="facade-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="facade-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h3 id="适配器模式-Adapter"><a href="#适配器模式-Adapter" class="headerlink" title="适配器模式(Adapter)"></a>适配器模式(Adapter)</h3><div class="tabs" id="adapter"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#adapter-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#adapter-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="adapter-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="adapter-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h3 id="代理模式-Proxy"><a href="#代理模式-Proxy" class="headerlink" title="代理模式(Proxy)"></a>代理模式(Proxy)</h3><div class="tabs" id="proxy"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#proxy-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#proxy-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="proxy-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="proxy-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h3 id="组合模式-Composite"><a href="#组合模式-Composite" class="headerlink" title="组合模式(Composite)"></a>组合模式(Composite)</h3><div class="tabs" id="composite"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#composite-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#composite-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="composite-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="composite-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h3 id="享元模式-Flyweight"><a href="#享元模式-Flyweight" class="headerlink" title="享元模式(Flyweight)"></a>享元模式(Flyweight)</h3><div class="tabs" id="flyweight"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#flyweight-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#flyweight-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="flyweight-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="flyweight-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h3 id="装饰模式-Decorator"><a href="#装饰模式-Decorator" class="headerlink" title="装饰模式(Decorator)"></a>装饰模式(Decorator)</h3><div class="tabs" id="decorator"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#decorator-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#decorator-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="decorator-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="decorator-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h3 id="桥模式-Bridge"><a href="#桥模式-Bridge" class="headerlink" title="桥模式(Bridge)"></a>桥模式(Bridge)</h3><div class="tabs" id="bridge"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bridge-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#bridge-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bridge-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bridge-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<br/>

<h2 id="行为模式"><a href="#行为模式" class="headerlink" title="行为模式"></a>行为模式</h2><h3 id="中介者模式-Mediator"><a href="#中介者模式-Mediator" class="headerlink" title="中介者模式(Mediator)"></a>中介者模式(Mediator)</h3><div class="tabs" id="mediator"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#mediator-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#mediator-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="mediator-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mediator-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h3 id="观察者模式-Observer"><a href="#观察者模式-Observer" class="headerlink" title="观察者模式(Observer)"></a>观察者模式(Observer)</h3><div class="tabs" id="observer"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#observer-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#observer-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="observer-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="observer-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h3 id="命令模式-Command"><a href="#命令模式-Command" class="headerlink" title="命令模式(Command)"></a>命令模式(Command)</h3><div class="tabs" id="command"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#command-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#command-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="command-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="command-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h3 id="迭代器模式-Iterator"><a href="#迭代器模式-Iterator" class="headerlink" title="迭代器模式(Iterator)"></a>迭代器模式(Iterator)</h3><div class="tabs" id="iterator"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#iterator-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#iterator-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="iterator-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="iterator-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h3 id="模板方法模式-Template-Method"><a href="#模板方法模式-Template-Method" class="headerlink" title="模板方法模式(Template Method)"></a>模板方法模式(Template Method)</h3><div class="tabs" id="template-method"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#template-method-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#template-method-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="template-method-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="template-method-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h3 id="策略模式-Strategy"><a href="#策略模式-Strategy" class="headerlink" title="策略模式(Strategy)"></a>策略模式(Strategy)</h3><div class="tabs" id="strategy"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#strategy-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#strategy-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="strategy-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="strategy-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h3 id="状态模式-State"><a href="#状态模式-State" class="headerlink" title="状态模式(State)"></a>状态模式(State)</h3><div class="tabs" id="state"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#state-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#state-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="state-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="state-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h3 id="备忘录模式-Memento"><a href="#备忘录模式-Memento" class="headerlink" title="备忘录模式(Memento)"></a>备忘录模式(Memento)</h3><div class="tabs" id="memento"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#memento-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#memento-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="memento-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="memento-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h3 id="解释器模式-Interpreter"><a href="#解释器模式-Interpreter" class="headerlink" title="解释器模式(Interpreter)"></a>解释器模式(Interpreter)</h3><div class="tabs" id="interpreter"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#interpreter-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#interpreter-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="interpreter-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="interpreter-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h3 id="责任链模式-Chain-of-Responsibility"><a href="#责任链模式-Chain-of-Responsibility" class="headerlink" title="责任链模式(Chain of Responsibility)"></a>责任链模式(Chain of Responsibility)</h3><div class="tabs" id="chain-of-responsibility"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#chain-of-responsibility-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#chain-of-responsibility-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="chain-of-responsibility-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="chain-of-responsibility-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h3 id="访问者模式-Visitor"><a href="#访问者模式-Visitor" class="headerlink" title="访问者模式(Visitor)"></a>访问者模式(Visitor)</h3><div class="tabs" id="visitor"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#visitor-1">C++ 版本</button></li><li class="tab"><button type="button" data-href="#visitor-2">Go 版本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="visitor-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="visitor-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h2 id="其他模式"><a href="#其他模式" class="headerlink" title="其他模式"></a>其他模式</h2><h3 id="依赖注入-Dependency-Injection"><a href="#依赖注入-Dependency-Injection" class="headerlink" title="依赖注入(Dependency Injection)"></a>依赖注入(Dependency Injection)</h3><h4 id="依赖注入模式的介绍"><a href="#依赖注入模式的介绍" class="headerlink" title="依赖注入模式的介绍"></a>依赖注入模式的介绍</h4><p>维基百科的定义:</p>
<p>在软件工程中，<strong>依赖注入</strong>（dependency injection）的意思为，给予调用方它所需要的事物。</p>
<ul>
<li>“依赖”是指可被方法调用的事物。依赖注入形式下，调用方不再直接使用”依赖”，取而代之是”注入”。</li>
<li>“注入”是指将“依赖”传递给调用方的过程。在”注入”之后，调用方才会调用该”依赖”。</li>
<li>传递依赖给调用方，而不是让让调用方直接获得依赖，这个是该设计的根本需求。</li>
</ul>
<p>依赖注入的好处:</p>
<p><strong>依赖注入处理的关键问题是解耦</strong>，解耦在代码工程学中的好处显而易见：<strong>代码扩展性强，可维护性增强以及更容易的进行单元测试</strong>。</p>
<p><a href="https://zhuanlan.zhihu.com/p/467874556">https://zhuanlan.zhihu.com/p/467874556</a></p>
<br/>

<h4 id="依赖注入模式实现-Go"><a href="#依赖注入模式实现-Go" class="headerlink" title="依赖注入模式实现(Go)"></a>依赖注入模式实现(Go)</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>

<h3 id="MapReduce-模式"><a href="#MapReduce-模式" class="headerlink" title="MapReduce 模式"></a>MapReduce 模式</h3><h4 id="MapReduce-模式的介绍"><a href="#MapReduce-模式的介绍" class="headerlink" title="MapReduce 模式的介绍"></a>MapReduce 模式的介绍</h4><br/>

<p>MapReduce 模式实现（Go）</p>
<div class="tabs" id="mapreduce-go-版本"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#mapreduce-go-版本-1">Struct MapReduce</button></li><li class="tab"><button type="button" data-href="#mapreduce-go-版本-2">Map 阶段</button></li><li class="tab"><button type="button" data-href="#mapreduce-go-版本-3">Reduce 阶段</button></li><li class="tab"><button type="button" data-href="#mapreduce-go-版本-4">chan  并发控制</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="mapreduce-go-版本-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> MapReduce <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  srcFilePaths <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
  outFile      <span class="token operator">*</span>os<span class="token punctuation">.</span>File
  workerGroup  <span class="token operator">*</span>errgroup<span class="token punctuation">.</span>Group
  maxChunkSize <span class="token builtin">int</span>
  numOfWorkers <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Option <span class="token keyword">func</span><span class="token punctuation">(</span>reduce <span class="token operator">*</span>MapReduce<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">WithSrcPaths</span><span class="token punctuation">(</span>paths <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>mr <span class="token operator">*</span>MapReduce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    mr<span class="token punctuation">.</span>srcFilePaths <span class="token operator">=</span> paths
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">WithMaxChunkSize</span><span class="token punctuation">(</span>size <span class="token builtin">int</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>mr <span class="token operator">*</span>MapReduce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    mr<span class="token punctuation">.</span>maxChunkSize <span class="token operator">=</span> size
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">WithMaxNumOfWorker</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>mr <span class="token operator">*</span>MapReduce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    mr<span class="token punctuation">.</span>numOfWorkers <span class="token operator">=</span> n
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">WithOutFle</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>mr <span class="token operator">*</span>MapReduce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    outFile<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// ...</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>
    mr<span class="token punctuation">.</span>outFile <span class="token operator">=</span> outFile
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewMapReduce</span><span class="token punctuation">(</span>options <span class="token operator">...</span>Option<span class="token punctuation">)</span> MapReduce <span class="token punctuation">&#123;</span>
  mr <span class="token operator">:=</span> MapReduce<span class="token punctuation">&#123;</span>
    numOfWorkers<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    maxChunkSize<span class="token punctuation">:</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">,</span>
    workerGroup<span class="token punctuation">:</span>  <span class="token operator">&amp;</span>errgroup<span class="token punctuation">.</span>Group<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
  mr<span class="token punctuation">.</span>workerGroup<span class="token punctuation">.</span><span class="token function">SetLimit</span><span class="token punctuation">(</span>mr<span class="token punctuation">.</span>numOfWorkers<span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> opt <span class="token operator">:=</span> <span class="token keyword">range</span> options <span class="token punctuation">&#123;</span>
    <span class="token function">opt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mr<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> mr
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>mr <span class="token operator">*</span>MapReduce<span class="token punctuation">)</span> <span class="token function">Prepared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> mr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>mr<span class="token punctuation">.</span>srcFilePaths<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> mr<span class="token punctuation">.</span>outFile <span class="token operator">!=</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mapreduce-go-版本-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Read Map 阶段函数</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>mr <span class="token operator">*</span>MapReduce<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> readerChan <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>mr<span class="token punctuation">.</span><span class="token function">Prepared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 打开文件，读取文件</span>
  file<span class="token punctuation">,</span> fileErr <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
  <span class="token keyword">if</span> fileErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">return</span> fileErr
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReaderSize</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> mr<span class="token punctuation">.</span>maxChunkSize<span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
    buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> mr<span class="token punctuation">.</span>maxChunkSize<span class="token punctuation">)</span>
    size<span class="token punctuation">,</span> readErr <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>
    <span class="token keyword">if</span> readErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// ...</span>
      <span class="token keyword">return</span> readErr
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> readErr <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">&#123;</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> size <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
      readerChan <span class="token operator">&lt;-</span> buf<span class="token punctuation">[</span><span class="token punctuation">:</span>size<span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> size <span class="token operator">&lt;</span> mr<span class="token punctuation">.</span>maxChunkSize <span class="token punctuation">&#123;</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mapreduce-go-版本-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Write Reduce 阶段函数</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>mr <span class="token operator">*</span>MapReduce<span class="token punctuation">)</span> <span class="token function">Write</span><span class="token punctuation">(</span>writer <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>mr<span class="token punctuation">.</span><span class="token function">Prepared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 阻塞等待，遍历 chan 不断写入目标文件</span>
  <span class="token keyword">for</span> chunk <span class="token operator">:=</span> <span class="token keyword">range</span> writer <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> mr<span class="token punctuation">.</span>outFile<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// ...</span>
      <span class="token keyword">return</span> err
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mapreduce-go-版本-4"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  mr <span class="token operator">:=</span> <span class="token function">NewMapReduce</span><span class="token punctuation">(</span>
    <span class="token function">WithOutFle</span><span class="token punctuation">(</span><span class="token string">`输出目标文件路径`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">WithSrcPaths</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">`所有需要合并文件的路径集合`</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">WithMaxNumOfWorker</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">WithMaxChunkSize</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token operator">!</span>mr<span class="token punctuation">.</span><span class="token function">Prepared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  deliver <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span>
  <span class="token comment">// Reduce阶段，阻塞等待有数据可以写</span>
  <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    err <span class="token operator">:=</span> mr<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>deliver<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">//...</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 并发 Map 阶段</span>
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> path <span class="token operator">:=</span> <span class="token keyword">range</span> mr<span class="token punctuation">.</span>srcFilePaths <span class="token punctuation">&#123;</span>
    mr<span class="token punctuation">.</span>workerGroup<span class="token punctuation">.</span><span class="token function">Go</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> mr<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> deliver<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> mr<span class="token punctuation">.</span>workerGroup<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">close</span><span class="token punctuation">(</span>deliver<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>



<h3 id="（Option-Pattern）-选项模式"><a href="#（Option-Pattern）-选项模式" class="headerlink" title="（Option Pattern） 选项模式"></a>（Option Pattern） 选项模式</h3><h4 id="模式的介绍"><a href="#模式的介绍" class="headerlink" title="模式的介绍"></a>模式的介绍</h4><p>选项模式是一种设计模式，用于构建灵活且可扩展的 API，目的是解决函数参数过多、需要可选参数或需要默认值的情况。</p>
<p>首先定义一个结构体来表示配置信息，然后定义一个函数类型作为选项函数，该函数接受配置结构体的指针作为参数。</p>
<p>为每个可配置的字段创建一个函数，该函数接受对应字段的类型作为参数，并返回一个 option 函数。在返回的函数中，对配置结构体的相应字段进行赋值。</p>
<h4 id="选项模式实现-Go"><a href="#选项模式实现-Go" class="headerlink" title="选项模式实现(Go)"></a>选项模式实现(Go)</h4><div class="tabs" id="option-pattern-go-版本"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#option-pattern-go-版本-1">Struct Server</button></li><li class="tab"><button type="button" data-href="#option-pattern-go-版本-2">Options</button></li><li class="tab"><button type="button" data-href="#option-pattern-go-版本-3">Create a Server With options</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="option-pattern-go-版本-1"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Server <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  Host <span class="token builtin">string</span>
  Port <span class="token builtin">int</span>
  Tls  <span class="token builtin">bool</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="option-pattern-go-版本-2"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Option <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Server<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">WithHost</span><span class="token punctuation">(</span>host <span class="token builtin">string</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    s<span class="token punctuation">.</span>Host <span class="token operator">=</span> host
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">WithPort</span><span class="token punctuation">(</span>port <span class="token builtin">int</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    s<span class="token punctuation">.</span>Port <span class="token operator">=</span> port
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="option-pattern-go-版本-3"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewServer</span><span class="token punctuation">(</span>options <span class="token operator">...</span>Option<span class="token punctuation">)</span> <span class="token operator">*</span>Server <span class="token punctuation">&#123;</span>
  s <span class="token operator">:=</span> <span class="token operator">&amp;</span>Server<span class="token punctuation">&#123;</span>
    Host<span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>
    Port<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>
    Tls<span class="token punctuation">:</span>  <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> opt <span class="token operator">:=</span> <span class="token keyword">range</span> options <span class="token punctuation">&#123;</span>
    <span class="token function">opt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> s
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>

<h4 id="选项模式实现-C"><a href="#选项模式实现-C" class="headerlink" title="选项模式实现(C++)"></a>选项模式实现(C++)</h4><div class="tabs" id="option-pattern-c++-版本"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#option-pattern-c++-版本-1">Struct Server</button></li><li class="tab"><button type="button" data-href="#option-pattern-c++-版本-2">Options</button></li><li class="tab"><button type="button" data-href="#option-pattern-c++-版本-3">Create a Server With options</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="option-pattern-c++-版本-1"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct ServerConf &#123;
  std::string host;
  int port;
  bool tls;
&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="option-pattern-c++-版本-2"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">using Option &#x3D; std::function&lt;void(ServerConf&amp;)&gt;;

Option WithPort(int port) &#123;
  return [&amp;](ServerConf&amp; c) &#123;
    c.port &#x3D; prot;
  &#125;;
&#125;

Option WithHost(const std::string&amp; host) &#123;
  return [&amp;](ServerConf&amp; c) &#123;
    c.host &#x3D; host;
  &#125;;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="option-pattern-c++-版本-3"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ServerConf NewServer(const std::initializer_list&lt;Option&gt;&amp; options) &#123;
  ServerConf c;
  for (const auto&amp; opt : options) &#123;
    opt(&amp;c);
  &#125;
  return c;
&#125;

int main() &#123;
  auto c &#x3D; NewServer(&#123;
    WithPort(8080),
    WithHost(&quot;127.0.0.1&quot;)
  &#125;);
  &#x2F;&#x2F; c....
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<br/>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列</title>
    <url>/2023/10/13/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="消息队列作用"><a href="#消息队列作用" class="headerlink" title="消息队列作用"></a>消息队列作用</h2><ul>
<li>异步处理</li>
<li>流量控制（削峰）</li>
<li>服务解耦</li>
<li>消息广播</li>
<li>发布订阅</li>
</ul>
<br/>

<h2 id="基于-Redis-实现的消息队列"><a href="#基于-Redis-实现的消息队列" class="headerlink" title="基于 Redis 实现的消息队列"></a>基于 Redis 实现的消息队列</h2><br/>

<h2 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h2><p>RocketMQ 使用的消息模型是标准的<code>发布-订阅模型</code>。RocketMQ 对在线业务的响应时延做了很多的优化，大多数情况下可以做到毫秒级的响应，每秒钟大概能处理几十万条消息。</p>
<p><strong>如果应用场景很在意响应时延，那应该选择使用 RocketMQ。</strong></p>
<h3 id="消息模型"><a href="#消息模型" class="headerlink" title="消息模型"></a>消息模型</h3><p><strong>发布-订阅模型</strong></p>
<p><strong>请求-确认机制：</strong>在生产端，生产者先将消息发送给服务端，也就是 Broker，服务端在收到消息并将消息写入主题或者队列中后，会给生产者发送确认的响应。如果生产者没有收到服务端的确认或者收到失败的响应，则会重新发送消息；在消费端，消费者在收到消息并完成自己的消费业务逻辑（比如，将数据保存到数据库中）后，也会给服务端发送消费成功的确认。服务端只有收到消费确认后，才认为一条消息被成功消费，否则它会给消费者重新发送这条消息，直到收到对应的消费成功确认。</p>
<p><strong>消息顺序：</strong>每个 Topic 包含多个队列，通过多个队列来实现多实例并行生产和消费。RocketMQ 只在队列上保证消息的有序性，Topic 层面是无法保证消息的严格顺序。</p>
<p><strong>消费模式：</strong>订阅者的概念是通过消费组（Consumer Group）来体现。每个消费组都消费主题中一份完整的消息，不同消费组之间消费进度彼此不受影响，一条消息被 Consumer Group1 消费过，也会再给 Consumer Group2 消费。</p>
<p>消费组中包含多个消费者，同组内的消费者是竞争消费的关系，每个消费者负责消费组内的一部分消息。如果一条消息被消费者 Consumer1 消费了，同组的其他消费者不会再收到这条消息。</p>
<p>在 Topic 的消费过程中，由于消息需要被不同的组进行多次消费，所以消费完的消息并不会立即被删除，RocketMQ 为每个消费组在每个队列上维护一个消费位置（Consumer Offset）。每成功消费一条消息，消费位置就加一。</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/mq/rocketmq-model.jpg">

<br/>

<h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><h3 id="消息模型-1"><a href="#消息模型-1" class="headerlink" title="消息模型"></a>消息模型</h3><p>Kafka 的消息模型和 RocketMQ 几乎一样，生产消费过程中的确认机制，都完全适用于 Kafka。唯一的区别是，在 Kafka 中，队列这个概念的名称不一样，Kafka 中对应的名称：分区（Partition）。</p>
<br/>

]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>消息队列</tag>
        <tag>Kafka</tag>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
</search>
