<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>拆书系列之《C++ Templates 2nd》</title>
    <url>/2021/05/05/C++%20Template/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8AC++%20Templates%202nd%E3%80%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>C++ Templates</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《深度探索 C++ 对象模型》</title>
    <url>/2021/10/08/C++%20%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8A%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2%20C++%20%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E3%80%8B/</url>
    <content><![CDATA[<h1 id="拆书系列之《深度探索-C-对象模型》"><a href="#拆书系列之《深度探索-C-对象模型》" class="headerlink" title="拆书系列之《深度探索 C++ 对象模型》"></a>拆书系列之《深度探索 C++ 对象模型》</h1><p><code>参考自《深度探索 C++ 对象模型》--Stanley B.Lippman 著，侯捷译。</code></p>
<br/>

<h2 id="关于对象（Object-Lessons）"><a href="#关于对象（Object-Lessons）" class="headerlink" title="关于对象（Object Lessons）"></a>关于对象（Object Lessons）</h2><p><code>本章主要泛讲 C++的对象模型、struct 和 class 关键字的差异、多态下的内存布局分析等。</code></p>
<h3 id="加上封装后的布局成本"><a href="#加上封装后的布局成本" class="headerlink" title="加上封装后的布局成本"></a>加上封装后的布局成本</h3><p>C++ 在布局以及存取时间上的主要的额外负担由 <strong>virtual</strong> 引起，包括：</p>
<p><code>virtual function 机制， 用来支持 执行期绑定。</code></p>
<p><code>virtual base class， 用来实现单一共享在继承体系中。</code></p>
<p>此外，还有一些额外负担，发生在 <code>一个 derived class 和之上的 base class 转换之间。</code></p>
<br/>

<h2 id="C-对象模式（The-C-Object-Model）"><a href="#C-对象模式（The-C-Object-Model）" class="headerlink" title="C++ 对象模式（The C++ Object Model）"></a>C++ 对象模式（The C++ Object Model）</h2><p>Stroustrup 当初设计的 C++ 对象模型中， <strong>非静态数据成员（nonstatic data members）</strong> 被配置于每一个 <strong>类实例化对象（class object）</strong> 之内，<strong>静态数据成员（static data members）</strong> 、<strong>静态和非静态成员函数（static and nonstatic function members）</strong> 被存放在类实例化对象（class object）之外。</p>
<p>虚函数通过两个步骤来支持：</p>
<p>1、每一个 <strong>类</strong> 产生一堆指向 <strong>virtual functions</strong> 的指针，放在 <strong>表格（virtual table，缩写 vtbl）</strong> 中。</p>
<p>2、每一个 <strong>类实例化对象</strong> 被天际一个 <strong>指针（vptr）</strong>，指向 <strong>virtual table</strong>，<strong>vptr</strong> 的设定和重置都有类的 <strong>constructor、destructor 和 copy assignment 运算符</strong> 自动完成。 每个 <strong>类</strong>所关联的 <strong>type_info object （用以支持 runtime type identification， RTTI）</strong>也通过 <strong>virtual table</strong> 被指出来，通常放在 <strong>virtual table</strong> 的第一个 slot 处。</p>
<br/>





<h3 id="C-对象模型（The-C-Object-Model）"><a href="#C-对象模型（The-C-Object-Model）" class="headerlink" title="C++ 对象模型（The C++ Object Model）"></a>C++ 对象模型（The C++ Object Model）</h3><p>比如一个类 <strong>Point</strong>：</p>
<div class="tabs" id="point"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="point-1">class Point</button><button type="button" class="tab " data-href="point-2">class Point 对象模型</button></ul><div class="tab-contents"><div class="tab-item-content active" id="point-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">float</span> xval<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">PointCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> ostream<span class="token operator">&amp;</span> <span class="token function">Print</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

  <span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">float</span> x_<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> point_count_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-item-content" id="point-2"><p>优点：<code>空间及存取时间的效率。</code></p>
<p>缺点：<code>如果用到的 class object 的 nonstatic data members 有修改（增/删/改），应用程序代码需要重新编译。</code></p>
<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/Object%20Model/Point%E7%B1%BB%E6%A8%A1%E5%9E%8B%E5%9B%BE.png"></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<br/>

<h3 id="加上继承的-C-对象模型"><a href="#加上继承的-C-对象模型" class="headerlink" title="加上继承的 C++ 对象模型"></a>加上继承的 C++ 对象模型</h3><div class="tabs" id="继承的-c++-对象模型"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="继承的-c++-对象模型-1">单一继承</button><button type="button" class="tab " data-href="继承的-c++-对象模型-2">多重继承</button><button type="button" class="tab " data-href="继承的-c++-对象模型-3">虚拟继承</button><button type="button" class="tab " data-href="继承的-c++-对象模型-4">派生类如何在本质上模塑其基类实体？</button></ul><div class="tab-contents"><div class="tab-item-content active" id="继承的-c++-对象模型-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Library_materials</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Library_materials</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Rental_book</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">Book</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><div class="tab-item-content" id="继承的-c++-对象模型-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 一种 iostream 实现方式</span>
<span class="token keyword">class</span> <span class="token class-name">iostream</span><span class="token operator">:</span> 
		<span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">istream</span><span class="token punctuation">,</span> 
		<span class="token keyword">public</span> <span class="token class-name">ostream</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-item-content" id="继承的-c++-对象模型-3"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// virtual -> 共享的意思</span>
<span class="token keyword">class</span> <span class="token class-name">istream</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">ios</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">ostream</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">ios</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>在虚拟继承的情况下， base class 不管在继承串链中被派生（derived）多少次，永远只会存在一份实体（subject）。</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/Object%20Model/iostream-class.png"></div><div class="tab-item-content" id="继承的-c++-对象模型-4"><p>每一个 <code>base class</code> 可以被 <code>derived class object</code> 内的一个 <code>slot</code> 指出，该 <code>slot</code> 内含 <code>base class subobject</code> 的地址。</p>
<p>这种体制的主要缺点：因为间接性导致空间和存取时间上的额外负担。</p>
<p>这种体制的主要优点：class object 的大小不会因为其 base classes 的改变而受到影响。</p>
<br/>

<p>另一种所谓的 base table 模型：base class table 被产生出来时，表格中的每一个 slot 内包含一个相关的 base class 地址，这个很想 virtual table 内包含一个 virtual function 的地址一样。每一个 class object 内含一个 bptr，它会被初始化，指向其 base class table。</p>
<p>缺点：因为间接性导致空间和存取时间上的额外负担。</p>
<p>优点：每一个 class object 都应该在某个固定位置安放一个 base table 指针，与 base classes 的大小和数目无关；无需改变 class objects 本身就可以放大、缩小、或者更改 base class table。</p>
<p>base class table 模型在虚拟多继承中的应用</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/Object%20Model/base-class-table-model.png"></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<p>不管哪一种体制，<code>间接性</code> 的级数都将因为继承的深度增加（如 Rental_book 需要两次简介存取才能够探取到继承自 Library_metarials 的 members），而 Book 只需要一次。所以，<code>在 derived 内复制一个指针，指向继承串链中的每一个 base class，可以得到一个永恒不变的存取时间</code>，需要的额外空间来放置额外的指针这个代价是必然的。</p>
<br/>



<h3 id="对象模型如何影响程序"><a href="#对象模型如何影响程序" class="headerlink" title="对象模型如何影响程序"></a>对象模型如何影响程序</h3><p>这里先引入了对象模型下一个类可能被转化的一个过程。</p>
<div class="tabs" id="对象模型下的函数转换"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="对象模型下的函数转换-1">假设定义一个类</button><button type="button" class="tab " data-href="对象模型下的函数转换-2">可能在内部的转化</button><button type="button" class="tab " data-href="对象模型下的函数转换-3">转化图示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="对象模型下的函数转换-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
  	<span class="token comment">// copy constructor</span>
  	<span class="token function">X</span><span class="token punctuation">(</span><span class="token keyword">const</span> X<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>
  	<span class="token comment">// virtual destructor</span>
  	<span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// virtual function</span>
  	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


X <span class="token function">foobar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  X xx<span class="token punctuation">;</span>
  X <span class="token operator">*</span>px <span class="token operator">=</span> <span class="token keyword">new</span> X<span class="token punctuation">;</span>
  <span class="token comment">// foo 是一个 virtual function</span>
  xx<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  px<span class="token operator">-></span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	
  <span class="token keyword">delete</span> px<span class="token punctuation">;</span>
  retun xx<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-item-content" id="对象模型下的函数转换-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">foobar</span><span class="token punctuation">(</span>X <span class="token operator">&amp;</span>_result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 构造 _result</span>
  <span class="token comment">// _result 用来取代 local xx ...</span>
  _result<span class="token punctuation">.</span><span class="token class-name">X</span><span class="token double-colon punctuation">::</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 扩展 X *px = new X;</span>
  px <span class="token operator">=</span> <span class="token function">_new</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> px <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    px<span class="token operator">-></span><span class="token class-name">X</span><span class="token double-colon punctuation">::</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 扩展 xx.foo() 但不使用 virtual 机制</span>
  <span class="token comment">// 以 _result 取代 xx</span>
  <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>_result <span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 使用 virtual 机制扩展 px->foo()</span>
  <span class="token punctuation">(</span> <span class="token operator">*</span>px<span class="token operator">-></span>vtbl<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">(</span> px <span class="token punctuation">)</span>
  
  <span class="token comment">// 扩展 delete px;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>px <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">(</span> <span class="token operator">*</span>px<span class="token operator">-></span>vtbl<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">(</span> px <span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// destructor</span>
    <span class="token function">_delete</span><span class="token punctuation">(</span> px <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token comment">// 不需要使用 named return statement</span>
  <span class="token comment">// 不需要销毁 local object xx</span>
  <span class="token keyword">return</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-item-content" id="对象模型下的函数转换-3"><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/Object%20Model/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E5%A6%82%E4%BD%95%E5%BD%B1%E5%93%8D%E7%A8%8B%E5%BA%8F.png"></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<br/>



<h3 id="关键词所带来的差异"><a href="#关键词所带来的差异" class="headerlink" title="关键词所带来的差异"></a>关键词所带来的差异</h3><p>举例说明了关键字带来的差异，以及 C++ 为了兼容 C 变得复杂的原因。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token punctuation">(</span> <span class="token operator">*</span>p1 <span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不知道是个声明（declaration）还是 函数调用（invocation）</span>
<span class="token keyword">int</span> <span class="token punctuation">(</span> <span class="token operator">*</span>p2 <span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无法确定？</span>
<span class="token comment">// 当语言无法区分那是一个声明还是一个表达式的时候，我们需要一个超越语言范围的规则，</span>
<span class="token comment">// 该规则会将上述的式子判定为一个『声明』</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h4 id="struct-和-class-的区别"><a href="#struct-和-class-的区别" class="headerlink" title="struct 和 class 的区别"></a>struct 和 class 的区别</h4><p>C++ 引入 class 的重要性（非必要）：class 代表了一种所支持的<code>封装和继承的哲学</code>。</p>
<p>如果 C++ 需要<code>支持现存的 C 程序代码</code>，就不能不支持 struct。</p>
<p>真正的问题不在于我们的声明是否使用了相同的关键词 struct&#x2F;class，而是对于类声明的某种承诺：</p>
<p><code>struct</code> 实现 C 的数据萃取观念。</p>
<p><code>class</code> 实现的是 C++ 的 ADT (Abstract Data Type) 观念。</p>
<p>class 真正特性是由声明的本身来决定的。</p>
<p><strong>如果我们迫切需要一个相当复杂的 C++ class 的某些部分的数据，使它像 C 声明的样子，那么那一部分最好是 抽离出来形成一个独立的 struct 声明，然后让 C++ 与 C 组合（composition）:</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">C_Point</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span><span class="token operator">:</span> 
    <span class="token keyword">operator</span> <span class="token function">C_Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _c_point<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token comment">// ...</span>
  <span class="token keyword">private</span><span class="token operator">:</span>
    C_Point _c_point<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="对象的差异"><a href="#对象的差异" class="headerlink" title="对象的差异"></a>对象的差异</h3><p>需要多少内存才能变现一个 class object ? 一般而言：</p>
<p>1、非静态数据成员的总和大小。</p>
<p>2、加上任何由于 <strong>alignment</strong> 需求而填补上去的空间。（<strong>alignment</strong> 就是字节对齐，在 32 位计算机上，alignment 通常为 4 bytes（32位），以使 bus 的 运输量达到最大效率。）</p>
<p>3、加上为了支持 <strong>virtual</strong> 而由内部产生的任何额外负担（overload）。 </p>
<br/>

<h4 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h4><p>一个指针，不管它指向那种数据类型，指针本身所需的内存大小是固定的（32 位机器上是 4 bytes，64 位机器上是 8 bytes），指针类型只会教导编译器如何解释某个特定地址中的内存内容及其大小。</p>
<div class="tabs" id="zooanimal"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="zooanimal-1">class ZooAnimal</button><button type="button" class="tab " data-href="zooanimal-2">ZooAnimal object 内存布局</button></ul><div class="tab-contents"><div class="tab-item-content active" id="zooanimal-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">ZooAnimal</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">ZooAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">ZooAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Rotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">int</span> location_<span class="token punctuation">;</span>
    String name_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

ZooAnimal <span class="token function">za</span><span class="token punctuation">(</span><span class="token string">"Zoey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ZooAnimal<span class="token operator">*</span> pza <span class="token operator">=</span> <span class="token operator">&amp;</span>za<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-item-content" id="zooanimal-2"><p>如果 String 是传统的 8-bytes（包括一个 4 bytes 的 char* 和表示长度的 int ），一个 ZooAnimal 指针将横跨地址空间 1000~1015（4+8+4）,如图：</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/Object%20Model/%E7%8B%AC%E7%AB%8Bclass%E7%9A%84object%E5%B8%83%E5%B1%80%E5%92%8Cpointer%E5%B8%83%E5%B1%80.png"></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<br/>

<p>对于一个指向某个地址的 <code>void*</code> 指针，我们并不知道他将涵盖怎样的地址，所以 <strong>不能通过它操作所指的 object</strong>。</p>
<p>对于<strong>转型（cast）</strong>，其实是一种编译器指令，它并不改变一个指针所含的真正地址，<strong>它只影响被指明的内存的大小和内容的解释方式。</strong></p>
<br/>

<h4 id="加上多态之后"><a href="#加上多态之后" class="headerlink" title="加上多态之后"></a>加上多态之后</h4><div class="tabs" id="adding-polymorphism"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="adding-polymorphism-1">class Bear</button><button type="button" class="tab " data-href="adding-polymorphism-2">Bear object 内存布局</button><button type="button" class="tab " data-href="adding-polymorphism-3">Bear* 与 ZooAnimal*</button><button type="button" class="tab " data-href="adding-polymorphism-4">指针支持多态的本质</button></ul><div class="tab-contents"><div class="tab-item-content active" id="adding-polymorphism-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Bear</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">ZooAnimal</span></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Bear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">Bear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>

  <span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">enum</span> <span class="token class-name">Dances</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    Dances dances_known<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cell_block<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

Bear <span class="token function">b</span><span class="token punctuation">(</span><span class="token string">"Yogi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Bear <span class="token operator">*</span>pb <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
Bear <span class="token operator">&amp;</span>rb <span class="token operator">=</span> <span class="token operator">*</span>pb<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-item-content" id="adding-polymorphism-2"><p>对于 Bear 的实例 b, 在 32 位机器上，需要 24 bytes [ZooAnimal 的 16 bytes + Bear 所带来的 8 bytes ]，指针 pb 和 引用 rb 需要 4 bytes。</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/Object%20Model/Derived%20class%20%E7%9A%84%20object%20%E5%92%8C%20pointer%20%E5%B8%83%E5%B1%80.png"></div><div class="tab-item-content" id="adding-polymorphism-3"><p>思考：一个派生类指针 Bear *pb 和 一个父类指针 ZooAnimal *pz 有何不同？</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Bear b<span class="token punctuation">;</span>
ZooAnimal <span class="token operator">*</span>pz <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
Bear <span class="token operator">*</span>pb <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
<span class="token comment">// 它们都指向了 Bear object 的第一个 byte，但是：</span>

<span class="token comment">// pb 所涵盖的地址包含整个 Bear object !!!</span>
<span class="token comment">// pz 只包含 Bear object 中的 ZooAnimal subobject !!!</span>

<span class="token comment">// error: 不合法操作！！!</span>
pz<span class="token operator">-></span>cell_block<span class="token punctuation">;</span>

<span class="token comment">// 可以进行下行转换，[运行时操作,成本较高]</span>
<span class="token comment">// ok</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> Bear <span class="token operator">*</span>pb2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Bear<span class="token operator">*</span> <span class="token operator">></span></span></span><span class="token punctuation">(</span>pz<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  	pb2<span class="token operator">-></span>cell_block<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-item-content" id="adding-polymorphism-4"><p>一个指针或引用之所以支持多态，是因为<strong>它们并不会引发内存中任何 『与类型有关的内存委托操作（type-dependent commitment）』，受到改变的是它们所指向内存的『大小和内容的解释方式』而已。</strong></p>
<p>例如，对于父类指针调用 <code>pz-&gt;Rotate()</code> 时，<code>pz</code> 的类型将决定一下两点：</p>
<ul>
<li>pz 只能调用 ZooAnimal 的 public 接口。</li>
<li>该接口的 access level （Rotate() 是 ZooAnimal 的一个 public member）。</li>
</ul>
<p><code>pz</code> 所指的 <code>object</code> 类型可以决定 <code>Rotate()</code> 所调用的实体，但是调用的是父类（<code>ZooAnimal</code>）的 <code>Rotate()</code> 还是派生类（<code>Bear</code>）的 <code>Rotate()</code> 由 <code>vtpr</code> 指向的 <code>virtual table</code> 决定，且看后续讨论。</p>
<p>再看这么一种情况：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Bear b<span class="token punctuation">;</span>
ZooAnimal za <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment">// 会引起切割</span>

<span class="token comment">// 调用 ZooAnimal::rotate()</span>
za<span class="token punctuation">.</span><span class="token function">Rotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>思考：</p>
<p>1、将 <code>Bear</code> 实体完整拷贝给 <code>ZooAnimal</code> 实体去，为什么 <code>za</code> 实体的 <code>vptr</code> 不指向 <code>Bear</code> 的 <code>virtual table</code>?</p>
<p>  编译器确保了如果某一个 <code>object</code> 含有一个或者一个以上的 <code>vptrs</code>，那么 <code>vptrs</code> 的内容不会被 <code>base class object</code> 初始化或改变。</p>
<p>2、为什么 <code>Rotate()</code> 是被 <code>ZooAnimal</code> 实体调用而不是 <code>Bear</code> 实体？</p>
<p>  <code>za</code> 并不是一个 <code>Bear</code> 实体，它只能是 ZooAnimal 实体，面向对象设计不支持对 <code>object</code> 的直接处理，多态不能够实际发挥在 <strong>直接存取 objects</strong> 这件事情上。例如：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Panda</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Bear</span></span> <span class="token punctuation">&#123;</span> 
  <span class="token comment">//... </span>
<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#123;</span>
  ZooAnimal za<span class="token punctuation">;</span>
  ZooAnimal <span class="token operator">*</span>pza<span class="token punctuation">;</span>
  
  Bear b<span class="token punctuation">;</span>
  pza <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
  
  Panda <span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token keyword">new</span> Panda<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其可能的布局如下：</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/Object%20Model/ZooAnimal-Bear-Panda.png">

<p>当一个基类对象实例被用来初始化一个派生类对象时，派生类对象会被切割，以塞入较小的 base type 内存中， 编译时期通过这个实例触发 virtual function 调用操作。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<br/>



<h2 id="构造语义学（The-Semantics-of-constructors）"><a href="#构造语义学（The-Semantics-of-constructors）" class="headerlink" title="构造语义学（The Semantics of constructors）"></a>构造语义学（The Semantics of constructors）</h2><p><code>本章主要讲：编译器在哪些情况下，必须为没有声明构造函数的类生成必要的默认构造函数和拷贝构造函数，以及编译器为参数初始化、返回值初始化等做了哪些优化操作。</code></p>
<br/>

<h3 id="Default-Constructor-的建构操作"><a href="#Default-Constructor-的建构操作" class="headerlink" title="Default Constructor 的建构操作"></a>Default Constructor 的建构操作</h3><p><code>对于 C++ 新手常见的误解：</code></p>
<ul>
<li><p>任何 class 如果没有定义默认构造函数（default constructor），就会被合成一个出来？</p>
</li>
<li><p>编译器合成出来的默认构造函数（default constructor） 会明确设定类内每一个类数据成员的默认值？</p>
</li>
</ul>
<p><strong>以上两个观点都不是真的！！！</strong></p>
<br/>

<p>有四种情况会导致一个类的构造函数是 <strong>non-trivial</strong>，使得编译器必须为没有声明构造函数（constructor）的类合成一个 默认构造函数（default constructor），C++ 规范称之为 <strong>隐式必要默认构造函数（implict nontrivial default constructors）</strong>。合成出来只为了满足编译器需要。</p>
<p>在 <strong>合成的默认构造函数（default constructor）</strong> 中，编译器认为 <strong>基类子对象（base class subobjects） 和 成员类对象（member class objects） 是重要的，会初始化它们</strong>。其它 非静态数据成员等初始化操作应该有编码者自行初始化。</p>
<h3 id="编译器必须合成默认构造函数的4种情形"><a href="#编译器必须合成默认构造函数的4种情形" class="headerlink" title="编译器必须合成默认构造函数的4种情形"></a>编译器必须合成默认构造函数的4种情形</h3><div class="tabs" id="必须合成默认构造函数的4种情形"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="必须合成默认构造函数的4种情形-1">A</button><button type="button" class="tab " data-href="必须合成默认构造函数的4种情形-2">B</button><button type="button" class="tab " data-href="必须合成默认构造函数的4种情形-3">C</button><button type="button" class="tab " data-href="必须合成默认构造函数的4种情形-4">D</button></ul><div class="tab-contents"><div class="tab-item-content active" id="必须合成默认构造函数的4种情形-1"><p><strong>1、该类中的成员对象（Member Class Object），带有默认构造函数（Default Constructor）</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
  	<span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
  	Foo foo<span class="token punctuation">;</span>	<span class="token comment">// 内含</span>
  	<span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 编译器的行动是：如果 class A 内含一个及以上的 member class</span>
<span class="token comment">// objects， 那么 class A 的每一个 constructor 必须调用每一个</span>
<span class="token comment">// member classes 的 default constructor.</span>
<span class="token comment">// 扩张后的 dafault constructor</span>
<span class="token class-name">Bar</span><span class="token double-colon punctuation">::</span><span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  foo<span class="token punctuation">.</span><span class="token class-name">Foo</span><span class="token double-colon punctuation">::</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 附加上的compiler code</span>
  str <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>				<span class="token comment">// 显式的用户代码</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果存在多个 class member objects要求 constructor 初始化操作，C++ 要求以 { member objects 在 class 中的声明次序 }来调用各个 constructors。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Dopey</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">Dopey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Sneezy</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">Sneezy</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Sneezy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Bashful</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">Bashful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">SnowWhite</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
  	Dopey dopey<span class="token punctuation">;</span>
  	Sneezy sneezy<span class="token punctuation">;</span>
  	Bashful bashful<span class="token punctuation">;</span>
  	<span class="token comment">// ...</span>
  <span class="token keyword">private</span><span class="token operator">:</span>
  	<span class="token keyword">int</span> mumble<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-item-content" id="必须合成默认构造函数的4种情形-2"><p><strong>2、该类派生自带有默认构造函数（Default Constructor）的基类（Base Class）</strong></p></div><div class="tab-item-content" id="必须合成默认构造函数的4种情形-3"><p><strong>3、该类中存在虚函数（Virtual Function）</strong></p></div><div class="tab-item-content" id="必须合成默认构造函数的4种情形-4"><p><strong>4、该类的继承链中，存在虚继承，即该类的基类是虚基类（Virtual Base Class）</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<br/>

<h3 id="Copy-Constructor-的建构操作"><a href="#Copy-Constructor-的建构操作" class="headerlink" title="Copy Constructor 的建构操作"></a>Copy Constructor 的建构操作</h3><p>在此，之前，我们需要知道 <strong>Bitwise Copy</strong> 和 <strong>Memberwise Copy</strong> 的区别（参考自 <a href="https://stackoverflow.com/questions/42749439/what-is-the-difference-between-memberwise-copy-bitwise-copy-shallow-copy-and-d%EF%BC%89%EF%BC%9A">https://stackoverflow.com/questions/42749439/what-is-the-difference-between-memberwise-copy-bitwise-copy-shallow-copy-and-d）：</a></p>
<table>
<thead>
<tr>
<th align="center">Bitwise Copy</th>
<th align="center">Memberwise Copy</th>
</tr>
</thead>
<tbody><tr>
<td align="center">浅拷贝的一种形式，通过 <strong>memcopy</strong> 类似的操作实现 <strong>源对象-&gt;目标对象</strong> 的 <strong>按位拷贝</strong>，<strong>不关联类对象的 构造函数（Constructor）调用。</strong></td>
<td align="center">深拷贝的一种形式，<strong>走访每一个对象成员并且显式地拷贝它们，关联调用它们的构造函数（Constructor）</strong>。</td>
</tr>
<tr>
<td align="center">如果类对象被认为是 <strong>trivial</strong>（具备 bitwise copy semantics），没有自定义 拷贝构造函数或者赋值拷贝操作符，执行的是 Bitwise Copy</td>
<td align="center"></td>
</tr>
</tbody></table>
<br/>

<p>一个 class 在下面四种情况会表现出 <u><strong>非 bitwise copy  semantics</strong></u>：</p>
<div class="tabs" id="应该-memberwise-copy-4种情形"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="应该-memberwise-copy-4种情形-1">成员对象含拷贝构造</button><button type="button" class="tab " data-href="应该-memberwise-copy-4种情形-2">基类存在拷贝构造</button><button type="button" class="tab " data-href="应该-memberwise-copy-4种情形-3">声明了一个或多个虚函数</button><button type="button" class="tab " data-href="应该-memberwise-copy-4种情形-4">继承链上有一个或多个虚基类</button></ul><div class="tab-contents"><div class="tab-item-content active" id="应该-memberwise-copy-4种情形-1"><p>编译器必须将成员对象的拷贝构造调用操作安插在合成的 copy constructor 中。</p></div><div class="tab-item-content" id="应该-memberwise-copy-4种情形-2"><p>编译器必须将基类拷贝构造调用操作安插在合成的 copy constructor 中。</p></div><div class="tab-item-content" id="应该-memberwise-copy-4种情形-3"><p>拷贝操作中，目标对象的 虚函数指针（vptr）必须设定为源对象的 vptr。</p></div><div class="tab-item-content" id="应该-memberwise-copy-4种情形-4"><p>拷贝操作中，目标对象的 虚基类指针（vbptr）必须设定为源对象的 vbptr。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<br/>

<h2 id="Data-语义学（The-Semantics-of-Data）"><a href="#Data-语义学（The-Semantics-of-Data）" class="headerlink" title="Data 语义学（The Semantics of Data）"></a>Data 语义学（The Semantics of Data）</h2><p><code>本章主要讲一般的继承和虚拟继承下类成员变量的内存布局情况、编译器如何对类内成员进行存取等。</code></p>
<h3 id="字节对齐"><a href="#字节对齐" class="headerlink" title="字节对齐"></a>字节对齐</h3><p><code>内存地址 a 被称为 n 字节对齐，a 是 n 的倍数（ n 应是2的幂），也可以理解为当被访问的数据长度为 n 字节时，数据地址为 n 字节对齐。如果内存未对齐，称作 misaligned。</code></p>
<p><code>内存指针是对齐的，如果它所指的数据是对齐的。指向聚合数据（aggregate data，如struct或数组）是对齐的，当且仅当它的每个组成数据是对齐的。</code></p>
<div class="tabs" id="字节对齐"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="字节对齐-1">问题引入</button><button type="button" class="tab " data-href="字节对齐-2">为什么要字节对齐</button><button type="button" class="tab " data-href="字节对齐-3">字节对齐原则</button><button type="button" class="tab " data-href="字节对齐-4">继承下的字节对齐</button><button type="button" class="tab " data-href="字节对齐-5">强制字节对齐</button></ul><div class="tab-contents"><div class="tab-item-content active" id="字节对齐-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> id_<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name_<span class="token punctuation">;</span>
    <span class="token keyword">float</span> salary_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

A a<span class="token punctuation">;</span>
<span class="token comment">// sizeof (a) = ?;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-item-content" id="字节对齐-2"><p>《Windows核心编程》里这样说：当CPU访问正确对齐的数据时，它的运行效率最高，当数据大小的数据模数的内存地址是0时，数据是对齐的。例如：WORD值应该是总是从被2除尽的地址开始，而DWORD值应该总是从被4除尽的地址开始，数据对齐不是内存结构的一部分，而是CPU结构的一部分。当CPU试图读取的数值没有正确的对齐时，CPU可以执行两种操作之一：产生一个异常条件；执行多次对齐的内存访问，以便读取完整的未对齐数据，若多次执行内存访问，应用程序的运行速度就会慢。</p></div><div class="tab-item-content" id="字节对齐-3"><p>在系统默认的对齐方式下，每个成员相对于这个结构体变量地址的偏移量正好是该成员类型所占字节的整数倍，且最终占用字节数为成员类型中最大占用字节数的整数倍。例子中，id_ 的偏移量为 0（0 * 4），name_ 的偏移量为4（1 * 4），salary_ 的偏移量为（2 * 4），总共占用12字节，满足成员中最大占用字节数（ float ）的整数倍（3 * 4）。</p></div><div class="tab-item-content" id="字节对齐-4"></div><div class="tab-item-content" id="字节对齐-5"><p>#pragma directive指定对齐的包入（packing）</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>push<span class="token punctuation">)</span>  </span><span class="token comment">/* push current alignment to stack */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     </span><span class="token comment">/* set alignment to 1 byte boundary */</span></span>

<span class="token keyword">struct</span> <span class="token class-name">MyPackedData</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> Data1<span class="token punctuation">;</span>
    <span class="token keyword">long</span> Data2<span class="token punctuation">;</span>
    <span class="token keyword">char</span> Data3<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span>   </span><span class="token comment">/* restore original alignment from stack */</span></span>

<span class="token comment">// 这个结构在32位系统的大小为6字节。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<br/>

<h2 id="Function-语义学（The-Semantics-of-Function）"><a href="#Function-语义学（The-Semantics-of-Function）" class="headerlink" title="Function 语义学（The Semantics of Function）"></a>Function 语义学（The Semantics of Function）</h2><p><code>本章主要讲编译器如何让类成员函数和普通函数一样具有相同的使用效率、编译器为类成员函数做了哪些优化、编译器如何针对单一继承、多重继承和虚继承下的虚函数的区分处理、讨论指向一个类成员函数指针和一个类成员虚函数指针以及多重继承下的类成员函数指针的多态性。</code></p>
<br/>

<h2 id="构造、析构、拷贝语义学（Semantics-of-Construction-Destruction-Copy）"><a href="#构造、析构、拷贝语义学（Semantics-of-Construction-Destruction-Copy）" class="headerlink" title="构造、析构、拷贝语义学（Semantics of Construction, Destruction, Copy）"></a>构造、析构、拷贝语义学（Semantics of Construction, Destruction, Copy）</h2><p><code>本章主要介绍一般无继承情况下，初始化列表在构造函数的扩展方式。介绍多继承、虚继承下，继承链的构造顺序、析构顺序，虚函数表指针 vptr 的设定时机。讨论何时应该设计一个拷贝赋值操作（copy assignment operator）</code></p>
<h3 id="构造语义学"><a href="#构造语义学" class="headerlink" title="构造语义学"></a>构造语义学</h3><p>无继承关系下，C++ 的构造情况：</p>
<div class="tabs" id="无继承关系下的构造情况"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="无继承关系下的构造情况-1">POD 类型</button><button type="button" class="tab " data-href="无继承关系下的构造情况-2">抽象数据类型</button><button type="button" class="tab " data-href="无继承关系下的构造情况-3">虚析构定义视情况而定</button></ul><div class="tab-contents"><div class="tab-item-content active" id="无继承关系下的构造情况-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 会被贴上 POD 的标签</span>
<span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">float</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 行为如同 C 一样, global 被视为 临时性定义，</span>
<span class="token comment">// 没有明确定义，这些全局示例会被连接器折叠起来，只留下单独一个实体，</span>
<span class="token comment">// 被放在程序（data segment 中一个特别保留给未初始化的 global 对象使用）</span>
<span class="token comment">// 这个空间叫 BSS (Block Started by Symbol)</span>
Point p<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-item-content" id="无继承关系下的构造情况-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 显式初始化列表</span>
<span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token keyword">float</span> z <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> 
        <span class="token operator">:</span> <span class="token function">x_</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>
    	  <span class="token function">y_</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">float</span> x_<span class="token punctuation">,</span> y_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 可以定义实话为 local object </span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
    Point local<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 编译器层面会有一个优化机制来识别 inline constructors, 提供一个 member-by-member 的常量指定操作</span>
<span class="token comment">// 被附加上 Point 的默认构造函数内联扩展</span>
<span class="token punctuation">&#123;</span>
    Point local<span class="token punctuation">;</span>
    local<span class="token punctuation">.</span>x_ <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
    local<span class="token punctuation">.</span>y_ <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 如果在堆上分配一个 Point 实例对象</span>
<span class="token punctuation">&#123;</span>
    Point <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token keyword">new</span> Point<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//  C++ 伪代码</span>
<span class="token punctuation">&#123;</span>
    Point <span class="token operator">*</span> heap <span class="token operator">=</span> <span class="token function">__new</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>Point<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>heap <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        heap<span class="token operator">-></span><span class="token class-name">Point</span><span class="token double-colon punctuation">::</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 因为没有明确地提供一个 析构 函数实体</span>
<span class="token comment">// 不会调用析构</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> heap<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-item-content" id="无继承关系下的构造情况-3"><p>因为一个类如果定义了虚函数，则每个实例化对象就会要多拥有 一个指向 虚函数表的 vptr，产生膨胀，例子中 Point 的构造函数也会被编译器处理成：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Point<span class="token operator">*</span> <span class="token class-name">Point</span><span class="token double-colon punctuation">::</span><span class="token function">Point</span> <span class="token punctuation">(</span>Point <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 设定 object 的 virtual table pointer （vptr）</span>
    <span class="token keyword">this</span><span class="token operator">-></span>__vptr_Point <span class="token operator">=</span> __vtpr_point<span class="token punctuation">;</span>
    
    <span class="token keyword">this</span><span class="token operator">-></span>x_ <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>y_ <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>



<p>继承体系下，构造的顺序是先从继承链上的最上层的基类依次往下调用派生类的构造函数来完成。</p>
<br/>

<h3 id="复制语义学"><a href="#复制语义学" class="headerlink" title="复制语义学"></a>复制语义学</h3><p>当我们设计一个 class，我们可以指定种关于复制构造的选择：</p>
<p><code>1、什么都不做，使用默认复制构造。</code></p>
<p><code>2、提供一个显式的 拷贝赋值 operator。</code></p>
<p><code>3、明确拒绝对象给另一个对象的复制构造行为。</code></p>
<p>如果一个类已经有了浅拷贝（bitwise copy）语意，隐式拷贝赋值操作符（copy assignment operator）被视为无效，所以一个类会在如下四种情况表现出深拷贝（memberwise copy）语意：</p>
<p><code>1、当一个 class 内带一个 成员对象，成员对象所属类本身有一个拷贝赋值操作符时。</code></p>
<p><code>2、当一个 class 的基类有一个拷贝赋值操作符时。</code></p>
<p><code>3、当一个 class 声明了任何的 virtual functions（一定不能拷贝右端 class 对象的 vptr 地址，因为可能是一个 继承类对象）。</code></p>
<p><code>4、当一个 class 继承自一个虚基类时（不论 虚基类有没有 copy operator）。</code></p>
<p><strong>尽量不要允许一个虚基类的拷贝操作！！！</strong></p>
<br/>

<h3 id="析构语义学"><a href="#析构语义学" class="headerlink" title="析构语义学"></a>析构语义学</h3><p>析构函数的执行顺序和构造函数的相反：</p>
<p><code>1、当前 class 实例化对象的析构首先被执行。</code></p>
<p><code>2、如果 class 中拥有多个成员对象，成员对象们拥有析构函数，那么它们会以其声明顺序的相反顺序被调用。</code></p>
<p><code>3、如果 class 实例化对象内带一个 vptr，则会被重新设定，指向适当的基类 虚函数表。</code></p>
<p><code>读者注：3说明了为什么基类定义了虚析构函数，在形如 Base* p = new Derived() 时， delete p； 后可以调用到派生类的析构函数，因为 vptr 会被依次调整，找到虚函数表中，各个继承链中虚析构函数来调用。只要基类定义了虚析构函数，继承类的析构函数不管加不加 virtual 关键字，都是虚函数，都会出现在 vtable 中。</code></p>
<br/>

<h2 id="执行期语义学（Runtime-Semantics）"><a href="#执行期语义学（Runtime-Semantics）" class="headerlink" title="执行期语义学（Runtime Semantics）"></a>执行期语义学（Runtime Semantics）</h2><p><code>本章主要讨论程序执行期发生的转换、</code></p>
<br/>

<h2 id="站在对象模型的类端（On-the-Cusp-of-the-Object-Model）"><a href="#站在对象模型的类端（On-the-Cusp-of-the-Object-Model）" class="headerlink" title="站在对象模型的类端（On the Cusp of the Object Model）"></a>站在对象模型的类端（On the Cusp of the Object Model）</h2>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++ 对象模型</tag>
        <tag>拆书系列</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 网络库 Asio</title>
    <url>/2022/07/13/C++%20%E5%B9%B6%E5%8F%91/Asio/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
        <category>C++ Network</category>
      </categories>
      <tags>
        <tag>Asio</tag>
        <tag>C++ Network</tag>
        <tag>C++ 并发</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 并发编程之C++11</title>
    <url>/2022/07/13/C++%20%E5%B9%B6%E5%8F%91/Concurrency%20in%20C++11/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>C++ Concurrency</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 并发编程之C++14</title>
    <url>/2022/07/13/C++%20%E5%B9%B6%E5%8F%91/Concurrency%20in%20C++14/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>C++ Concurrency</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 并发编程之C++17</title>
    <url>/2022/07/13/C++%20%E5%B9%B6%E5%8F%91/Concurrency%20in%20C++17/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>C++ Concurrency</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 并发编程之C++20</title>
    <url>/2022/07/13/C++%20%E5%B9%B6%E5%8F%91/Concurrency%20in%20C++20/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
        <category>C++ Network</category>
      </categories>
      <tags>
        <tag>C++ Concurrency</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Alibaba开源库 yalantinglibs</title>
    <url>/2022/07/13/C++%20%E5%B9%B6%E5%8F%91/yalantinglibs/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
        <category>C++ Network</category>
      </categories>
      <tags>
        <tag>C++ Network</tag>
        <tag>C++ 并发</tag>
        <tag>C++20</tag>
      </tags>
  </entry>
  <entry>
    <title>C++17 新特性</title>
    <url>/2021/05/08/C++%20%E6%96%B0%E7%89%B9%E6%80%A7/C++17%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="C-17-新特性"><a href="#C-17-新特性" class="headerlink" title="C++17 新特性"></a>C++17 新特性</h1><p><code>本篇章主要是根据:</code></p>
<p>《C++17 STL Cookbook》以及 <a href="https://dl.acm.org/doi/10.1145/3386320">https://dl.acm.org/doi/10.1145/3386320</a> 中，Bjarne Stroustrup 对 C++ 特性文章 《Thriving in a crowded and changing world: C++ 2006–2020》 的阐述。</p>
<br/>

<h2 id="Class-template-argument-deduction（类模板参数推导）"><a href="#Class-template-argument-deduction（类模板参数推导）" class="headerlink" title="Class template argument deduction（类模板参数推导）"></a><strong>Class template argument deduction（类模板参数推导）</strong></h2><p><code>C++17 能让 [编译器] 自动的从所调用的构造函数，推导出模板类型。</code></p>
<p><code>std::make_shared 、std::make_unique、std::make_pair、std::make_tuple 这些工厂函数在 C++17中过时了。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// C++17 之前</span>
std<span class="token double-colon punctuation">::</span>pair <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">></span> <span class="token function">my_pair</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span> <span class="token function">my_tuple</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">12.3</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// C++17</span>
std<span class="token double-colon punctuation">::</span>pair <span class="token function">my_pair</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>tuple <span class="token function">my_tuple</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">12.3</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>当然，还存在一些不能依赖类型推导的情况，在此例子开始之前，先引入模板中推导指引的概念。</code></p>
<p><strong><code>[注]：下面涉及到的 推导指引（Deduction Guides）的内容，详情可参考《C++ Template snd Edition》--David Vandevoorde, Nocolai M, Josuttis, Douglas Gregor.第二章模板类型推到关于 Deduction Guides 的介绍。</code></strong></p>
<p><code>推导指引：提供额外的模板参数推断规则，或者修正已有的模板参数推断规则。</code></p>
<p><code>比如，你可以定义，当传入一个 C 风格字符串时，用 std::string 实例化 Stack 模板类：</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> pdfCore <span class="token punctuation">&#123;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>vecotr<span class="token operator">&lt;</span>T<span class="token operator">></span> elements_<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Stack</span><span class="token punctuation">(</span>T es<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">elements_</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 指引语句必须出现在和模板类定义的同一个作用域或者 namespace 里</span>
<span class="token function">Stack</span><span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token operator">-></span> Stack<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// ->后面的类型被称为 "guided type"</span>

<span class="token punctuation">&#125;</span> <span class="token comment">// namespace pdfCore</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>不能依赖类型推导的情况：</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span></span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>

<span class="token keyword">class</span> <span class="token class-name">Sum</span> <span class="token punctuation">&#123;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// 实例化模板的时候，不显式指定，由编译器推导</span>
    T value_<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数接受任意数量参数，并想加起来赋给 成员 value_</span>
    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span>
    <span class="token function">Sum</span><span class="token punctuation">(</span>Ts<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token operator">:</span> value_ <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>values <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 推导指引（Deduction Guides），告诉编译器用 std::common_type_t 的特性，</span>
<span class="token comment">// 能找到适合所有值的共同类型</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span>
<span class="token function">Sum</span><span class="token punctuation">(</span>Ts<span class="token operator">&amp;&amp;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ts<span class="token punctuation">)</span> <span class="token operator">-></span> Sum<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>common_type_t<span class="token operator">&lt;</span>Ts<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 不同类型参数</span>
    Sum value <span class="token punctuation">&#123;</span> <span class="token number">1u</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4.0f</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>value_<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// std::string 和C 风格字符串</span>
    Sum str <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"World!"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>value_<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./default_deduction 
<span class="token number">10</span>
Hello World<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<br/>

<br/>

<h2 id="Fold-expressions-（折叠表达式）"><a href="#Fold-expressions-（折叠表达式）" class="headerlink" title="Fold expressions （折叠表达式）"></a><strong>Fold expressions （折叠表达式）</strong></h2><table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left"><strong>语法</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">一元右折叠</td>
<td align="left">( <em><code>形参包 op ...</code></em> )</td>
</tr>
<tr>
<td align="left">一元左折叠</td>
<td align="left">( <em><code>... op 形参包</code></em> )</td>
</tr>
<tr>
<td align="left">二元右折叠</td>
<td align="left">( <em><code>形参包 op ... op 初值</code></em> )</td>
</tr>
<tr>
<td align="left">二元左折叠</td>
<td align="left">( <em><code>初值 op ... op 形参包</code></em> )</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><em>op</em></th>
<th>-</th>
<th>任何下列 32 个<em>二元</em>运算符之一：+ - * &#x2F; % ^ &amp; | &#x3D; &lt; &gt; &lt;&lt; &gt;&gt; +&#x3D; -&#x3D; <em>&#x3D; &#x2F;&#x3D; %&#x3D; ^&#x3D; &amp;&#x3D; |&#x3D; &lt;&lt;&#x3D; &gt;&gt;&#x3D; &#x3D;&#x3D; !&#x3D; &lt;&#x3D; &gt;&#x3D; &amp;&amp; || , .</em> -&gt;*。在二元折叠中，两个 <em>op</em> 必须相同。</th>
</tr>
</thead>
<tbody><tr>
<td><em>形参包</em></td>
<td>-</td>
<td>含未展开的<a href="https://zh.cppreference.com/w/cpp/language/parameter_pack">形参包</a>且其顶层不含有<a href="https://zh.cppreference.com/w/cpp/language/operator_precedence">优先级</a>低于转型（正式而言，是 <em>转型表达式</em>）的运算符的表达式</td>
</tr>
<tr>
<td><em>初值</em></td>
<td>-</td>
<td>不含未展开的<a href="https://zh.cppreference.com/w/cpp/language/parameter_pack">形参包</a>且其顶层不含有<a href="https://zh.cppreference.com/w/cpp/language/operator_precedence">优先级</a>低于转型（正式而言，是 <em>转型表达式</em>）的运算符的表达式</td>
</tr>
</tbody></table>
<p><strong><code>注意开与闭括号是折叠表达式的一部分。</code></strong></p>
<p><code>参数包的位置即代表左折叠 (ts + ...) 还是右折叠 (... + ts)。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">STR</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>string <span class="token punctuation">&#123;</span>str<span class="token punctuation">&#125;</span></span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span>
<span class="token keyword">auto</span> <span class="token function">Add</span><span class="token punctuation">(</span>Ts <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> <span class="token punctuation">(</span>ts <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">int</span> add_int <span class="token operator">=</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">LOG</span><span class="token punctuation">(</span>add_int<span class="token punctuation">)</span><span class="token punctuation">;</span>
 std<span class="token double-colon punctuation">::</span>string result <span class="token operator">=</span> <span class="token function">Add</span><span class="token punctuation">(</span> <span class="token function">STR</span><span class="token punctuation">(</span><span class="token string">"how "</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">STR</span><span class="token punctuation">(</span><span class="token string">"are "</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">STR</span><span class="token punctuation">(</span><span class="token string">"you "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./fold_add 
<span class="token number">15</span>
how  are you <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p><code>有了折叠表达式，类型如下的例子功能实现变得简洁许多：</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>


<span class="token comment">// 统计 string / vector / set / list array 等容器中，</span>
<span class="token comment">// 包含某些元素的个数情况</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span>
<span class="token keyword">auto</span> <span class="token function">CountContains</span><span class="token punctuation">(</span><span class="token keyword">const</span> R<span class="token operator">&amp;</span> container<span class="token punctuation">,</span> Ts <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">count</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">end</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">,</span> ts<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 对 set 实现批量插入功能</span>
<span class="token comment">// 当参数包的某个元素插入失败，根据 &amp;&amp; 远算符的短路特性，</span>
<span class="token comment">// 会总之插入剩余元素</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span>
<span class="token keyword">bool</span> <span class="token function">InsertAll</span><span class="token punctuation">(</span>R <span class="token operator">&amp;</span>set<span class="token punctuation">,</span> Ts <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">.</span>second <span class="token operator">&amp;&amp;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 检查给定的多个变量是否在某个范围内</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span>
<span class="token keyword">bool</span> <span class="token function">IsAllWithin</span><span class="token punctuation">(</span>R min<span class="token punctuation">,</span> R max<span class="token punctuation">,</span> Ts <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>min <span class="token operator">&lt;=</span> ts <span class="token operator">&amp;&amp;</span> ts <span class="token operator">&lt;=</span> max<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 std<span class="token double-colon punctuation">::</span>string str <span class="token punctuation">&#123;</span><span class="token string">"aabbccddeeffgg"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count_abc <span class="token operator">=</span> <span class="token function">CountContains</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span>count_abc<span class="token punctuation">)</span><span class="token punctuation">;</span>

 std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> my_set <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">InsertAll</span><span class="token punctuation">(</span>my_set<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"set 批量插入元素后 ： "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>my_set<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> my_set<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">LOG</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./fold_expressions 
<span class="token number">6</span>
<span class="token builtin class-name">set</span> 批量插入元素后 ： 
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span>
<span class="token number">5</span>
<span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<br/>

<br/>

 

<br/>

<br/>

<h2 id="Structured-bindings-（结构化绑定）"><a href="#Structured-bindings-（结构化绑定）" class="headerlink" title="Structured bindings （结构化绑定）"></a><strong>Structured bindings （结构化绑定）</strong></h2><p><code>auto [var1, var2, ...] = &lt; pair, tuple, struct, 固定长度数组&gt;</code></p>
<p><strong><code>注意个数要匹配。</code></strong></p>
<p><code>和 std::tie 相比，std::tie 进行赋值的时候，所有变量需要提前定义，但是可以使用 std::ignore 作为虚拟变量。所以，要根据实际需求选择使用。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token function">Float2Int</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

std<span class="token double-colon punctuation">::</span>tuple <span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">></span> <span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_tuple</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"李丽"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token char">'S'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//打印信息</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
 <span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token punctuation">&#123;</span>
 std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>
 <span class="token keyword">int</span> age<span class="token punctuation">;</span>
 <span class="token keyword">char</span> grade<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">const</span> <span class="token keyword">auto</span> result <span class="token operator">=</span> <span class="token function">Float2Int</span><span class="token punctuation">(</span><span class="token number">1.2f</span><span class="token punctuation">,</span> <span class="token number">2.3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pair 形式: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>first<span class="token punctuation">,</span> result<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">auto</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Float2Int</span><span class="token punctuation">(</span><span class="token number">13.0f</span><span class="token punctuation">,</span> <span class="token number">16.05f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pair 结构化绑定: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"tuple 结构化绑定: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// 初始化一个结构体列表</span>
 std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>student<span class="token operator">></span> class_one <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
     <span class="token punctuation">&#123;</span><span class="token string">"Xiaoming"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
     <span class="token punctuation">&#123;</span><span class="token string">"Xiaohong"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token char">'S'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
     <span class="token punctuation">&#123;</span><span class="token string">"DaWei"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token char">'B'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"结构化绑定的方式遍历列表: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// 可以是 auto, const auto, const auto&amp;, auto&amp;&amp;，适当使用引用，减少不必要的拷贝。 </span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade<span class="token punctuation">]</span> <span class="token operator">:</span> class_one<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token function">log</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./structure_bind 
pair 形式: 
<span class="token number">1</span>
<span class="token number">2</span>
pair 结构化绑定: 
<span class="token number">13</span>
<span class="token number">16</span>
tuple 结构化绑定: 
李丽
<span class="token number">18</span>
S
结构化绑定的方式遍历列表: 
Xiaoming
<span class="token number">21</span>
A
Xiaohong
<span class="token number">20</span>
S
DaWei
<span class="token number">22</span>
B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="将变量作用于限制在-if-和-switch-内"><a href="#将变量作用于限制在-if-和-switch-内" class="headerlink" title="将变量作用于限制在 if 和 switch 内"></a><strong>将变量作用于限制在 if 和 switch 内</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">></span> mapper <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
     <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'1'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
     <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token char">'2'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
     <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token char">'3'</span><span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token function">result</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> result <span class="token operator">!=</span> mapper<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"map 存在 key (3)."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>


 <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">case</span> <span class="token char">'a'</span><span class="token operator">:</span> 
         std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"左转"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
         <span class="token keyword">break</span><span class="token punctuation">;</span>
     <span class="token keyword">case</span> <span class="token char">'d'</span><span class="token operator">:</span> 
         std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"右转"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
         <span class="token keyword">break</span><span class="token punctuation">;</span>
     <span class="token keyword">case</span> <span class="token char">'w'</span><span class="token operator">:</span> 
         std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"前进"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
         <span class="token keyword">break</span><span class="token punctuation">;</span>
     <span class="token keyword">case</span> <span class="token char">'s'</span><span class="token operator">:</span> 
         std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"后退"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
         <span class="token keyword">break</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./condition_in_if 
map 存在 key <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>.
w
前进<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p><code>平时还可以这么用：</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>lock_guard <span class="token function">locker</span><span class="token punctuation">(</span>my_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">"符合条件"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// do ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token function">share_p</span> <span class="token punctuation">(</span>weak_p<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>share_p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// share 对象依然存在， do...</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 对象不存在，share_p 为 nullptr</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="variant"><a href="#variant" class="headerlink" title="variant"></a><strong>variant</strong></h2><p><strong><code>variant&lt;T, U&gt; :  holds a T or a U</code></strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;variant></span></span>

<span class="token comment">// 定义具有3个重载operator() 的 functor</span>
<span class="token keyword">struct</span> <span class="token class-name">SOutput</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span><span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

 <span class="token comment">// 第一可以是int/double/string的 vriant y</span>
 std<span class="token double-colon punctuation">::</span>variant<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> y<span class="token punctuation">;</span>

    <span class="token comment">// 赋值为 int</span>
    y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
     std<span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token function">SOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 赋值为 double</span>
    y <span class="token operator">=</span> <span class="token number">23.0</span><span class="token punctuation">;</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token function">SOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 赋值为 string</span>
    y <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token function">SOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 可以使用 std::get获取值，但是要对应上，比如现在y是string</span>
    <span class="token comment">// 类型不对会抛出异常 std::bad_variant_access e</span>
 std<span class="token double-colon punctuation">::</span>string str <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span></span></span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

 <span class="token comment">// 也可以用 std::get_if</span>
    <span class="token keyword">int</span><span class="token operator">*</span> value <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get_if</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"类型不匹配！"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"正确取值："</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./2_variant 
<span class="token number">1</span>
<span class="token number">23</span>
hello
hello
类型不匹配！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;variant></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span> 
<span class="token keyword">struct</span> <span class="token class-name">CustomOutput</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">Ts</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">using</span> <span class="token class-name">Ts</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span> 
<span class="token function">CustomOutput</span><span class="token punctuation">(</span> Ts <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">-></span> CustomOutput <span class="token operator">&lt;</span> Ts <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">></span><span class="token punctuation">;</span>


<span class="token keyword">void</span> <span class="token function">Use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//  定义 variant 类型的 vector</span>
    <span class="token keyword">using</span> var_t <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>variant <span class="token operator">&lt;</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">></span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>var_t<span class="token operator">></span> vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20L</span><span class="token punctuation">,</span> <span class="token number">30.40</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    CustomOutput out_put <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 输出 int, long</span>
        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">auto</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> arg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token comment">// 输出 double</span>
        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">double</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> arg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token comment">// 输出 string</span>
        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> arg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">// 遍历</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span> var <span class="token operator">:</span> vec <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std <span class="token double-colon punctuation">::</span> <span class="token function">visit</span><span class="token punctuation">(</span>out_put<span class="token punctuation">,</span> var <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./variant 
<span class="token number">10</span>
<span class="token number">20</span>
<span class="token number">30.4</span>
hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="optional"><a href="#optional" class="headerlink" title="optional"></a><strong>optional</strong></h2><p><strong><code>optional&lt;T&gt; : holds a T or nothing</code></strong></p>
<blockquote>
<pre class="line-numbers language-Cpp" data-language="Cpp"><code class="language-Cpp">optional &lt; int &gt; var1 &#x3D; 7;
auto x1 &#x3D; * var1 ;       &#x2F;&#x2F; 取值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</blockquote>
<br/>

<br/>

<h2 id="any"><a href="#any" class="headerlink" title="any"></a><strong>any</strong></h2><p><strong><code>any : holds any type</code></strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">any var3 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> x3 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">any_cast</span> <span class="token generic class-name"><span class="token operator">&lt;</span> <span class="token keyword">int</span> <span class="token operator">></span></span></span><span class="token punctuation">(</span> var3 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="的初始化规则"><a href="#的初始化规则" class="headerlink" title="{} 的初始化规则"></a><strong>{} 的初始化规则</strong></h2><p><strong><code>不允许使用：auto var &#123;v1, v2, v3, ...&#125;</code></strong></p>
<p><strong><code>相比另一种合法使用的方式：auto var = &#123;v1, v2, v3, ...&#125; 因为这会调用std::initializer_list&lt;T&gt;进行初始化。</code></strong></p>
<p><strong><code>其中，v1, v2, v3, ... 必须是同等类型 T。</code></strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 对于初始化，&#123;&#125; 与 () 调用构造函数初始化的方式，</span>
<span class="token comment">// 不同点在于 &#123;&#125; 没有类型的隐式转换</span>
<span class="token keyword">auto</span> <span class="token function">var1</span><span class="token punctuation">(</span><span class="token number">3.00f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> var2<span class="token punctuation">&#123;</span><span class="token number">3.0f</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span>  <span class="token keyword">typeid</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>enndl<span class="token punctuation">;</span> <span class="token comment">// i</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>enndl<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment">// f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>对于只支持 C++11、C++14 的编译器，auto x&#123; 123 &#125; 的类型可能会推导成整型，也可能会推导成std::initializer_list&lt;int&gt;.</code></p>
<p><code>所以会存在可移植性的问题。</code></p>
<br/>

<br/>

<h2 id="inline-variables-（内联变量）"><a href="#inline-variables-（内联变量）" class="headerlink" title="inline variables （内联变量）"></a><strong>inline variables （内联变量）</strong></h2><p><code>解决对于库文件 .hpp 中 定义了一个静态变量，这个头文件被多个 .cpp包含后链接阶段报错问题。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// xxx.hpp</span>
<span class="token keyword">class</span> <span class="token class-name">Rect</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// yyy.cpp </span>
include <span class="token string">"xxx.hpp"</span>

<span class="token comment">// zzz.cpp</span>
include <span class="token string">"xxx.hpp"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>C++17 之前为了修复类似的问题， 会这么做：</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// xxx.hpp</span>
<span class="token keyword">class</span> <span class="token class-name">Rect</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">GetX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> x<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>为了修复这个问题，添加 inline 关键字，从而避免符号重定义问题：</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// xxx.hpp</span>
<span class="token keyword">class</span> <span class="token class-name">Rect</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="constexpr-if"><a href="#constexpr-if" class="headerlink" title="constexpr-if"></a><strong>constexpr-if</strong></h2><p><code>constexpr-if 的工作机制与传统的 if-else 类似。不同点在于，constexpr-if 是编译时进行判断，if-else 是运行时判断。</code></p>
<p><code>使用 constexpr-if 的代码编译完成后，程序的这一部分代码不会有分支存在，这种方式其实类似于 #if-#else的预编译方式进行宏替换，但是，constexpr-if 更优雅。</code></p>
<p><strong><code>正如 《C++17 in Detail》里所说，All the complicated syntax of std::enable_if went away..., if constexpr evaluates the condition and only one block will be compiled.</code></strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> std <span class="token double-colon punctuation">::</span> cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span></span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">Addable</span> <span class="token punctuation">&#123;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    T val_<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Addable</span><span class="token punctuation">(</span>T v<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val_</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>

    <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> val_<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">U</span><span class="token operator">></span>
    T <span class="token function">add</span><span class="token punctuation">(</span>U x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span>  <span class="token keyword">constexpr</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>U<span class="token operator">>></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
            <span class="token keyword">auto</span> copy <span class="token punctuation">&#123;</span>val_<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> item <span class="token operator">:</span> copy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                item <span class="token operator">+=</span> x<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> copy<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> val_ <span class="token operator">+</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 实例化不同类型的 Addable 对象，调用加法函数。</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span>Addable<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">add</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Addable<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> iv <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    iv<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">add</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> item <span class="token operator">:</span> iv<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">LOG</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./constexpr_if 
<span class="token number">3</span>
<span class="token number">1</span>
<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++17</tag>
        <tag>Modern C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++20 新特性</title>
    <url>/2021/05/08/C++%20%E6%96%B0%E7%89%B9%E6%80%A7/C++20%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++20</tag>
        <tag>Modern C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++1x 新特性（一）语言可用性的强化</title>
    <url>/2021/04/08/C++%20%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88%E4%B8%80%EF%BC%89%E8%AF%AD%E8%A8%80%E5%8F%AF%E7%94%A8%E6%80%A7%E7%9A%84%E5%BC%BA%E5%8C%96/</url>
    <content><![CDATA[<h1 id="C-1x-新特性（一）语言可用性的强化"><a href="#C-1x-新特性（一）语言可用性的强化" class="headerlink" title="C++1x 新特性（一）语言可用性的强化"></a>C++1x 新特性（一）语言可用性的强化</h1><p><code>本系列主要阐述依据：</code></p>
<p>[<a href="https://github.com/changkun/modern-cpp-tutorial]">https://github.com/changkun/modern-cpp-tutorial]</a>: 《Modern C++ Tutorial: C++11&#x2F;14&#x2F;17&#x2F;20 On the Fly》</p>
<br/>

<h2 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a><strong>nullptr</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>

<span class="token keyword">class</span> <span class="token class-name">MyTestClass</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
   <span class="token function">MyTestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
   <span class="token operator">~</span><span class="token function">MyTestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>MyTestClass<span class="token operator">></span> test_c <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>MyTestClass<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>test_c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> 
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>test_c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>nullptr_t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./test_nullptr 
<span class="token number">8</span>
<span class="token number">16</span>
St10shared_ptrI11MyTestClassE
Dn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a><strong>auto</strong></h2><p>​	<strong><code>注： 不能推导数组类型。</code></strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">auto</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token comment">// 'auto' type cannot appear in top-level array typeC/C++</span>
  <span class="token comment">// auto auto_arr_2[10] = arr;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="constexpr"><a href="#constexpr" class="headerlink" title="constexpr"></a><strong>constexpr</strong></h2><p><code>(1) 拓宽「常量表达式」的范围。</code></p>
<p><code>(2)「显式『要求』表达式编译时求值」。告诉编译器 [我认为我是编译器常量]， 让编译器在需要编译器常量的语义处 [核实我说的是不是真的]。把它放到变量定义前，那么用来初始化这个变量的表达式「必须」是常量表达式，否则报错。</code></p>
<p>参考：<a href="https://www.zhihu.com/question/274323507">https://www.zhihu.com/question/274323507</a></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEN</span> <span class="token expression"><span class="token number">10</span></span></span>

<span class="token keyword">const</span> <span class="token keyword">int</span> kLengh <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

size_t <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 修饰常函数</span>
<span class="token keyword">constexpr</span> size_t <span class="token function">constexpr_length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">constexpr</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token function">arr_1</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token char">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token function">arr_2</span><span class="token punctuation">(</span>LEN<span class="token punctuation">,</span> <span class="token char">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token function">arr_3</span><span class="token punctuation">(</span>kLengh<span class="token punctuation">,</span> <span class="token char">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// expression must have a constant value -- cannot call non-constexpr</span>
    <span class="token comment">// std::array&lt;int, length()> arr_4;</span>

    std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token function">constexpr_length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> arr_5<span class="token punctuation">&#123;</span> <span class="token char">'Y'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 比如用来简化元函数template&lt;class U, class V></span>
<span class="token keyword">constexpr</span> <span class="token keyword">bool</span> is_same_v <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>is_same<span class="token operator">&lt;</span>U<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">;</span>
<span class="token comment">// 调用的时候可以直接</span>
<span class="token keyword">auto</span> x <span class="token operator">=</span> is_same_v<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 用于元编程的常成员：template&lt;class U, class V></span>
<span class="token keyword">struct</span> <span class="token class-name">is_same</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">is_same</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 这样就可以通过</span>
is_same<span class="token operator">&lt;</span>X<span class="token punctuation">,</span> X<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a><strong>decltype</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token comment">// 传统C++ 模板的错误写法</span>
<span class="token comment">// template &lt;typename R, typename T, typename U></span>
<span class="token comment">// R add(T t, U u) &#123;</span>
<span class="token comment">//     return t + u;</span>
<span class="token comment">// &#125;</span>

<span class="token comment">// C++11 称之为尾返回类型（trailing return type）,利用 auto 关键字将返回值后置</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">U</span><span class="token operator">></span>
<span class="token keyword">auto</span> <span class="token function">add</span> <span class="token punctuation">(</span>T t<span class="token punctuation">,</span> U u<span class="token punctuation">)</span> <span class="token comment">/*-> decltype(t + u) //C++14开始自动推导*/</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> t <span class="token operator">+</span> u<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 	<span class="token keyword">auto</span> result <span class="token operator">=</span> <span class="token generic-function"><span class="token function">add</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">5.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
 	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./decltype 
d
<span class="token number">10.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="默认参数模板"><a href="#默认参数模板" class="headerlink" title="默认参数模板"></a><strong>默认参数模板</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">U</span> <span class="token operator">=</span> <span class="token keyword">float</span><span class="token operator">></span>
<span class="token keyword">auto</span> <span class="token function">Add</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> U u<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 	<span class="token keyword">return</span> t <span class="token operator">+</span> u<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="委托构造"><a href="#委托构造" class="headerlink" title="委托构造"></a><strong>委托构造</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token comment">// 委托构造</span>
<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     v1_ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     v2_ <span class="token operator">=</span> value<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">void</span> <span class="token function">tell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1: "</span> <span class="token operator">&lt;&lt;</span> v1_ <span class="token operator">&lt;&lt;</span> <span class="token string">"    v2: "</span><span class="token operator">&lt;&lt;</span> v2_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
     <span class="token keyword">int</span> v1_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token keyword">int</span> v2_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     Base <span class="token function">base</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     base<span class="token punctuation">.</span><span class="token function">tell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./delegating_constructor 
v1: <span class="token number">1</span>    v2: <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p><br/><br/></p>
<h2 id="显示禁用默认函数"><a href="#显示禁用默认函数" class="headerlink" title="显示禁用默认函数"></a><strong>显示禁用默认函数</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 显示禁用默认函数</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">class</span> <span class="token class-name">Magic</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
   <span class="token function">Magic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span> <span class="token comment">// 禁用编译器生成的构造</span>
   Magic<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Magic<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
   <span class="token function">Magic</span><span class="token punctuation">(</span><span class="token keyword">const</span> Magic<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

   <span class="token function">Magic</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Not default constructor."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
         e_ <span class="token operator">=</span> a<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">void</span> <span class="token function">tell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> e_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
   <span class="token keyword">int</span> e_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// the default constructor of "Inequality" </span>
 <span class="token comment">// cannot be referenced</span>
 <span class="token comment">// -- it is a deleted function</span>
 <span class="token comment">//   Inequality m1;</span>
 <span class="token comment">//   m1.tell();</span>

   Magic <span class="token function">m2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   m2<span class="token punctuation">.</span><span class="token function">tell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// function "Magic::Magic(const Magic &amp;other)" </span>
 <span class="token comment">// cannot be referenced</span>
 <span class="token comment">//  -- it is a deleted function</span>
 <span class="token comment">//   Magic m3 = m2;</span>
 <span class="token comment">//   m3.tell();</span>

 <span class="token comment">// function "Magic::operator=(const Magic &amp;)" </span>
 <span class="token comment">// cannot be referenced </span>
 <span class="token comment">// -- it is a deleted function</span>
 <span class="token comment">//   Magic m4(4);</span>
 <span class="token comment">//   m4 = m2;</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./delete_default 
Not default constructor.
<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p><br/><br/></p>
<h2 id="继承构造"><a href="#继承构造" class="headerlink" title="继承构造"></a><strong>继承构造</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//继承构造</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
     <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         v1_ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
     <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         v2_ <span class="token operator">=</span> value<span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>

     <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">tell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1: "</span> <span class="token operator">&lt;&lt;</span> v1_ <span class="token operator">&lt;&lt;</span> <span class="token string">"    v2: "</span><span class="token operator">&lt;&lt;</span> v2_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> 
     <span class="token punctuation">&#125;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
     <span class="token keyword">int</span> v1_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token keyword">int</span> v2_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 构造函数如果需要继承是需要将参数一一传递的，这样会效率低下</span>
<span class="token comment">// using 引入继承构造</span>
<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 	<span class="token keyword">using</span> Base<span class="token double-colon punctuation">::</span>Base<span class="token punctuation">;</span> <span class="token comment">// 继承构造</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Derived <span class="token function">derived</span><span class="token punctuation">(</span><span class="token number">2222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    derived<span class="token punctuation">.</span><span class="token function">tell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./derive_constructor 
v1: <span class="token number">1</span>    v2: <span class="token number">2222</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="显式虚函数重载"><a href="#显式虚函数重载" class="headerlink" title="显式虚函数重载"></a><strong>显式虚函数重载</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">struct</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">final</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Derived_1</span> <span class="token keyword">final</span> <span class="token operator">:</span> <span class="token keyword">public</span> Base <span class="token punctuation">&#123;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 合法</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"override foo: "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// a 'final' class type cannot be used as a base class</span>
<span class="token comment">// struct Derived_2 : Derived_1&#123;</span>

<span class="token comment">// &#125;;</span>

<span class="token keyword">struct</span> <span class="token class-name">Derived_3</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 非法</span>
 <span class="token comment">// virtual void fool() override &#123;</span>

 <span class="token comment">// &#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="std-initializer-list"><a href="#std-initializer-list" class="headerlink" title="std::initializer_list"></a><strong>std::initializer_list<T></strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;initializer_list></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>

<span class="token keyword">class</span> <span class="token class-name">Magic</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Magic</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">list_</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>list_<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list_<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> item  <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> list_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     Magic magic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
     magic<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./initializer_list 
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span>
<span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="enum-class（强枚举类型）"><a href="#enum-class（强枚举类型）" class="headerlink" title="enum class（强枚举类型）"></a><strong>enum class（强枚举类型）</strong></h2><p>​		<code>参考 https://en.cppreference.com/w/cpp/language/enum</code><br>​		<code>参考 https://en.cppreference.com/w/cpp/types/underlying_type</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token comment">// 重载 operator&lt;&lt; 用来输出强类型枚举</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>enable_if<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>is_enum<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span> 
std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">></span><span class="token double-colon punctuation">::</span>type<span class="token operator">&amp;</span> stream<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> stream <span class="token operator">&lt;&lt;</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>underlying_type<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span>type<span class="token operator">></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">Param</span> <span class="token punctuation">&#123;</span>
     kValue1<span class="token punctuation">,</span> 
     kValue2<span class="token punctuation">,</span>
     kValue3 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>
     kValue4 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// no match for ‘operator==’ (operand types are ‘Param’ and ‘int’)</span>
    <span class="token comment">// if(Param::kValue1 == 0) &#123;</span>
    <span class="token comment">//     std::cout &lt;&lt; (int)Param::kValue1 &lt;&lt; std::endl;</span>
    <span class="token comment">// &#125;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>Param<span class="token double-colon punctuation">::</span>kValue3 <span class="token operator">==</span> Param<span class="token double-colon punctuation">::</span>kValue4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Param::kValue3 : "</span> <span class="token operator">&lt;&lt;</span> Param<span class="token double-colon punctuation">::</span>kValue3 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Param::kValue4 : "</span> <span class="token operator">&lt;&lt;</span> Param<span class="token double-colon punctuation">::</span>kValue4 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"It's really fucking Strong!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$./strong_enum 
Param::kValue3 <span class="token builtin class-name">:</span> <span class="token number">100</span>
Param::kValue4 <span class="token builtin class-name">:</span> <span class="token number">100</span>
It's really fucking Strong<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="模板增强"><a href="#模板增强" class="headerlink" title="模板增强"></a><strong>模板增强</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// template_out_file.hpp</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">U</span><span class="token operator">></span>
<span class="token keyword">auto</span> <span class="token function">ImOutsideTemplateAdd</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> U u<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">return</span> t <span class="token operator">+</span> u<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// template_emhance.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"template_out_file.hpp"</span></span>
<span class="token keyword">extern</span> <span class="token keyword">template</span> <span class="token keyword">auto</span> <span class="token generic-function"><span class="token function">ImOutsideTemplateAdd</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">ImOutsideTemplateAdd</span><span class="token punctuation">(</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">5.6</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="Variadic-Template（可变长模板）"><a href="#Variadic-Template（可变长模板）" class="headerlink" title="Variadic Template（可变长模板）"></a><strong>Variadic Template（可变长模板）</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>

<span class="token comment">// 参数可以为0</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">Magic</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 参数至少为1</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Required</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span> 
<span class="token keyword">class</span> <span class="token class-name">Magic_1</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>T info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> info <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">magic</span><span class="token punctuation">(</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>



<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">printf</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  	<span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 递归方式 解包</span>
<span class="token comment">// 至少有2个参数时会调用此模板，当只有2个参数时，最终会调用printf&lt;typename T>模板函数</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">printf</span><span class="token punctuation">(</span>T value<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 初始化列表展开 解包</span>
<span class="token comment">// C++14 tricky</span>
<span class="token comment">// 没有C++17之前都是这么干的：(void)std::initializer_list&lt;int>&#123; (func(u), 0)... &#125;;</span>
<span class="token comment">// 包展开语法：模式…，这里的模式是小括号中的部分。一个lambda表达式和value组成的逗号表达式</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">intializer_list_print</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// (1)</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">intializer_list_print</span><span class="token punctuation">(</span>T value<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
     <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span> <span class="token punctuation">(</span><span class="token function">intializer_list_print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// (2) Brace-enclosed initializers</span>
<span class="token comment">// 参考 https://en.cppreference.com/w/cpp/language/parameter_pack</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">intializer_list_print_2</span><span class="token punctuation">(</span>T value<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

 	<span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> args <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">// C++17 fold expression</span>
<span class="token comment">// 参照libcxx的</span>

<span class="token comment">// template &lt;class ..._Tp></span>
<span class="token comment">// _LIBCPP_INLINE_VISIBILITY</span>
<span class="token comment">// void __swallow(_Tp&amp;&amp;...) _NOEXCEPT &#123;&#125; </span>

<span class="token comment">// template &lt;class _Tuple></span>
<span class="token comment">//         _LIBCPP_INLINE_VISIBILITY</span>
<span class="token comment">//         typename enable_if</span>
<span class="token comment">//         &lt;</span>
<span class="token comment">//             __tuple_assignable&lt;_Tuple, tuple&lt;_Tp...> >::value,</span>
<span class="token comment">//             __tuple_impl&amp;</span>
<span class="token comment">//         >::type</span>
<span class="token comment">//         operator=(_Tuple&amp;&amp; __t) _NOEXCEPT_((__all&lt;is_nothrow_assignable&lt;_Tp&amp;, typename tuple_element&lt;_Indx,</span>
<span class="token comment">//                                        typename __make_tuple_types&lt;_Tuple>::type>::type>::value...>::value))</span>
<span class="token comment">//         &#123;</span>
<span class="token comment">//             __swallow(__tuple_leaf&lt;_Indx, _Tp>::operator=(_VSTD::forward&lt;typename tuple_element&lt;_Indx,</span>
<span class="token comment">//                                        typename __make_tuple_types&lt;_Tuple>::type>::type>(_VSTD::get&lt;_Indx>(__t)))...);</span>
<span class="token comment">//             return *this;</span>
<span class="token comment">//         &#125;</span>


<span class="token comment">// 所以可以类似：</span>
<span class="token comment">// C++17 fold exprssion 参考 https://en.cppreference.com/w/cpp/language/fold</span>
<span class="token comment">// __swallow(func(u)...);</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">cxx17_print</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">cxx17_print</span><span class="token punctuation">(</span>T value<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
 	<span class="token function">cxx17_print</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"递归方式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"初始化列表展开方式1："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">intializer_list_print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">1.1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"初始化列表展开方式2："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">intializer_list_print_2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">1.1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"C++17 fold expression:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">cxx17_print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">1.1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./variadic_template 
递归方式：
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">123</span>
<span class="token number">1.1</span>
初始化列表展开方式1：
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">123</span>
<span class="token number">1.1</span>
初始化列表展开方式2：
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">123</span>
<span class="token number">1.1</span>
C++17 <span class="token function">fold</span> expression:
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">123</span>
<span class="token number">1.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++17</tag>
        <tag>Modern C++</tag>
        <tag>C++11</tag>
        <tag>C++14</tag>
      </tags>
  </entry>
  <entry>
    <title>C++1x 新特性（三）对标准库的扩充</title>
    <url>/2021/04/10/C++%20%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E6%89%A9%E5%85%85/</url>
    <content><![CDATA[<h1 id="C-1x-新特性（三）对标准库的扩充"><a href="#C-1x-新特性（三）对标准库的扩充" class="headerlink" title="C++1x 新特性（三）对标准库的扩充"></a>C++1x 新特性（三）对标准库的扩充</h1><p><code>本系列主要阐述依据：</code></p>
<p>[<a href="https://github.com/changkun/modern-cpp-tutorial]">https://github.com/changkun/modern-cpp-tutorial]</a>: 《Modern C++ Tutorial: C++11&#x2F;14&#x2F;17&#x2F;20 On the Fly》</p>
<br/>

<h2 id="std-array"><a href="#std-array" class="headerlink" title="std::array"></a><strong>std::array</strong></h2><br/>

<p><em><strong>std::array 和 std::vector 的区别</strong></em></p>
<table>
<thead>
<tr>
<th align="center">std::array</th>
<th align="center">std::vector</th>
</tr>
</thead>
<tbody><tr>
<td align="center">栈内存</td>
<td align="center">堆内存</td>
</tr>
<tr>
<td align="center">灵活访问，更高性能</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">更现代</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">编译时会创建一个固定的数组</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">不能够隐式转成指针（注意！！！）</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>​                                                                  </p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>

<span class="token comment">// C风格的接口</span>
<span class="token keyword">void</span> <span class="token function">c_test</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">></span> arr_1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token comment">// 无法转换成 C 风格指针传递！</span>
  <span class="token comment">// no suitable conversion function from "std::array&lt;int, 5UL>" to "int *" exists</span>
  <span class="token comment">// c_test(arr_1, arr_1.size());</span>

  <span class="token comment">// struct std::array&lt;int, &lt;error-constant>></span>
  <span class="token comment">// int len = 5;</span>
  <span class="token keyword">constexpr</span> <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> len<span class="token operator">></span> arr_2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>arr_2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr_2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="std-forward-list"><a href="#std-forward-list" class="headerlink" title="std::forward_list"></a><strong>std::forward_list</strong></h2><table>
<thead>
<tr>
<th align="center">std::list</th>
<th align="center">std::forward_list</th>
</tr>
</thead>
<tbody><tr>
<td align="center">双向链表</td>
<td align="center">单链表</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">不支持随机访问， O(1)复杂度插入</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">唯一一个不提供size()的容器</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">不需要双向迭代时，更高的空间利用率</td>
</tr>
</tbody></table>
<br/>

<br/>                                                                                                                                                   

<h2 id="std-tuple"><a href="#std-tuple" class="headerlink" title="std::tuple"></a><strong>std::tuple</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/variant.hpp></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;variant></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

<span class="token comment">// 用于求取 tuple size</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">auto</span> <span class="token function">tuple_size</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> tpl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>tuple_size<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 借助 boost::variant 实现 </span>
<span class="token comment">// 参考 https://www.boost.org/doc/libs/1_75_0/doc/html/variant.html</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span>size_t n<span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
boost<span class="token double-colon punctuation">::</span>variant<span class="token operator">&lt;</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span> <span class="token function">_tuple_index</span><span class="token punctuation">(</span>size_t i<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>tuple<span class="token operator">&lt;</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span><span class="token operator">&amp;</span> tpl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>n<span class="token operator">></span></span></span><span class="token punctuation">(</span>tpl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>Args<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span><span class="token string">"越界！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> _tuple_index<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">n</span> <span class="token generic class-name"><span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>Args<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> tpl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 用于获取指定索引的 tuple 元素值</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
boost<span class="token double-colon punctuation">::</span>variant<span class="token operator">&lt;</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span> <span class="token function">tuple_index</span><span class="token punctuation">(</span>size_t i<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>tuple<span class="token operator">&lt;</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span><span class="token operator">&amp;</span> tpl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">return</span> <span class="token generic-function"><span class="token function">_tuple_index</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> tpl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token keyword">auto</span> student <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">make_tuple</span><span class="token punctuation">(</span><span class="token string">"Liming"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token char">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">constexpr</span> <span class="token keyword">int</span> i_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i_1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> i_2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">// std::get&lt;> 依赖的是编译期的常量</span>
<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"姓名： "</span> <span class="token operator">+</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>i_0<span class="token operator">></span></span></span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"年龄： "</span> <span class="token operator">+</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>i_1<span class="token operator">></span></span></span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"成绩： "</span> <span class="token operator">+</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>i_2<span class="token operator">></span></span></span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>
<span class="token keyword">char</span> grade<span class="token punctuation">;</span>

<span class="token comment">// 利用std::tie 进行元组拆包， std::ignore忽略某个元素</span>
std<span class="token double-colon punctuation">::</span><span class="token function">tie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>ignore<span class="token punctuation">,</span> grade<span class="token punctuation">)</span> <span class="token operator">=</span> student<span class="token punctuation">;</span>
<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"姓名： "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"成绩： "</span> <span class="token operator">+</span> grade<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 元组合并</span>
<span class="token keyword">auto</span> teacher <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">make_tuple</span><span class="token punctuation">(</span><span class="token string">"Miss Li"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> concat <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">tuple_cat</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 元组遍历</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token function">tuple_size</span><span class="token punctuation">(</span>concat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token function">tuple_index</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> concat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./std_tuple 
姓名： Liming
年龄： <span class="token number">18</span>
成绩： B
姓名： Liming
成绩： B
Liming
<span class="token number">18</span>
B
Miss Li
<span class="token number">25</span>
A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="std-unordered-map"><a href="#std-unordered-map" class="headerlink" title="std::unordered_map"></a><strong>std::unordered_map</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"容器类型： "</span> <span class="token operator">+</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"Key: "</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>first <span class="token operator">+</span> <span class="token string">"  Value: "</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 无序</span>
std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> unordered <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 
  <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 有序</span>
std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> ordered <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 
  <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token function">log</span><span class="token punctuation">(</span>unordered<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>ordered<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./std_unordered_map 
容器类型： St13unordered_mapIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4hashIiESt8equal_toIiESaISt4pairIKiS5_EEE
Key: <span class="token number">2</span>  Value: two
Key: <span class="token number">3</span>  Value: three
Key: <span class="token number">4</span>  Value: four
Key: <span class="token number">1</span>  Value: one
容器类型： St3mapIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIiESaISt4pairIKiS5_EEE
Key: <span class="token number">1</span>  Value: one
Key: <span class="token number">2</span>  Value: two
Key: <span class="token number">3</span>  Value: three
Key: <span class="token number">4</span>  Value: four<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="std-unordered-set"><a href="#std-unordered-set" class="headerlink" title="std::unordered_set"></a><strong>std::unordered_set</strong></h2><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">set</th>
<th align="center">unordered_set</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center">升序（默认）</td>
<td align="center">无序</td>
</tr>
<tr>
<td align="center">实现</td>
<td align="center">RB Tree</td>
<td align="center">Hash Table</td>
</tr>
<tr>
<td align="center">查找时间复杂度</td>
<td align="center">log(n)</td>
<td align="center">best O(1) -&gt; O(n)  worst</td>
</tr>
<tr>
<td align="center">插入时间复杂度</td>
<td align="center">log(n) + Rebalance</td>
<td align="center">同上</td>
</tr>
<tr>
<td align="center">删除时间复杂度</td>
<td align="center">log(n) + Rebalance</td>
<td align="center">同上</td>
</tr>
</tbody></table>
<h1 id=""><a href="#" class="headerlink" title=""></a><strong><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/C++新特性/unordered_set.png"/></strong></h1>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++17</tag>
        <tag>Modern C++</tag>
        <tag>C++11</tag>
        <tag>C++14</tag>
      </tags>
  </entry>
  <entry>
    <title>C++1x 新特性（二）语言运行时的强化</title>
    <url>/2021/04/09/C++%20%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AF%AD%E8%A8%80%E8%BF%90%E8%A1%8C%E6%97%B6%E7%9A%84%E5%BC%BA%E5%8C%96/</url>
    <content><![CDATA[<h1 id="C-1x-新特性（二）语言运行时的强化"><a href="#C-1x-新特性（二）语言运行时的强化" class="headerlink" title="C++1x 新特性（二）语言运行时的强化"></a>C++1x 新特性（二）语言运行时的强化</h1><p><code>本系列主要阐述依据：</code></p>
<p>[<a href="https://github.com/changkun/modern-cpp-tutorial]">https://github.com/changkun/modern-cpp-tutorial]</a>: 《Modern C++ Tutorial: C++11&#x2F;14&#x2F;17&#x2F;20 On the Fly》</p>
<br/>

<h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a><strong>lambda</strong></h2><p><code>[捕获列表] (参数列表) mutable(可选) 异常属性 -&gt; 返回类型 &#123;       // 函数体 &#125;</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

<span class="token keyword">void</span> <span class="token function">TestReferenceCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">bool</span> change <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token keyword">auto</span> value_capture <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"改变？"</span> <span class="token operator">+</span> change <span class="token operator">+</span> <span class="token string">" 值捕获： "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> reference_capture <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"改变？"</span> <span class="token operator">+</span> change <span class="token operator">+</span> <span class="token string">" 引用捕获： "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token comment">// 改变kvalue的值</span>
  value <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
  change <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

  <span class="token function">value_capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">reference_capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// C++14 表达式捕获</span>
<span class="token comment">// 允许捕获的成员用任意的表达式进行初始化，允许右值捕获</span>
<span class="token keyword">void</span> <span class="token function">TestRvalueCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> important <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 泛型lambda since C++14, auto关键字产生意义上的泛型， 不需要 -> 返回类型</span>
  <span class="token keyword">auto</span> add <span class="token operator">=</span> <span class="token punctuation">[</span>v1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> v2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>important<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token comment">/*-> int*/</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>v2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">+</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">TestReferenceCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">TestRvalueCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./lambda 
改变？0 值捕获： <span class="token number">1</span>
改变？1 引用捕获： <span class="token number">10000</span>
<span class="token number">10008</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="move-semantics（移动语义）"><a href="#move-semantics（移动语义）" class="headerlink" title="move semantics（移动语义）"></a><strong>move semantics（移动语义）</strong></h2><p><code>移动语义的出现解决了传统C++没有区分移动和拷贝而导致造成大量数据复制的问题。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token keyword">int</span><span class="token operator">*</span> ptr_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

 <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ptr_</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"默认构造"</span>  <span class="token operator">+</span> ptr_ <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token comment">// 存在无意义的对象拷贝</span>
 <span class="token function">A</span><span class="token punctuation">(</span>A<span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ptr_</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">.</span>ptr_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"拷贝构造"</span>  <span class="token operator">+</span> ptr_<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token function">A</span><span class="token punctuation">(</span>A<span class="token operator">&amp;&amp;</span> a<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ptr_</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>ptr_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        a<span class="token punctuation">.</span>ptr_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"移动构造"</span> <span class="token operator">+</span> ptr_<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"析构"</span> <span class="token operator">+</span> ptr_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> ptr_<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 这样定义能防止编译器优化</span>
<span class="token comment">// 函数返回后会产生一个将亡值，被A的移动构造 A(A&amp;&amp;) 引用，从而延长生命周期，</span>
<span class="token comment">// 并将这个右值中的指针拿到，保存到 A obj 中， 之后将亡值的指针会被置为 nullptr， </span>
<span class="token comment">// 防止了这块内存域被销毁，</span>
<span class="token comment">// 从而别免了无意义的拷贝构造，增强性能。 </span>
A <span class="token function">Get_A</span><span class="token punctuation">(</span><span class="token keyword">bool</span> test<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   A a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
   <span class="token keyword">return</span> test <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

   A obj <span class="token operator">=</span> <span class="token function">Get_A</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">LOG</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>ptr_<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token operator">*</span>obj<span class="token punctuation">.</span>ptr_<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// std::vector 例子</span>
   std<span class="token double-colon punctuation">::</span>string str <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>
   std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>

   v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// str 为 "xxx"</span>
   <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"拷贝传参后的str: "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 如果使用如下，str将被置为空。</span>
   v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// str 为 ""</span>
   <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"移动传参后的str: "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./move_semantics 
默认构造0x5578c3559eb0
默认构造0x5578c355a2e0
拷贝构造0x5578c355a300
析构0x5578c355a2e0
析构0x5578c3559eb0
0x5578c355a300
<span class="token number">1</span>
拷贝传参后的str: xxx
移动传参后的str: 
析构0x5578c355a300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="std-bind"><a href="#std-bind" class="headerlink" title="std::bind"></a><strong>std::bind</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span>

<span class="token keyword">int</span> <span class="token function">Calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_add<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 	<span class="token keyword">return</span> is_add <span class="token operator">?</span> x <span class="token operator">+</span> y <span class="token operator">:</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 将部分调用参数提前提前绑定到函数身上，成为一个新的对象，</span>
<span class="token comment">// 然后在参数齐全后完成调用、</span>
<span class="token comment">// 使用std::placeholders::_1对第3位参数进行占位，如果多个占位，依次为_1, _2, _3, ...</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">auto</span> bind_calculate <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span>Calculate<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>placeholders<span class="token double-colon punctuation">::</span>_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">bind_calculate</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="std-forward"><a href="#std-forward" class="headerlink" title="std::forward"></a><strong>std::forward</strong></h2><p><code>完美转发, 为了在传递参数的时候保持原来的参数类型（左引用保持左引用，右引用保持右引用）</code></p>
<br/>

<p><em><strong>坍缩规则：</strong></em></p>
<table>
<thead>
<tr>
<th align="center">数形参类型</th>
<th align="center">实参参数类型</th>
<th align="center">推导后的函数形参类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">T&amp;</td>
<td align="center">左引用</td>
<td align="center">T&amp;</td>
</tr>
<tr>
<td align="center">T&amp;</td>
<td align="center">右引用</td>
<td align="center">T&amp;</td>
</tr>
<tr>
<td align="center">T&amp;&amp;</td>
<td align="center">左引用</td>
<td align="center">T&amp;</td>
</tr>
<tr>
<td align="center">T&amp;&amp;</td>
<td align="center">右引用</td>
<td align="center">T&amp;&amp;</td>
</tr>
</tbody></table>
<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 前面提到，声明一个右值引用其实是一个左值 std::string&amp;&amp; rs = "xx" + "yy";</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

<span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"      左值引用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"      右值引用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">pass</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"    --普通传参"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">forward_pass</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"    --普通传参"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 单纯的将左值转化为右值。</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"    --move 传参。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">log</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 单纯将参数做了类型转换, 由std::forward的实现得知。</span>
    <span class="token comment">/* 
  template&lt;typename _Tp>
      constexpr _Tp&amp;&amp;
      forward(typename std::remove_reference&lt;_Tp>::type&amp; __t) noexcept
      &#123; return static_cast&lt;_Tp&amp;&amp;>(__t); &#125;
  */</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"    --forward 传参。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">log</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">></span></span></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"传递右值:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pass</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 虽然传递右值1，但是对于pass(v)的参数v来说，v是一个（右值）引用，同时也是左值</span>

    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"传递左值:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token function">pass</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// value是左引用，为什么能调用到pass(T&amp;&amp; v) ？ 如上表格坍缩规则。</span>

    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 无论传递 左值（2）, 还是右值（f_value），普通传参都会将参数作为左值进行转发。</span>
    <span class="token comment">// 所以std::move总会接到一个左值，从而转发调用 log(int&amp;&amp; )输出右值引用。</span>
    <span class="token comment">// std::forward 没有造成多余的拷贝， 同时完美转发（传递）了函数实参给了内部调用的其他函数。</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"传递右值:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">forward_pass</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"传递左值:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> f_value <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
    <span class="token function">forward_pass</span><span class="token punctuation">(</span>f_value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./std_forward 
传递右值:
 --普通传参
   左值引用
传递左值:
 --普通传参
   左值引用
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
传递右值:
 --普通传参
   左值引用
 <span class="token parameter variable">--move</span> 传参。
   右值引用
 <span class="token parameter variable">--forward</span> 传参。
   右值引用
传递左值:
 --普通传参
   左值引用
 <span class="token parameter variable">--move</span> 传参。
   右值引用
 <span class="token parameter variable">--forward</span> 传参。
   左值引用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="std-function"><a href="#std-function" class="headerlink" title="std::function"></a><strong>std::function</strong></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

<span class="token comment">// old</span>
<span class="token keyword">using</span> foo <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 函数指针的调用是非类型安全的</span>
<span class="token keyword">void</span> <span class="token function">excecute_f</span><span class="token punctuation">(</span>foo f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">Oldman</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">LOG</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">excecute_f</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//new</span>
<span class="token keyword">int</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> para<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> para<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 函数容器 将函数、函数指针作为对象处理，是一种通用、多态的函数封装，类型安全</span>
<span class="token keyword">void</span> <span class="token function">Coolman</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> func_1 <span class="token operator">=</span> print<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> func_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">func_1</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token function">func_2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Oldman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Coolman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./std_function 
<span class="token number">3</span>
<span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="std-move"><a href="#std-move" class="headerlink" title="std::move"></a><strong>std::move</strong></h2><p><code>左值: 符号左边的值，是表达式（不一定是赋值表达式）后依然存在的持久对象。</code></p>
<p><code>右值: 表达式结束后就不存在的临时对象。</code></p>
<p><code>纯右值: 纯粹的字面量，如 10, true, 1+2, ..</code></p>
<p><code>将亡值: 即将被销毁、却能够被移动的值。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> tmp <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

	<span class="token comment">// v是左值， foo()就是右值，也是纯右值</span>
	<span class="token comment">// 对于foo()产生的返回值作为一个临时值，一旦被v复制后，就无法获取和修改</span>
	std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// std::move() 将左值参数无条件的转换成右值</span>
<span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"左值： "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;&amp;</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"右值： "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>string ls1 <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>
    <span class="token comment">// an rvalue reference cannot be bound to an lvalue</span>
    <span class="token comment">// std::string&amp;&amp; rs2 = ls1;</span>

    std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;&amp;</span> rs2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>ls1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 常量左值引用延长临时变量的生命周期， 但是ls3不可修改</span>
    <span class="token comment">// initial value of reference to non-const must be an lvalue</span>
    <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> ls3 <span class="token operator">=</span> ls1 <span class="token operator">+</span> ls1<span class="token punctuation">;</span> 
    <span class="token comment">// ls3 += "yyy";</span>

    <span class="token comment">// 右值引用延长生命周期，可以定义为非常量引用，可修改。</span>
    std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;&amp;</span> rs4 <span class="token operator">=</span> ls1 <span class="token operator">+</span> rs2<span class="token punctuation">;</span>
    rs4 <span class="token operator">+=</span> <span class="token string">"yyy"</span><span class="token punctuation">;</span>

    <span class="token comment">// rs4虽然引用了一个右值，但是由于它是一个引用，所以它依然是一个左值。</span>
    <span class="token function">log</span><span class="token punctuation">(</span>rs4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./std_move 
左值： xxxxxxyyy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++17</tag>
        <tag>Modern C++</tag>
        <tag>C++11</tag>
        <tag>C++14</tag>
      </tags>
  </entry>
  <entry>
    <title>C++1x 新特性（四）智能指针</title>
    <url>/2021/04/18/C++%20%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88%E5%9B%9B%20%EF%BC%89%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h1 id="C-1x-新特性（四）智能指针"><a href="#C-1x-新特性（四）智能指针" class="headerlink" title="C++1x 新特性（四）智能指针"></a>C++1x 新特性（四）智能指针</h1><p><code>本系列主要阐述依据：</code></p>
<p><a href="https://github.com/changkun/modern-cpp-tutorial">《Modern C++ Tutorial: C++11&#x2F;14&#x2F;17&#x2F;20 On the Fly》</a></p>
<p>关于智能指针的源码剖析：<a href="https://blog.csdn.net/weixin_43798887/article/details/116464334">https://blog.csdn.net/weixin_43798887/article/details/116464334</a>  </p>
<p>​											<a href="https://www.jianshu.com/p/b6ac02d406a0">https://www.jianshu.com/p/b6ac02d406a0</a></p>
<br/>

<h2 id="RAII-（资源获取即初始化）"><a href="#RAII-（资源获取即初始化）" class="headerlink" title="RAII （资源获取即初始化）"></a><strong>RAII （资源获取即初始化）</strong></h2><p><code>存在中途抛出异常等情况导致 new 和 delete 带来的的内存泄露问题。 </code></p>
<br/>

<br/>

<h2 id="auto-ptr"><a href="#auto-ptr" class="headerlink" title="auto_ptr"></a>auto_ptr</h2><p><code>C++98提供的智能指针，现在废弃，用具有基本相同效果、更高安全性的 unique_ptr 替代。</code></p>
<table>
<thead>
<tr>
<th>auto_ptr</th>
<th>unique_ptr</th>
</tr>
</thead>
<tbody><tr>
<td>对于数组类型只会调用 delete 释放</td>
<td>可以正确处理数组类型，会调用 delete[] 释放</td>
</tr>
<tr>
<td>std::auto_ptr<int> p(new int);                                            std::auto_ptr<int> p2 &#x3D; p;  &#x2F;&#x2F; 隐式移交所有权</td>
<td>std::unique_ptr<int> p(new int); std::unique_ptr<int> p2 &#x3D; std::move(p);  &#x2F;&#x2F; 显式移交所有权</td>
</tr>
</tbody></table>
<br/>

<br/>

<h2 id="std-shared-ptr"><a href="#std-shared-ptr" class="headerlink" title="std::shared_ptr"></a><strong>std::shared_ptr</strong></h2><table>
<thead>
<tr>
<th>操作</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>make_shared<T>(args)</td>
<td>工厂构造函数</td>
</tr>
<tr>
<td>p &#x3D; q</td>
<td>p 和 q 可以互相转换的智能指针，该操作会减少 p 的引用计数， 增加 q 的引用计数，如果 p 的引用计数为 0，会释放当前 p 指向的对象。</td>
</tr>
<tr>
<td>shared_ptr<T> p(q)</td>
<td>q 可以转换成 T* 类型，智能指针 p 是 q 的拷贝，这会增加 q 的引用计数。</td>
</tr>
<tr>
<td>p.unique()</td>
<td>如果p.use_count &#x3D;&#x3D; 1, 返回 <code>true</code> （C++17 deprecated, C++20 removed）</td>
</tr>
<tr>
<td>p.use_count()</td>
<td>查看对象当前的引用计数</td>
</tr>
</tbody></table>
<br/>

<h3 id="简单实现-一个-shared-ptr"><a href="#简单实现-一个-shared-ptr" class="headerlink" title="简单实现 一个 shared_ptr"></a>简单实现 一个 shared_ptr</h3><div class="tabs" id="shared_ptr-的简单实现"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="shared_ptr-的简单实现-1">代码实现</button><button type="button" class="tab " data-href="shared_ptr-的简单实现-2">示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="shared_ptr-的简单实现-1"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 简单实现一个 shared_ptr</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">class</span> <span class="token class-name">RefCount</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">RefCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">use_count_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">RefCount</span><span class="token punctuation">(</span><span class="token keyword">const</span> RefCount<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

    RefCount<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> RefCount<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

    <span class="token operator">~</span><span class="token function">RefCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        use_count_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> use_count_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 重载前置/后置自增</span>
    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token operator">++</span>use_count_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
 
    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      use_count_<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
 
    <span class="token comment">// 重载前置/后置自减</span>
    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token operator">--</span>use_count_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      use_count_<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 重载 &lt;&lt; 操作</span>
    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> RefCount<span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        os <span class="token operator">&lt;&lt;</span> <span class="token string">"当前引用值为: "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>use_count_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> os<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> use_count_ <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token comment">// usinged int weak_count_ &#123;&#125;;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">SharedPtr</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// 显式构造</span>
    <span class="token keyword">explicit</span> <span class="token function">SharedPtr</span><span class="token punctuation">(</span>T<span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        raw_ptr_ <span class="token operator">=</span> ptr<span class="token punctuation">;</span>
        ref_count_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">RefCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token punctuation">(</span><span class="token operator">*</span>ref_count_<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 拷贝构造</span>
    <span class="token function">SharedPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> SharedPtr<span class="token operator">&amp;</span> sp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        raw_ptr_ <span class="token operator">=</span> sp<span class="token punctuation">.</span>raw_ptr_<span class="token punctuation">;</span>
        ref_count_ <span class="token operator">=</span> sp<span class="token punctuation">.</span>ref_count_<span class="token punctuation">;</span>
        <span class="token operator">++</span><span class="token punctuation">(</span><span class="token operator">*</span>ref_count_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    T<span class="token operator">*</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> raw_ptr_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> ref_count_<span class="token operator">-></span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token operator">~</span><span class="token function">SharedPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">--</span><span class="token punctuation">(</span><span class="token operator">*</span>ref_count_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ref_count_<span class="token operator">-></span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">delete</span> ref_count_<span class="token punctuation">;</span>
            <span class="token keyword">delete</span> raw_ptr_<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">*</span>raw_ptr_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    T<span class="token operator">*</span> <span class="token keyword">operator</span><span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> raw_ptr_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> SharedPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> sp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        os <span class="token operator">&lt;&lt;</span> <span class="token string">"所指对象地址： "</span> <span class="token operator">&lt;&lt;</span> sp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        os <span class="token operator">&lt;&lt;</span> <span class="token string">"引用计数： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>sp<span class="token punctuation">.</span>ref_count_<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> os<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    T<span class="token operator">*</span>              raw_ptr_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    RefCount<span class="token operator">*</span>       ref_count_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-item-content" id="shared_ptr-的简单实现-2"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"SharedPtr.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    SharedPtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sp1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sp1<span class="token punctuation">;</span>
    <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"进入局部作用域...\r\n\n"</span><span class="token punctuation">;</span>
        SharedPtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sp2</span><span class="token punctuation">(</span>sp1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sp1<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sp2<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"离开局部作用域...\r\n\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sp1<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./TestSmartPointer 
所指对象地址： 0x557de5ef9eb0
引用计数： 当前引用值为: <span class="token number">1</span>

进入局部作用域<span class="token punctuation">..</span>.
所指对象地址： 0x557de5ef9eb0
引用计数： 当前引用值为: <span class="token number">2</span>

所指对象地址： 0x557de5ef9eb0
引用计数： 当前引用值为: <span class="token number">2</span>

离开局部作用域<span class="token punctuation">..</span>.
所指对象地址： 0x557de5ef9eb0
引用计数： 当前引用值为: <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<br/>

<p><strong>shared_ptr 引用计数参考：</strong> <a href="https://blog.csdn.net/weixin_43798887/article/details/116464334">https://blog.csdn.net/weixin_43798887/article/details/116464334</a> </p>
<br/>

<p><code>std::shared_ptr 通过 get() 获取原始指针， reset() 减少一个引用计数， get_count()查看一个对象当前的引用计数。 </code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 记录有多少个share_ptr共同指向一个对象</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">print_use_count</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> p<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">LOG</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">".use_count() = "</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token keyword">auto</span> p1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>
<span class="token keyword">auto</span> p3 <span class="token operator">=</span> p1<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>q <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不会增加引用计数</span>

<span class="token keyword">auto</span> print_all <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
  <span class="token function">print_use_count</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print_use_count</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> <span class="token string">"p2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print_use_count</span><span class="token punctuation">(</span>p3<span class="token punctuation">,</span> <span class="token string">"p3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token function">print_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"reset p2 之后:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p2<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"reset p3 之后:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p3<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./share_ptr 
p1.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span>
p2.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span>
p3.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span>
reset p2 之后： 
p1.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>
p2.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
p3.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>
reset p3 之后： 
p1.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
p2.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
p3.use_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>



<br/>

<h2 id="std-unique-ptr"><a href="#std-unique-ptr" class="headerlink" title="std::unique_ptr"></a><strong>std::unique_ptr</strong></h2><table>
<thead>
<tr>
<th>操作</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>unique_ptr&lt;T, D&gt;u</td>
<td>D 为指定的释放方法用于替代 delete</td>
</tr>
<tr>
<td>u.release()</td>
<td>u 让出 对所持对象的控制权，返回出来，并置 u 为 nullptr</td>
</tr>
<tr>
<td>u.reset()</td>
<td>删除 u 指向对象</td>
</tr>
<tr>
<td>u.reset(q)</td>
<td>如果 q 有效 令 u 指向 q</td>
</tr>
</tbody></table>
<br/>

<p><strong>简单实现 unique_ptr</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// TODO</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>

<p><code>是一种独占指针，禁止其他智能指针与其共享同一个对象，从而保证代码安全。</code></p>
<p><code>独占，意味着，不可复制。但是，我们可以利用 std::move() 移交给其他 unique_ptr。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/// Move constructor.</span>
<span class="token function">unique_ptr</span><span class="token punctuation">(</span>unique_ptr<span class="token operator">&amp;&amp;</span> __u<span class="token punctuation">)</span> <span class="token keyword">noexcept</span>
 <span class="token operator">:</span> <span class="token function">_M_t</span><span class="token punctuation">(</span>__u<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>deleter_type<span class="token operator">></span></span></span><span class="token punctuation">(</span>__u<span class="token punctuation">.</span><span class="token function">get_deleter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// Assignment.</span>

<span class="token comment">/** @brief Move assignment operator.
*
* @param __u  The object to transfer ownership from.
*
* Invokes the deleter first if this object owns a pointer.
*/</span>
unique_ptr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>unique_ptr<span class="token operator">&amp;&amp;</span> __u<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">&#123;</span>
    <span class="token function">reset</span><span class="token punctuation">(</span>__u<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">get_deleter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>deleter_type<span class="token operator">></span></span></span><span class="token punctuation">(</span>__u<span class="token punctuation">.</span><span class="token function">get_deleter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><strong>使用示例</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

 std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// auto p2 = p1; // 非法</span>

 <span class="token comment">// 利用std::move转移独占权</span>
 <span class="token keyword">auto</span> p3 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1 移交独占权后，为空！"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./unique_ptr 
p1移交独占权后，为空！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="std-weak-ptr"><a href="#std-weak-ptr" class="headerlink" title="std::weak_ptr"></a><strong>std::weak_ptr</strong></h2><table>
<thead>
<tr>
<th>操作</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>weak_ptr<T> w(sp)</td>
<td>sp 为可以和 T 互转的 shared_ptr</td>
</tr>
<tr>
<td>w.reset()</td>
<td>让 w 为空</td>
</tr>
<tr>
<td>w.expired()</td>
<td>如果 w.use_count() &#x3D;&#x3D; 0， 返回 <code>true</code></td>
</tr>
<tr>
<td>w.lock()</td>
<td>如果 expired() 为 <code>true</code>,返回 nullptr， 否则返回 w 所指向对象的 shared_ptr</td>
</tr>
</tbody></table>
<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">shared_ptr<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">shared_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>nothrow<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token function">sp</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 cout <span class="token operator">&lt;&lt;</span> <span class="token string">"对象不为空"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 cout <span class="token operator">&lt;&lt;</span> <span class="token string">"nullptr"</span>；
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><code>std::weak_ptr 要解决的是 std::shared_ptr存在的强引用带来的的资源无法释放的问题。 </code></p>
<p><code>没有 * 和 -&gt; 运算符，所以不能够对资源进行操作，expired() 在资源未被释放时返回 true。</code></p>
<br/>

<p><strong>循环引用例子</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~A()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	shared_ptr<span class="token operator">&lt;</span>B<span class="token operator">></span> b<span class="token punctuation">;</span> <span class="token comment">// 指向 B 对象的智能指针</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token operator">~</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~B()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	shared_ptr<span class="token operator">&lt;</span>A<span class="token operator">></span> a<span class="token punctuation">;</span> <span class="token comment">// 指向 A 对象的智能指针</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	shared_ptr<span class="token operator">&lt;</span>A<span class="token operator">></span> <span class="token function">ptra</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// a 指向 A 对象，A 的引用计数为 1</span>
	shared_ptr<span class="token operator">&lt;</span>B<span class="token operator">></span> <span class="token function">ptrb</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// b 指向 B 对象，B 的引用计数为 1</span>
	ptra<span class="token operator">-></span>b <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token comment">// A 对象的成员变量_ptrb也指向 B 对象，B 的引用计数为 2</span>
	ptrb<span class="token operator">-></span>a <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">// B 对象的成员变量_ptra也指向 A 对象，A 的引用计数为 2</span>

	cout <span class="token operator">&lt;&lt;</span> ptra<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 打印A的引用计数结果:2</span>
	cout <span class="token operator">&lt;&lt;</span> ptrb<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 打印B的引用计数结果:2</span>

	<span class="token comment">/*
	离开 main 函数作用域，ptra 和 ptrb 两个局部对象析构，分别给 A 对象和
	 B 对象的引用计数从 2 减到 1，达不到释放 A 和 B 的条件（释放的条件是
	A 和 B 的引用计数为 0，因此造成两个new出来的A和B对象无法释放，导致内存泄露
	*/</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>a 、b 被销毁后，A，B依然被强引用无法释放</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/C%2B%2B%E6%96%B0%E7%89%B9%E6%80%A7/pointers1_en.png">

<br/>

<p><strong>使用弱引用指针 std::weak_ptr， 不会引起引用计数的增加。</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/C%2B%2B%E6%96%B0%E7%89%B9%E6%80%A7/pointers2.png">

<br/>

<p><strong>weak_ptr 是怎么解决 循环引用的问题？</strong></p>
<p><code>当 use_count() == 0 或者 weak_count() == 0 时，释放资源。具体参考：</code><a href="https://blog.csdn.net/weixin_43798887/article/details/116464334">https://blog.csdn.net/weixin_43798887/article/details/116464334</a>  </p>
<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 解决 std::share_ptr带来的强引用无法释放的问题。</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span>

<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>B<span class="token operator">></span> ptr_b<span class="token punctuation">;</span>
<span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"A 被销毁。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>A<span class="token operator">></span> ptr_a<span class="token punctuation">;</span>
<span class="token operator">~</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"B 被销毁。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">strong_referrence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">auto</span> a <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>A<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> b <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>B<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 存在循环引用</span>
<span class="token comment">// use_count() 永远不会等于 0, 不会调用各自的析构函数</span>
a<span class="token operator">-></span>ptr_b <span class="token operator">=</span> b<span class="token punctuation">;</span>
b<span class="token operator">-></span>ptr_a <span class="token operator">=</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">strong_referrence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 强引用存在的情况</span>

std<span class="token double-colon punctuation">::</span>weak_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> weak_p<span class="token punctuation">;</span>

<span class="token comment">// std::weak_ptr 没有 * 运算符 和 -> 运算符，不能够对资源进行操作</span>
<span class="token comment">// expired() 方法 用于判断资源是否被释放</span>
<span class="token keyword">auto</span> observer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">=</span> weak_p<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
         <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"资源被释放!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token punctuation">&#123;</span>
     <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"进入某个作用域赋值。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">auto</span> p1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     weak_p <span class="token operator">=</span> p1<span class="token punctuation">;</span>
     <span class="token function">observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"离开某个作用域。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./weak_ptr 
进入某个作用域赋值。
<span class="token number">100</span>
离开某个作用域。
资源被释放<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h2 id="std-enable-shared-from-this"><a href="#std-enable-shared-from-this" class="headerlink" title="std::enable_shared_from_this"></a>std::enable_shared_from_this</h2><ul>
<li><code>shared_from_this()</code> 返回 一个指向 <code>this</code> 的  <code>shared_ptr</code>。</li>
<li><code>weak_from_this()</code> 返回一个指向 <code>this</code> 的 <code>weak_ptr</code>。</li>
<li><code>A class T can inherit from enable_shared_from_this&lt;T&gt; to inherit the shared_from_this member functions that obtain a shared_ptr instance pointing to *this.</code></li>
</ul>
<br/>

<p><strong>要解决的问题</strong></p>
<p>1、当类 A 被 <code>shared_ptr</code> 管理，且在类 A 的成员函数里需要把当前类对象作为参数传给其他函数时，就需要传递一个指向自身的 <code>share_ptr</code>。为了防止智能指针的语义被破坏，不直接传递 <code>this</code> 指针。</p>
<p>2、不直接传递 <code>shared_ptr&lt;this&gt;</code>，因为这样会造成多个非共享的 <code>shared_ptr</code> 指向同一个对象，未增加引用计数导对象被析构多次，如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">class</span> <span class="token class-name">Bad</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Bad<span class="token operator">></span> <span class="token function">getptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">shared_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>Bad<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token operator">~</span><span class="token function">Bad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bad::~Bad() called"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 错误点：每个 shared_ptr 都认为自己是对象仅有的所有者</span>
	std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Bad<span class="token operator">></span> <span class="token function">bp1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Bad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Bad<span class="token operator">></span> bp2 <span class="token operator">=</span> bp1<span class="token operator">-></span><span class="token function">getptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 打印bp1和bp2的引用计数</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"bp1.use_count() = "</span> <span class="token operator">&lt;&lt;</span> bp1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"bp2.use_count() = "</span> <span class="token operator">&lt;&lt;</span> bp2<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br/>

<p><strong>使用方式</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyObject</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> std<span class="token double-colon punctuation">::</span><span class="token class-name">enable_shared_from_this</span><span class="token operator">&lt;</span><span class="token class-name">MyObject</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>MyObject<span class="token operator">></span> <span class="token function">pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">shared_from_this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">auto</span> p1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>MyObject<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">auto</span> p2 <span class="token operator">=</span> p1<span class="token operator">-></span><span class="token function">pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">auto</span> p3 <span class="token operator">=</span> p1<span class="token operator">-></span><span class="token function">shared_from_this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 MyObject unshared<span class="token punctuation">;</span>
 <span class="token keyword">auto</span> p4 <span class="token operator">=</span> unshared<span class="token punctuation">.</span><span class="token function">shared_from_this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Throws std::bad_weak_ptr</span>
 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong>对动态数组使用只能指针</strong></p>
<table>
<thead>
<tr>
<th>unique_ptr&lt;int[]&gt; up(new int[10]);</th>
<th>shared_ptr<int> sp(new int[10], [](int *p) { delete[] p; });</th>
</tr>
</thead>
<tbody><tr>
<td>可以 up[i] 索引访问</td>
<td></td>
</tr>
<tr>
<td>up.release() 会自动使用 delete[] 删除</td>
<td>sp.reset(), 调用自定义的 deleter.</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++17</tag>
        <tag>Modern C++</tag>
        <tag>C++11</tag>
        <tag>C++14</tag>
      </tags>
  </entry>
  <entry>
    <title>gin 框架初探</title>
    <url>/2022/02/13/Go/gin%20%E6%A1%86%E6%9E%B6%E5%88%9D%E6%8E%A2%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>golang</category>
        <category>golang 框架</category>
      </categories>
      <tags>
        <tag>gin</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>gorm 框架初探</title>
    <url>/2022/03/13/Go/gorm%20%E6%A1%86%E6%9E%B6%E5%88%9D%E6%8E%A2%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>golang</category>
        <category>golang 框架</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>gorm</tag>
      </tags>
  </entry>
  <entry>
    <title>golang tools之Viper,Cobra</title>
    <url>/2022/03/13/Go/viper,cobra/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>golang 命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程-Condition</title>
    <url>/2023/12/15/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-Cond/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 基础</title>
    <url>/2021/11/13/Go/go%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="go-语言官方文档"><a href="#go-语言官方文档" class="headerlink" title="go 语言官方文档"></a>go 语言官方文档</h3><p><a href="https://go.dev/doc/effective_go">https://go.dev/doc/effective_go</a></p>
<h3 id="go-标准库"><a href="#go-标准库" class="headerlink" title="go 标准库"></a>go 标准库</h3><p><a href="https://pkg.go.dev/std">https://pkg.go.dev/std</a></p>
<h2 id="go-命令"><a href="#go-命令" class="headerlink" title="go 命令"></a>go 命令</h2><p><a href="https://pkg.go.dev/cmd/go">https://pkg.go.dev/cmd/go</a></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程-Context</title>
    <url>/2023/12/15/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-Context/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>



<h2 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h2><br/>



<h2 id="sync-RWMutex"><a href="#sync-RWMutex" class="headerlink" title="sync.RWMutex"></a>sync.RWMutex</h2><br/>



<h2 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h2><br/>



<h2 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h2><br/>



<h2 id="sync-Cond"><a href="#sync-Cond" class="headerlink" title="sync.Cond"></a>sync.Cond</h2><br/>



<h2 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h2><br/>



<h2 id="如何实现线程安全的-map-及其他类型"><a href="#如何实现线程安全的-map-及其他类型" class="headerlink" title="如何实现线程安全的 map 及其他类型"></a>如何实现线程安全的 map 及其他类型</h2><br/>



<h2 id="sync-Pool"><a href="#sync-Pool" class="headerlink" title="sync.Pool"></a>sync.Pool</h2><br/>



<h2 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h2><br/>



<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><br/>

<h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><br/>

<h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><br/>



<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><br/>



<h2 id="singleflight"><a href="#singleflight" class="headerlink" title="singleflight"></a>singleflight</h2><br/>



<h2 id="cyclicbarrier"><a href="#cyclicbarrier" class="headerlink" title="cyclicbarrier"></a>cyclicbarrier</h2><br/>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程-内存模型</title>
    <url>/2023/12/15/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-Go%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>

<h2 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h2><br/>



<h2 id="sync-RWMutex"><a href="#sync-RWMutex" class="headerlink" title="sync.RWMutex"></a>sync.RWMutex</h2><br/>



<h2 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h2><br/>



<h2 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h2><br/>



<h2 id="sync-Cond"><a href="#sync-Cond" class="headerlink" title="sync.Cond"></a>sync.Cond</h2><br/>



<h2 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h2><br/>



<h2 id="如何实现线程安全的-map-及其他类型"><a href="#如何实现线程安全的-map-及其他类型" class="headerlink" title="如何实现线程安全的 map 及其他类型"></a>如何实现线程安全的 map 及其他类型</h2><br/>



<h2 id="sync-Pool"><a href="#sync-Pool" class="headerlink" title="sync.Pool"></a>sync.Pool</h2><br/>



<h2 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h2><br/>



<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><br/>

<h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><br/>

<h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><br/>



<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><br/>



<h2 id="singleflight"><a href="#singleflight" class="headerlink" title="singleflight"></a>singleflight</h2><br/>



<h2 id="cyclicbarrier"><a href="#cyclicbarrier" class="headerlink" title="cyclicbarrier"></a>cyclicbarrier</h2><br/>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程-Once</title>
    <url>/2023/12/15/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-Once/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该篇为鸟窝的《Go语言并发编程》读书笔记及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>



<h2 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h2><br/>



<h2 id="sync-RWMutex"><a href="#sync-RWMutex" class="headerlink" title="sync.RWMutex"></a>sync.RWMutex</h2><br/>



<h2 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h2><br/>



<h2 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h2><br/>



<h2 id="sync-Cond"><a href="#sync-Cond" class="headerlink" title="sync.Cond"></a>sync.Cond</h2><br/>



<h2 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h2><br/>



<h2 id="如何实现线程安全的-map-及其他类型"><a href="#如何实现线程安全的-map-及其他类型" class="headerlink" title="如何实现线程安全的 map 及其他类型"></a>如何实现线程安全的 map 及其他类型</h2><br/>



<h2 id="sync-Pool"><a href="#sync-Pool" class="headerlink" title="sync.Pool"></a>sync.Pool</h2><br/>



<h2 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h2><br/>



<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><br/>

<h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><br/>

<h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><br/>



<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><br/>



<h2 id="singleflight"><a href="#singleflight" class="headerlink" title="singleflight"></a>singleflight</h2><br/>



<h2 id="cyclicbarrier"><a href="#cyclicbarrier" class="headerlink" title="cyclicbarrier"></a>cyclicbarrier</h2><br/>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程-互斥锁 Mutex</title>
    <url>/2023/12/15/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-Mutex/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他 go 并发编程知识学习的汇总，持续完善中。</p>
<br/>



<h2 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h2><br/>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程-Pool</title>
    <url>/2023/12/15/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-Pool/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程-WaitGroup</title>
    <url>/2023/12/15/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-WaitGroup/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程-读写锁 RWMutex</title>
    <url>/2023/12/15/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-RWMutex/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程-channel</title>
    <url>/2023/12/15/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-channel/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>



<h2 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h2><br/>



<h2 id="sync-RWMutex"><a href="#sync-RWMutex" class="headerlink" title="sync.RWMutex"></a>sync.RWMutex</h2><br/>



<h2 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h2><br/>



<h2 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h2><br/>



<h2 id="sync-Cond"><a href="#sync-Cond" class="headerlink" title="sync.Cond"></a>sync.Cond</h2><br/>



<h2 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h2><br/>



<h2 id="如何实现线程安全的-map-及其他类型"><a href="#如何实现线程安全的-map-及其他类型" class="headerlink" title="如何实现线程安全的 map 及其他类型"></a>如何实现线程安全的 map 及其他类型</h2><br/>



<h2 id="sync-Pool"><a href="#sync-Pool" class="headerlink" title="sync.Pool"></a>sync.Pool</h2><br/>



<h2 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h2><br/>



<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><br/>

<h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><br/>

<h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><br/>



<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><br/>



<h2 id="singleflight"><a href="#singleflight" class="headerlink" title="singleflight"></a>singleflight</h2><br/>



<h2 id="cyclicbarrier"><a href="#cyclicbarrier" class="headerlink" title="cyclicbarrier"></a>cyclicbarrier</h2><br/>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程-信号量 Semaphore</title>
    <url>/2023/12/15/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E4%BF%A1%E5%8F%B7%E9%87%8FSemaphore/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>

<h2 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h2><br/>



<h2 id="sync-RWMutex"><a href="#sync-RWMutex" class="headerlink" title="sync.RWMutex"></a>sync.RWMutex</h2><br/>



<h2 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h2><br/>



<h2 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h2><br/>



<h2 id="sync-Cond"><a href="#sync-Cond" class="headerlink" title="sync.Cond"></a>sync.Cond</h2><br/>



<h2 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h2><br/>



<h2 id="如何实现线程安全的-map-及其他类型"><a href="#如何实现线程安全的-map-及其他类型" class="headerlink" title="如何实现线程安全的 map 及其他类型"></a>如何实现线程安全的 map 及其他类型</h2><br/>



<h2 id="sync-Pool"><a href="#sync-Pool" class="headerlink" title="sync.Pool"></a>sync.Pool</h2><br/>



<h2 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h2><br/>



<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><br/>

<h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><br/>

<h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><br/>



<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><br/>



<h2 id="singleflight"><a href="#singleflight" class="headerlink" title="singleflight"></a>singleflight</h2><br/>



<h2 id="cyclicbarrier"><a href="#cyclicbarrier" class="headerlink" title="cyclicbarrier"></a>cyclicbarrier</h2><br/>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程-原子操作</title>
    <url>/2023/12/15/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>

<h2 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h2><br/>



<h2 id="sync-RWMutex"><a href="#sync-RWMutex" class="headerlink" title="sync.RWMutex"></a>sync.RWMutex</h2><br/>



<h2 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h2><br/>



<h2 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h2><br/>



<h2 id="sync-Cond"><a href="#sync-Cond" class="headerlink" title="sync.Cond"></a>sync.Cond</h2><br/>



<h2 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h2><br/>



<h2 id="如何实现线程安全的-map-及其他类型"><a href="#如何实现线程安全的-map-及其他类型" class="headerlink" title="如何实现线程安全的 map 及其他类型"></a>如何实现线程安全的 map 及其他类型</h2><br/>



<h2 id="sync-Pool"><a href="#sync-Pool" class="headerlink" title="sync.Pool"></a>sync.Pool</h2><br/>



<h2 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h2><br/>



<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><br/>

<h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><br/>

<h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><br/>



<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><br/>



<h2 id="singleflight"><a href="#singleflight" class="headerlink" title="singleflight"></a>singleflight</h2><br/>



<h2 id="cyclicbarrier"><a href="#cyclicbarrier" class="headerlink" title="cyclicbarrier"></a>cyclicbarrier</h2><br/>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程-并发 map</title>
    <url>/2023/12/15/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%B9%B6%E5%8F%91map/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>



<h2 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h2><br/>



<h2 id="sync-RWMutex"><a href="#sync-RWMutex" class="headerlink" title="sync.RWMutex"></a>sync.RWMutex</h2><br/>



<h2 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h2><br/>



<h2 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h2><br/>



<h2 id="sync-Cond"><a href="#sync-Cond" class="headerlink" title="sync.Cond"></a>sync.Cond</h2><br/>



<h2 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h2><br/>



<h2 id="如何实现线程安全的-map-及其他类型"><a href="#如何实现线程安全的-map-及其他类型" class="headerlink" title="如何实现线程安全的 map 及其他类型"></a>如何实现线程安全的 map 及其他类型</h2><br/>



<h2 id="sync-Pool"><a href="#sync-Pool" class="headerlink" title="sync.Pool"></a>sync.Pool</h2><br/>



<h2 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h2><br/>



<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><br/>

<h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><br/>

<h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><br/>



<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><br/>



<h2 id="singleflight"><a href="#singleflight" class="headerlink" title="singleflight"></a>singleflight</h2><br/>



<h2 id="cyclicbarrier"><a href="#cyclicbarrier" class="headerlink" title="cyclicbarrier"></a>cyclicbarrier</h2><br/>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 并发编程-并发模式</title>
    <url>/2023/12/15/Go/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸟窝的《深入理解 Go 并发编程》读书笔记以及其他go并发编程知识学习的汇总，持续完善中。</p>
<br/>



<h2 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h2><br/>



<h2 id="sync-RWMutex"><a href="#sync-RWMutex" class="headerlink" title="sync.RWMutex"></a>sync.RWMutex</h2><br/>



<h2 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h2><br/>



<h2 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h2><br/>



<h2 id="sync-Cond"><a href="#sync-Cond" class="headerlink" title="sync.Cond"></a>sync.Cond</h2><br/>



<h2 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h2><br/>



<h2 id="如何实现线程安全的-map-及其他类型"><a href="#如何实现线程安全的-map-及其他类型" class="headerlink" title="如何实现线程安全的 map 及其他类型"></a>如何实现线程安全的 map 及其他类型</h2><br/>



<h2 id="sync-Pool"><a href="#sync-Pool" class="headerlink" title="sync.Pool"></a>sync.Pool</h2><br/>



<h2 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h2><br/>



<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><br/>

<h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><br/>

<h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><br/>



<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><br/>



<h2 id="singleflight"><a href="#singleflight" class="headerlink" title="singleflight"></a>singleflight</h2><br/>



<h2 id="cyclicbarrier"><a href="#cyclicbarrier" class="headerlink" title="cyclicbarrier"></a>cyclicbarrier</h2><br/>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 的使用</title>
    <url>/2023/10/13/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/Redis%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>日常工作中经常会用到 <code>Redis</code>,除了作为缓存使用，<code>Redis</code>还有其他用途（<a href="https://mp.weixin.qq.com/s/GoKekfj1bnifMBJ6E0sDpQ%EF%BC%89%EF%BC%8C%E7%BB%93%E5%90%88%E6%97%A5%E5%B8%B8%E5%B7%A5%E4%BD%9C%EF%BC%8C%E5%AF%B9%60Redis%60%E7%9A%84%E4%BD%BF%E7%94%A8%E8%BF%9B%E8%A1%8C%E6%80%BB%E7%BB%93%E3%80%82">https://mp.weixin.qq.com/s/GoKekfj1bnifMBJ6E0sDpQ），结合日常工作，对`Redis`的使用进行总结。</a></p>
<br/>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><br/>



<h2 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h2><h3 id="单点"><a href="#单点" class="headerlink" title="单点"></a>单点</h3><br/>

<h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><br/>

<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><br/>





<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h4 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h4><h5 id="1、旁路缓存-Cache-Aside-Lazy-Loading"><a href="#1、旁路缓存-Cache-Aside-Lazy-Loading" class="headerlink" title="1、旁路缓存 Cache-Aside (Lazy Loading)"></a>1、旁路缓存 Cache-Aside (Lazy Loading)</h5><br/>

<h5 id="2、读穿透模式（Read-Through-Pattern）"><a href="#2、读穿透模式（Read-Through-Pattern）" class="headerlink" title="2、读穿透模式（Read-Through Pattern）"></a>2、读穿透模式（Read-Through Pattern）</h5><br/>

<h5 id="3、写穿透模式（Write-Through-Pattern）"><a href="#3、写穿透模式（Write-Through-Pattern）" class="headerlink" title="3、写穿透模式（Write-Through Pattern）"></a>3、写穿透模式（Write-Through Pattern）</h5><br/>

<h5 id="4、异步缓存写入（Write-Behind-Pattern）"><a href="#4、异步缓存写入（Write-Behind-Pattern）" class="headerlink" title="4、异步缓存写入（Write-Behind Pattern）"></a>4、异步缓存写入（Write-Behind Pattern）</h5><br/>



<h4 id="缓存淘汰策略"><a href="#缓存淘汰策略" class="headerlink" title="缓存淘汰策略"></a>缓存淘汰策略</h4><h5 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h5><p>Redis 4.0版本开始增加了LFU缓存淘汰策略，也采用数据随机筛选规则，然后依据数据的热度值排序，淘汰掉热度值较低的数据。</p>
<h5 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h5><p>按照官方文档的介绍，Redis所实现的是一种近似的LRU算法，每次随机选取一批数据进行LRU淘汰，而不是针对所有的数据，通过牺牲部分准确率来提高LRU算法的执行效率。</p>
<p>Redis内部只使用Hash表缓存了数据，并没有创建一个专门针对LRU算法的双向链表，之所以这样处理也是因为以下几个原因：</p>
<ul>
<li>筛选规则，Redis 是随机抽取一批数据去按照淘汰策略排序，不再需要对所有数据排序；</li>
<li>性能问题，每次数据访问都可能涉及数据移位，性能会有少许损失；</li>
<li>内存问题，Redis对内存的使用一向很“抠门”，数据结构都很精简，尽量不使用复杂的数据结构管理数据；</li>
<li>策略配置，如果线上Redis实例动态修改淘汰策略会触发全部数据的结构性改变，这个Redis系统无法承受的。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LRU_BITS</span> <span class="token expression"><span class="token number">24</span></span></span>
 
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisObject</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">unsigned</span> type<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> encoding<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> lru<span class="token operator">:</span>LRU_BITS<span class="token punctuation">;</span> <span class="token comment">/* LRU time (relative to global lru_clock) or
                            * LFU data (least significant 8 bits frequency
                            * and most significant 16 bits access time). */</span>
    <span class="token keyword">int</span> refcount<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> robj<span class="token punctuation">;</span>


<span class="token comment">// 默认的LRU时钟单位是秒，可以修改LRU_CLOCK_RESOLUTION宏来改变单位，</span>
<span class="token comment">// LRU时钟更新的频率也和server.hz参数有关。</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">LRU_CLOCK</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> lruclock<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">/</span>server<span class="token punctuation">.</span>hz <span class="token operator">&lt;=</span> LRU_CLOCK_RESOLUTION<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">atomicGet</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>lruclock<span class="token punctuation">,</span>lruclock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        lruclock <span class="token operator">=</span> <span class="token function">getLRUClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> lruclock<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于 lru 字段仅占用了 <strong>24bit</strong> 的空间，按秒为单位也只能存储194天，所以可能会出现一个意想不到的结果，即间隔194天访问 Key 后标记的时间戳一样，Redis LRU 淘汰策略局部失效。</p>
<p>算法缺陷：</p>
<p>LRU算法仅关注数据的访问时间或访问顺序，忽略了访问次数的价值，在淘汰数据过程中可能会淘汰掉热点数据。</p>
<p><a href="https://mmbiz.qpic.cn/sz_mmbiz_png/4g5IMGibSxt6aN9pOy4j2jBuicNjXsrpjlzQvZ0fmFqfLmc0WJefvn0pw5txn2gKIIO8ADLbgSNvC1sa1FribuyibQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1">LRU算法缺陷图示</a></p>
<p>如上图所示，时间轴自左向右，数据A&#x2F;B&#x2F;C在同一段时间内被分别访问的数次。数据C是最近一次访问的数据，按照LRU算法排列数据的热度是C&gt;B&gt;A，而数据的真实热度是B&gt;A&gt;C。</p>
<p>这个是LRU算法的原理性问题，自然也会在Redis 近似LRU算法中呈现，为了解决这个问题衍生出来LFU算法。</p>
]]></content>
      <categories>
        <category>基础组件</category>
      </categories>
      <tags>
        <tag>Cache</tag>
        <tag>Redis</tag>
        <tag>基础组件</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《高性能 MySQL》 MySQL 架构与历史</title>
    <url>/2022/11/23/SQL/%E3%80%8AAdvance%20MySQL%E3%80%8B%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%8E%86%E5%8F%B2/</url>
    <content><![CDATA[<h1 id="《高性能-MySQL》MySQL-架构与历史"><a href="#《高性能-MySQL》MySQL-架构与历史" class="headerlink" title="《高性能 MySQL》MySQL 架构与历史"></a>《高性能 MySQL》MySQL 架构与历史</h1><p><code>参考自《高性能 MySQL 3rd Edition》-by Baron Schwartz, Peter Zaitsev, Vadim Tkachenko。</code></p>
<p>MySQL 拥有的是分层架构，上层是服务层的服务和查询执行引擎，下层是存储引擎。</p>
<p>MySQL 的精髓在于存储引擎和服务层之间的处理查询时如果通过 API 交互。</p>
<p>MySQL 最初基于 <code>ISAM</code> 构建（后来被 <code>MyISAM</code> 取代）， MySQL 5.0 后，对95%以上的用户 <code>InnoDB</code> 是最好的选择。</p>
<div class="tabs" id="架构介绍"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="架构介绍-1">MySQL 服务器逻架构</button><button type="button" class="tab " data-href="架构介绍-2">OLTP 与 OLAP</button></ul><div class="tab-contents"><div class="tab-item-content active" id="架构介绍-1"><p> #todo 补充图</p></div><div class="tab-item-content" id="架构介绍-2"><p> </p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<br/>

<h2 id="1-1-MySQL-逻辑架构"><a href="#1-1-MySQL-逻辑架构" class="headerlink" title="1.1 MySQL 逻辑架构"></a>1.1 MySQL 逻辑架构</h2><br/>

<h2 id="1-2-并发控制"><a href="#1-2-并发控制" class="headerlink" title="1.2 并发控制"></a>1.2 并发控制</h2><br/>

<h2 id="1-3-事务"><a href="#1-3-事务" class="headerlink" title="1.3 事务"></a>1.3 事务</h2><br/>

<h2 id="1-4-多版本并发控制"><a href="#1-4-多版本并发控制" class="headerlink" title="1.4 多版本并发控制"></a>1.4 多版本并发控制</h2><br/>

<h2 id="1-5-MySQL-存储引擎"><a href="#1-5-MySQL-存储引擎" class="headerlink" title="1.5 MySQL 存储引擎"></a>1.5 MySQL 存储引擎</h2><br/>

<h2 id="1-6-MySQL-时间线"><a href="#1-6-MySQL-时间线" class="headerlink" title="1.6 MySQL 时间线"></a>1.6 MySQL 时间线</h2><br/>

<h2 id="1-7-开发者模式"><a href="#1-7-开发者模式" class="headerlink" title="1.7 开发者模式"></a>1.7 开发者模式</h2><br/>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>拆书系列</tag>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>etcd 工作问题汇总</title>
    <url>/2022/10/13/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/etcd/</url>
    <content><![CDATA[<p>1、etcd 压缩导致服务etcd句柄关闭</p>
<p>2、etcd lock(涉及到lease,,Grant函数) ttl 设置<code>3s</code>导致集群同步超时。</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>Cache</tag>
        <tag>NoSQL</tag>
        <tag>etcd</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 基础镜像构建示例</title>
    <url>/2024/01/14/%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA/Docker%20build/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>服务更新基础镜像.</p>
<h3 id="镜像Dockfile"><a href="#镜像Dockfile" class="headerlink" title="镜像Dockfile"></a>镜像Dockfile</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> python:3.7</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /usr/src/app</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./watermark ./</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./requirements.txt ./</span>

<span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y vim libgl1-mesa-glx &amp;&amp;  pip install -r requirements.txt  -i https://pypi.tuna.tsinghua.edu.cn/simple &amp;&amp; pip uninstall -y PyMuPDF &amp;&amp; pip install PyMuPDF -i https://pypi.tuna.tsinghua.edu.cn/simple &amp;&amp; pip uninstall -y opencv-python opencv-contrib-python opencv-python-headless &amp;&amp; pip install opencv-python==4.7.0.72</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /root</span>

<span class="token instruction"><span class="token keyword">COPY</span> ./start_server.sh /root/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="构建命令"><a href="#构建命令" class="headerlink" title="构建命令"></a>构建命令</h3><p>1、docker build</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build  <span class="token parameter variable">--platform</span><span class="token operator">=</span>linux/amd64 <span class="token parameter variable">-t</span> watermark:2.0 --no-cache <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>2、docker run</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token parameter variable">--rm</span> watermrak:2.0 <span class="token function">bash</span>

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--name</span> watermark_server_2_0 watermrak:2.0 <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>工程构建</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《Modern CMake for C++》</title>
    <url>/2022/07/13/%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA/Modern%20CMake/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>CMake</category>
      </categories>
      <tags>
        <tag>工程构建</tag>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 工程管理</title>
    <url>/2022/07/13/%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA/golang%20%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>工程构建</tag>
        <tag>go mod</tag>
      </tags>
  </entry>
  <entry>
    <title>pybind11 使用概要</title>
    <url>/2022/03/13/Job%20Relative/pybind11%20%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>基于暗水印翻译</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="技术调研"><a href="#技术调研" class="headerlink" title="技术调研"></a>技术调研</h2><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>C++ 调用 Python</tag>
        <tag>pybind11</tag>
        <tag>Python 调用 C++</tag>
      </tags>
  </entry>
  <entry>
    <title>proto 接入工程的方法</title>
    <url>/2022/07/13/%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA/proto%E6%8E%A5%E5%85%A5%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>potobuf</category>
      </categories>
      <tags>
        <tag>工程构建</tag>
        <tag>proto</tag>
      </tags>
  </entry>
  <entry>
    <title>日志系统接入探索</title>
    <url>/2022/09/03/Job%20Relative/ELK,%20loki%20%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6%E6%8E%A2%E7%B4%A2/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="预研"><a href="#预研" class="headerlink" title="预研"></a>预研</h2><h3 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h3><h3 id="loki"><a href="#loki" class="headerlink" title="loki"></a>loki</h3><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2>]]></content>
      <categories>
        <category>job</category>
      </categories>
      <tags>
        <tag>job</tag>
        <tag>ELK</tag>
        <tag>loki</tag>
      </tags>
  </entry>
  <entry>
    <title>grpc_server 实现</title>
    <url>/2022/03/13/Job%20Relative/gprc_server%20%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>golang</category>
        <category>golang 框架</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>grpc</tag>
      </tags>
  </entry>
  <entry>
    <title>一种 http_server搭建的方式</title>
    <url>/2022/09/13/Job%20Relative/%E4%B8%80%E4%B8%AA%E8%BD%BB%E9%87%8F%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><br/>



<h2 id="服务架构"><a href="#服务架构" class="headerlink" title="服务架构"></a>服务架构</h2><p>基于 <code>watermark_server</code></p>
]]></content>
      <categories>
        <category>job</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>job</tag>
      </tags>
  </entry>
  <entry>
    <title>一种PDF分栏识别算法实现</title>
    <url>/2021/07/22/Job%20Relative/%E4%B8%80%E7%A7%8DPDF%E5%88%86%E6%A0%8F%E8%AF%86%E5%88%AB%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>job</category>
      </categories>
      <tags>
        <tag>job</tag>
        <tag>专利</tag>
      </tags>
  </entry>
  <entry>
    <title>一种关于内存缓存实现的方法</title>
    <url>/2022/02/13/Job%20Relative/%E4%B8%80%E7%A7%8D%E5%85%B3%E4%BA%8E%E5%86%85%E5%AD%98%E7%BC%93%E5%AD%98%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>job</category>
      </categories>
      <tags>
        <tag>job</tag>
      </tags>
  </entry>
  <entry>
    <title>一种多终端知识库策略设计思路</title>
    <url>/2022/03/13/Job%20Relative/%E4%B8%80%E7%A7%8D%E7%9F%A5%E8%AF%86%E5%BA%93%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h2><h2 id="兼容性及拓展性"><a href="#兼容性及拓展性" class="headerlink" title="兼容性及拓展性"></a>兼容性及拓展性</h2>]]></content>
      <categories>
        <category>job</category>
      </categories>
      <tags>
        <tag>job</tag>
      </tags>
  </entry>
  <entry>
    <title>工作中见到的一种消息触达模型</title>
    <url>/2022/09/13/Job%20Relative/%E4%B8%80%E7%A7%8D%E6%B6%88%E6%81%AF%E8%A7%A6%E8%BE%BE%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>基于消息重构</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2>]]></content>
      <categories>
        <category>job</category>
      </categories>
      <tags>
        <tag>job</tag>
      </tags>
  </entry>
  <entry>
    <title>工作专利撰写小结</title>
    <url>/2021/07/22/Job%20Relative/%E4%B8%93%E5%88%A9%E6%92%B0%E5%86%99%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>job</category>
      </categories>
      <tags>
        <tag>job</tag>
        <tag>专利</tag>
      </tags>
  </entry>
  <entry>
    <title>一种安全终端离线卸载的授权方式</title>
    <url>/2022/09/13/Job%20Relative/%E4%B8%80%E7%A7%8D%E7%A6%BB%E7%BA%BF%E6%8E%88%E6%9D%83%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="设计背景"><a href="#设计背景" class="headerlink" title="设计背景"></a>设计背景</h2><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><h2 id="kms-server-钥匙盘服务"><a href="#kms-server-钥匙盘服务" class="headerlink" title="kms_server 钥匙盘服务"></a>kms_server 钥匙盘服务</h2>]]></content>
      <categories>
        <category>job</category>
      </categories>
      <tags>
        <tag>job</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 在工作中的使用</title>
    <url>/2023/10/13/Job%20Relative/%E5%B7%A5%E4%BD%9C%E4%B8%AD%20Redis%20%E9%82%A3%E7%82%B9%E4%BA%8B%E5%84%BF/</url>
    <content><![CDATA[<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h2 id="缓存设计思路"><a href="#缓存设计思路" class="headerlink" title="缓存设计思路"></a>缓存设计思路</h2><h3 id="旁路缓存-Cache-Aside-Lazy-Loading"><a href="#旁路缓存-Cache-Aside-Lazy-Loading" class="headerlink" title="旁路缓存 Cache-Aside (Lazy Loading)"></a>旁路缓存 Cache-Aside (Lazy Loading)</h3><br/>

<h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><br/>

<h3 id="网络策略"><a href="#网络策略" class="headerlink" title="网络策略"></a>网络策略</h3><br/>



<h3 id="知识库策略"><a href="#知识库策略" class="headerlink" title="知识库策略"></a>知识库策略</h3><br/>







<h2 id="（网络、开关）策略缓存设计思路"><a href="#（网络、开关）策略缓存设计思路" class="headerlink" title="（网络、开关）策略缓存设计思路"></a>（网络、开关）策略缓存设计思路</h2><br/>

<h2 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h2><br/>

<h2 id="缓存服务拆分-cron-task"><a href="#缓存服务拆分-cron-task" class="headerlink" title="缓存服务拆分 cron_task"></a>缓存服务拆分 cron_task</h2><br/>
]]></content>
      <categories>
        <category>基础组件</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>基础组件</tag>
      </tags>
  </entry>
  <entry>
    <title>工作中常用的命令行汇总</title>
    <url>/2022/09/13/Job%20Relative/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>(1) save镜像</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">docker save xxx_server:1.0 | gzip &gt; path&#x2F;to&#x2F;save&#x2F;xxx_server_1.0.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<br/>

<p>(2) run 镜像</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">docker run -rm -it --name mynginx -d nginx:1.0 bash # 临时run镜像<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h3><br/>



<h3 id="ab"><a href="#ab" class="headerlink" title="ab"></a>ab</h3><br/>

<h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><br/>

<h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><br/>

<h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><br/>

<h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><br/>

<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><br/>

<h3 id="pgrep"><a href="#pgrep" class="headerlink" title="pgrep"></a>pgrep</h3><br/>







<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2>]]></content>
      <categories>
        <category>job</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>job</tag>
        <tag>Linux</tag>
        <tag>shell command</tag>
      </tags>
  </entry>
  <entry>
    <title>飞书等第三方渠道的审批对接</title>
    <url>/2022/02/13/Job%20Relative/%E9%A3%9E%E4%B9%A6%E7%AD%89%E5%A4%96%E9%83%A8%E6%B8%A0%E9%81%93%E5%AF%B9%E6%8E%A5/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>飞书，钉钉，第三方客户OA系统对接</p>
<h2 id="账号同步"><a href="#账号同步" class="headerlink" title="账号同步"></a>账号同步</h2><br/>



<h2 id="审批对接"><a href="#审批对接" class="headerlink" title="审批对接"></a>审批对接</h2>]]></content>
      <categories>
        <category>job</category>
      </categories>
      <tags>
        <tag>job</tag>
        <tag>审批流</tag>
      </tags>
  </entry>
  <entry>
    <title>GDB(LLDB)调试方法</title>
    <url>/2020/03/13/%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95/GDB%EF%BC%88LLDB%EF%BC%89%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="GDB-and-LLDB-Command-Examples"><a href="#GDB-and-LLDB-Command-Examples" class="headerlink" title="GDB and LLDB Command Examples"></a>GDB and LLDB Command Examples</h2><p><a href="https://developer.apple.com/library/archive/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-command-examples.html">https://developer.apple.com/library/archive/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-command-examples.html</a></p>
<br/>

<h2 id="Debug-C-in-Visual-Studio-Code"><a href="#Debug-C-in-Visual-Studio-Code" class="headerlink" title="Debug C++ in Visual Studio Code"></a>Debug C++ in Visual Studio Code</h2><p><a href="https://code.visualstudio.com/docs/cpp/cpp-debug">https://code.visualstudio.com/docs/cpp/cpp-debug</a></p>
]]></content>
      <categories>
        <category>程序调试</category>
        <category>debugging</category>
      </categories>
      <tags>
        <tag>gdb</tag>
        <tag>lldb</tag>
        <tag>程序调试</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《STL 源码剖析》仿函数（functors）</title>
    <url>/2021/07/08/STL/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E4%BB%BF%E5%87%BD%E6%95%B0%EF%BC%88functors%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《STL源码剖析》仿函数（functors）"><a href="#《STL源码剖析》仿函数（functors）" class="headerlink" title="《STL源码剖析》仿函数（functors）"></a>《STL源码剖析》仿函数（functors）</h1><p><code>参考自《STL 源码剖析》-侯捷著。</code></p>
<br/>]]></content>
      <categories>
        <category>C++ STL</category>
      </categories>
      <tags>
        <tag>拆书系列</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《STL源码剖析》序列式容器（sequence containers）</title>
    <url>/2021/06/18/STL/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E5%BA%8F%E5%88%97%E5%BC%8F%E5%AE%B9%E5%99%A8%EF%BC%88sequence%20containers%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《STL源码剖析》序列式容器（sequence-containers）"><a href="#《STL源码剖析》序列式容器（sequence-containers）" class="headerlink" title="《STL源码剖析》序列式容器（sequence containers）"></a>《STL源码剖析》序列式容器（sequence containers）</h1><p><code>参考自《STL 源码剖析》-侯捷著。</code></p>
<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/%E5%BA%8F%E5%88%97%E5%BC%8F%E5%AE%B9%E5%99%A8.png">

<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p><code>vector 的实现技术，关键在于其对大小的控制和重新配置时到的数据移动效率。</code></p>
<br/>

<h3 id="vector-代码摘要（GCC-版本）"><a href="#vector-代码摘要（GCC-版本）" class="headerlink" title="vector 代码摘要（GCC 版本）"></a>vector 代码摘要（GCC 版本）</h3><p><code>stl_vector.h 定义的 vector 会调用到 vector.tcc 里的模板方法，基本以如 _M_xxx_xxx_xxx() 命名。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> <span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">vector</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">protected</span> <span class="token class-name">_Vector_base</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token class-name">_Alloc</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token keyword">typedef</span> _Tp      value_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Base</span><span class="token double-colon punctuation">::</span>pointer                 pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc_traits</span><span class="token double-colon punctuation">::</span>const_pointer  const_pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc_traits</span><span class="token double-colon punctuation">::</span>reference       eference<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc_traits</span><span class="token double-colon punctuation">::</span>const_reference    const_reference<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> __gnu_cxx<span class="token double-colon punctuation">::</span>__normal_iterator<span class="token operator">&lt;</span>pointer<span class="token punctuation">,</span> vector<span class="token operator">></span> iterator<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> __gnu_cxx<span class="token double-colon punctuation">::</span>__normal_iterator<span class="token operator">&lt;</span>const_pointer<span class="token punctuation">,</span> vector<span class="token operator">></span> const_iterator<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>reverse_iterator<span class="token operator">&lt;</span>const_iterator<span class="token operator">></span>  const_reverse_iterator<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>reverse_iterator<span class="token operator">&lt;</span>iterator<span class="token operator">></span>        reverse_iterator<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> size_t  						size_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> ptrdiff_t      		difference_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Alloc             allocator_type<span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h3 id="vector-的迭代器"><a href="#vector-的迭代器" class="headerlink" title="vector 的迭代器"></a>vector 的迭代器</h3><p>普通指针<strong>具备随机存取</strong>的能力。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Base</span><span class="token double-colon punctuation">::</span>pointer                       pointer<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> __gnu_cxx<span class="token double-colon punctuation">::</span>__normal_iterator<span class="token operator">&lt;</span>pointer<span class="token punctuation">,</span> vector<span class="token operator">></span> iterator<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br/>

<h3 id="vector-的数据结构"><a href="#vector-的数据结构" class="headerlink" title="vector 的数据结构"></a>vector 的数据结构</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">_Vector_base</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//...</span>
<span class="token keyword">struct</span> <span class="token class-name">_Vector_impl_data</span> <span class="token punctuation">&#123;</span>
 pointer _M_start<span class="token punctuation">;</span>     <span class="token comment">// 表示目前使用空间的头</span>
 pointer _M_finish<span class="token punctuation">;</span>    <span class="token comment">// 表示目前使用空间的尾</span>
 pointer _M_end_of_storage<span class="token punctuation">;</span>    <span class="token comment">// 表示目前可用空间的尾</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">_Vector_impl</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_Tp_alloc_type</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">_Vector_impl_data</span></span> <span class="token punctuation">&#123;</span>
<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
 _Vector_impl _M_impl<span class="token punctuation">;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
 <span class="token keyword">void</span> <span class="token function">_M_create_storage</span><span class="token punctuation">(</span>size_t __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">+</span> __n<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有了<code>_M_start</code> <code>_M_finish</code> <code>_M_end_of_storage</code>这三个迭代器，可以轻松提供 <code>begin()</code>、 <code>end()</code> 、<code>size()</code> 、<code>capacity()</code>、 <code>empty()</code>、 <code>operator[]</code> 、<code>front()</code>、<code>back()</code>接口。</p>
<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/vector.png">

<br/>

<p><code>关于 STL 中 vector 的成长为什么按两倍成长，可参</code><a href="https://www.zhihu.com/question/36538542"> 知乎的讨论.</a></p>
<p><code>以及</code><a href="https://www.drdobbs.com/c-made-easier-how-vectors-grow/184401375">设计者Andrew Koenig 的文章介绍.</a></p>
<br/>

<h3 id="vector-初始化"><a href="#vector-初始化" class="headerlink" title="vector 初始化"></a>vector 初始化</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Called by the first initialize_dispatch above and by the</span>
<span class="token comment">// vector(n,value,a) constructor.</span>
<span class="token comment">// 填充并予以初始化</span>
<span class="token keyword">void</span> <span class="token function">_M_fill_initialize</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">=</span>
   std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_fill_n_a</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> __value<span class="token punctuation">,</span>
                                 <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Size</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">inline</span> _ForwardIterator
<span class="token function">uninitialized_fill_n</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _Size __n<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>value_type
    _ValueType<span class="token punctuation">;</span>
    <span class="token comment">// Trivial types can have deleted assignment, so using std::fill</span>
   <span class="token comment">// would be ill-formed. Require assignability before using std::fill:</span>
   <span class="token keyword">const</span> <span class="token keyword">bool</span> __assignable <span class="token operator">=</span> is_copy_assignable<span class="token operator">&lt;</span>_ValueType<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">;</span>
   <span class="token comment">// 配置后填充</span>
   <span class="token keyword">return</span> <span class="token class-name">__uninitialized_fill_n</span><span class="token operator">&lt;</span><span class="token function">__is_trivial</span><span class="token punctuation">(</span>_ValueType<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> __assignable<span class="token operator">></span><span class="token double-colon punctuation">::</span>
   <span class="token function">__uninit_fill_n</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//针对 trivial constructor 的特化版本，调用 std::fill_n</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__uninitialized_fill_n</span><span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Size</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
 <span class="token keyword">static</span> _ForwardIterator
 <span class="token function">__uninit_fill_n</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _Size __n<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
   <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">fill_n</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//针对 non trivial constructor 的特化版本，调用 ::new</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">bool</span> _TrivialValueType<span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__uninitialized_fill_n</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Size</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">static</span> _ForwardIterator
 <span class="token function">__uninit_fill_n</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _Size __n<span class="token punctuation">,</span>
                <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    _ForwardIterator __cur <span class="token operator">=</span> __first<span class="token punctuation">;</span>
     __try <span class="token punctuation">&#123;</span>
       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> __n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>__n<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">++</span>__cur<span class="token punctuation">)</span>
         std<span class="token double-colon punctuation">::</span><span class="token function">_Construct</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">__addressof</span><span class="token punctuation">(</span><span class="token operator">*</span>__cur<span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> __cur<span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
     <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
       __throw_exception_again<span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h3 id="vector-之-insert"><a href="#vector-之-insert" class="headerlink" title="vector 之 insert()"></a>vector 之 insert()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 还有备用空间</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GROW</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                           __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">++</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">;</span>
  <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GREW</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 无备用空间</span>
<span class="token keyword">else</span>
    <span class="token function">_M_realloc_insert</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// _M_realloc_insert</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span> <span class="token function">_M_realloc_insert</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> _Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
   <span class="token keyword">const</span> size_type __len <span class="token operator">=</span> <span class="token function">_M_check_len</span><span class="token punctuation">(</span><span class="token function">size_type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"vector::_M_realloc_insert"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   pointer __old_start <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">;</span>
   pointer __old_finish <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">;</span>
   <span class="token keyword">const</span> size_type __elems_before <span class="token operator">=</span> __position <span class="token operator">-</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   pointer <span class="token function">__new_start</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate</span><span class="token punctuation">(</span>__len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   pointer <span class="token function">__new_finish</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">)</span><span class="token punctuation">;</span>
   __try <span class="token punctuation">&#123;</span>
     <span class="token comment">// 配置大小为原来的2倍</span>
     _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span>
                              __new_start <span class="token operator">+</span> __elems_before<span class="token punctuation">,</span>
                              std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     __new_finish <span class="token operator">=</span> <span class="token function">pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token keyword">if</span> <span class="token function">_GLIBCXX17_CONSTEXPR</span> <span class="token punctuation">(</span><span class="token function">_S_use_relocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       __new_finish <span class="token operator">=</span> <span class="token function">_S_relocate</span><span class="token punctuation">(</span>__old_start<span class="token punctuation">,</span> __position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  __new_start<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token operator">++</span>__new_finish<span class="token punctuation">;</span>

       __new_finish <span class="token operator">=</span> <span class="token function">_S_relocate</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __old_finish<span class="token punctuation">,</span>
                                  __new_finish<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
       <span class="token comment">// 将原来 vector 的内容拷到新的 vector</span>
       <span class="token comment">// std::__uninitialized_move_if_noexcept_a() 最终会调用到</span>
       <span class="token comment">// std::uninitialized_copy()</span>
       __new_finish <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_if_noexcept_a</span> <span class="token punctuation">(</span>__old_start<span class="token punctuation">,</span>                                                        __position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __new_start<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token operator">++</span>__new_finish<span class="token punctuation">;</span>

       __new_finish <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_if_noexcept_a</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                     __old_finish<span class="token punctuation">,</span>  __new_finish<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__new_finish<span class="token punctuation">)</span>
       _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span>  __new_start <span class="token operator">+</span> __elems_before<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">else</span>
       std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">,</span> __new_finish<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">_M_deallocate</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">,</span> __len<span class="token punctuation">)</span><span class="token punctuation">;</span>
     __throw_exception_again<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token comment">// 析构并释放原 vector</span>
   <span class="token keyword">if</span> <span class="token function">_GLIBCXX17_CONSTEXPR</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">_S_use_relocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__old_start<span class="token punctuation">,</span> __old_finish<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   _GLIBCXX_ASAN_ANNOTATE_REINIT<span class="token punctuation">;</span>
   <span class="token function">_M_deallocate</span><span class="token punctuation">(</span>__old_start<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage <span class="token operator">-</span> __old_start<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 调整迭代器，指向新的 vector</span>
   <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">=</span> __new_start<span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">=</span> __new_finish<span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage <span class="token operator">=</span> __new_start <span class="token operator">+</span> __len<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
*  @brief  Inserts given rvalue into %vector before specified iterator.
*  @param  __position  A const_iterator into the %vector.
*  @param  __x  Data to be inserted.
*  @return  An iterator that points to the inserted data.
*
*  This function will insert a copy of the given rvalue before
*  the specified location.  Note that this kind of operation
*  could be expensive for a %vector and if it is frequently
*  used the user should consider using std::list.
*/</span>
iterator <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator __position<span class="token punctuation">,</span> value_type<span class="token operator">&amp;&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
  <span class="token keyword">return</span> <span class="token function">_M_insert_rval</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">auto</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
    <span class="token function">_M_insert_rval</span><span class="token punctuation">(</span>const_iterator __position<span class="token punctuation">,</span> value_type<span class="token operator">&amp;&amp;</span> __v<span class="token punctuation">)</span> <span class="token operator">-></span> iterator <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token keyword">auto</span> __n <span class="token operator">=</span> __position <span class="token operator">-</span> <span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>__position <span class="token operator">==</span> <span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GROW</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                   std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>__v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">++</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">;</span>
            <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GREW</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
          <span class="token function">_M_insert_aux</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __n<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>__v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span>
        <span class="token function">_M_realloc_insert</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __n<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>__v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">+</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>


<span class="token comment">/** @file bits/vector.tcc
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername&#123;vector&#125;
 */</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_M_insert_aux</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> <span class="token keyword">bool</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_p <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span><span class="token function">_M_end_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">copy_backward</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span> 
                       <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>__position <span class="token operator">=</span> __x<span class="token punctuation">;</span>
    <span class="token operator">++</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> size_type __len <span class="token operator">=</span>
      <span class="token function">_M_check_len</span><span class="token punctuation">(</span><span class="token function">size_type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"vector&lt;bool>::_M_insert_aux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _Bit_pointer __q <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate</span><span class="token punctuation">(</span>__len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    iterator <span class="token function">__start</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">__addressof</span><span class="token punctuation">(</span><span class="token operator">*</span>__q<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    iterator __i <span class="token operator">=</span> <span class="token function">_M_copy_aligned</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __position<span class="token punctuation">,</span> __start<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>__i<span class="token operator">++</span> <span class="token operator">=</span> __x<span class="token punctuation">;</span>
    iterator __finish <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_deallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage <span class="token operator">=</span> __q <span class="token operator">+</span> <span class="token function">_S_nword</span><span class="token punctuation">(</span>__len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">=</span> __start<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">=</span> __finish<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator __position<span class="token punctuation">,</span> initializer_list<span class="token operator">&lt;</span>value_type<span class="token operator">></span> __l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">auto</span> __offset <span class="token operator">=</span> __position <span class="token operator">-</span> <span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">_M_range_insert</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __offset<span class="token punctuation">,</span> __l<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __l<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   std<span class="token double-colon punctuation">::</span><span class="token function">random_access_iterator_tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __offset<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_M_range_insert</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> 
  _ForwardIterator __first<span class="token punctuation">,</span>                                                           _ForwardIterator __last<span class="token punctuation">,</span>  std<span class="token double-colon punctuation">::</span>forward_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">const</span> size_type __n <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">distance</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 备用空间 >= 新增元素个数</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size_type</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage
                     <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">)</span> <span class="token operator">>=</span> __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         <span class="token comment">// 计算插入点之后的现有元素个数</span>
      <span class="token keyword">const</span> size_type __elems_after <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> __position<span class="token punctuation">;</span>
      pointer <span class="token function">__old_finish</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 插入点之后现有的元素个数 > 新增元素个数</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>__elems_after <span class="token operator">></span> __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GROW</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_a</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">-</span> __n<span class="token punctuation">,</span>
                                    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                                    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                                    <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">+=</span> __n<span class="token punctuation">;</span> <span class="token comment">// 将 vector 尾端标记后移</span>
        <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GREW</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_GLIBCXX_MOVE_BACKWARD3</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                __old_finish <span class="token operator">-</span> __n<span class="token punctuation">,</span> __old_finish<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __position<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入点开始插入新值</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 插入点之后现有的元素个数 &lt;= 新增元素个数</span>
        _ForwardIterator __mid <span class="token operator">=</span> __first<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">advance</span><span class="token punctuation">(</span>__mid<span class="token punctuation">,</span> __elems_after<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GROW</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_copy_a</span><span class="token punctuation">(</span>__mid<span class="token punctuation">,</span> __last<span class="token punctuation">,</span>
                                    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                                    <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">+=</span> __n <span class="token operator">-</span> __elems_after<span class="token punctuation">;</span>
        <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GREW</span><span class="token punctuation">(</span>__n <span class="token operator">-</span> __elems_after<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_a</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    __old_finish<span class="token punctuation">,</span>
                                    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                                    <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">+=</span> __elems_after<span class="token punctuation">;</span>
        <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GREW</span><span class="token punctuation">(</span>__elems_after<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __mid<span class="token punctuation">,</span> __position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 配置新的 vector 空间</span>
      <span class="token keyword">const</span> size_type __len <span class="token operator">=</span> <span class="token function">_M_check_len</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> <span class="token string">"vector::_M_range_insert"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      pointer <span class="token function">__new_start</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate</span><span class="token punctuation">(</span>__len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      pointer <span class="token function">__new_finish</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">)</span><span class="token punctuation">;</span>
      __try <span class="token punctuation">&#123;</span>
          <span class="token comment">// 1、先将旧 vector 的插入点之前的元素 copy 到新空间</span>
          __new_finish <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_if_noexcept_a</span>
            <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">,</span> __position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             __new_start<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 2、将新增元素 copy 到新空间</span>
          __new_finish <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_copy_a</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span>
                  __new_finish<span class="token punctuation">,</span>
                  <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 3、将旧 vector 的插入点之后的元素 copy 到新空间</span>
          __new_finish <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_if_noexcept_a</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                                                             <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                                              __new_finish<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">,</span> __new_finish<span class="token punctuation">,</span>
            <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">_M_deallocate</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">,</span> __len<span class="token punctuation">)</span><span class="token punctuation">;</span>
          __throw_exception_again<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">// 清除释放旧的 vector</span>
      std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
              <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      _GLIBCXX_ASAN_ANNOTATE_REINIT<span class="token punctuation">;</span>
      <span class="token function">_M_deallocate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">,</span>
              <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage
              <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 调整迭代器，指向新的 vector</span>
      <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">=</span> __new_start<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">=</span> __new_finish<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage <span class="token operator">=</span> __new_start <span class="token operator">+</span> __len<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
 <span class="token function">_M_fill_insert</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>__n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 备用空间 >= 新增元素个数</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size_type</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">)</span> 
     <span class="token operator">>=</span> __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   _Temporary_value <span class="token function">__tmp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
   value_type<span class="token operator">&amp;</span> __x_copy <span class="token operator">=</span> __tmp<span class="token punctuation">.</span><span class="token function">_M_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">const</span> size_type __elems_after <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> __position<span class="token punctuation">;</span>
   pointer <span class="token function">__old_finish</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>__elems_after <span class="token operator">></span> __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token comment">// 插入点之后现有的元素个数 > 新增元素个数</span>
     <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GROW</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
     std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_a</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">-</span> __n<span class="token punctuation">,</span>
                                 <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                                 <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                                 <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">+=</span> __n<span class="token punctuation">;</span>
     <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GREW</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">_GLIBCXX_MOVE_BACKWARD3</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                             __old_finish <span class="token operator">-</span> __n<span class="token punctuation">,</span> __old_finish<span class="token punctuation">)</span><span class="token punctuation">;</span>
     std<span class="token double-colon punctuation">::</span><span class="token function">fill</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __n<span class="token punctuation">,</span> __x_copy<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
     <span class="token comment">// 插入点之后现有的元素个数 &lt;= 新增元素个数</span>
       <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GROW</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">=</span>
         std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_fill_n_a</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
               __n <span class="token operator">-</span> __elems_after<span class="token punctuation">,</span>
               __x_copy<span class="token punctuation">,</span>
               <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GREW</span><span class="token punctuation">(</span>__n <span class="token operator">-</span> __elems_after<span class="token punctuation">)</span><span class="token punctuation">;</span>
       std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_a</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __old_finish<span class="token punctuation">,</span>
                 <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                 <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">+=</span> __elems_after<span class="token punctuation">;</span>
       <span class="token function">_GLIBCXX_ASAN_ANNOTATE_GREW</span><span class="token punctuation">(</span>__elems_after<span class="token punctuation">)</span><span class="token punctuation">;</span>
       std<span class="token double-colon punctuation">::</span><span class="token function">fill</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __old_finish<span class="token punctuation">,</span> __x_copy<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// 配置新的 vector 空间</span>
       <span class="token keyword">const</span> size_type __len <span class="token operator">=</span>
             <span class="token function">_M_check_len</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> <span class="token string">"vector::_M_fill_insert"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">const</span> size_type __elems_before <span class="token operator">=</span> __position <span class="token operator">-</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       pointer <span class="token function">__new_start</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate</span><span class="token punctuation">(</span>__len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       pointer <span class="token function">__new_finish</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">)</span><span class="token punctuation">;</span>
       __try <span class="token punctuation">&#123;</span>
       <span class="token comment">// 1、将新增元素以初值为__n, fill 到新空间</span>
       std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_fill_n_a</span><span class="token punctuation">(</span>__new_start <span class="token operator">+</span> __elems_before<span class="token punctuation">,</span>
             __n<span class="token punctuation">,</span> __x<span class="token punctuation">,</span>
             <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       __new_finish <span class="token operator">=</span> <span class="token function">pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token comment">// 2、将旧 vector 的插入点之前的元素 copy 到新空间</span>
       __new_finish
         <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_if_noexcept_a</span>
         <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">,</span> __position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          __new_start<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       __new_finish <span class="token operator">+=</span> __n<span class="token punctuation">;</span>
                 <span class="token comment">// 3、将旧 vector 的插入点之后的元素 copy 到新空间</span>
       __new_finish <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_move_if_noexcept_a</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                                              <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
                                              __new_finish<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">&#125;</span>
       <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__new_finish<span class="token punctuation">)</span>
         std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__new_start <span class="token operator">+</span> __elems_before<span class="token punctuation">,</span>
           __new_start <span class="token operator">+</span> __elems_before <span class="token operator">+</span> __n<span class="token punctuation">,</span>
           <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">else</span>
         std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">,</span> __new_finish<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">_M_deallocate</span><span class="token punctuation">(</span>__new_start<span class="token punctuation">,</span> __len<span class="token punctuation">)</span><span class="token punctuation">;</span>
       __throw_exception_again<span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>

     <span class="token comment">// 清除释放旧的 vector</span>
       std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">,</span>
             <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       _GLIBCXX_ASAN_ANNOTATE_REINIT<span class="token punctuation">;</span>
       <span class="token function">_M_deallocate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">,</span>
             <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token comment">// 调整迭代器，指向新的 vector</span>
       <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">=</span> __new_start<span class="token punctuation">;</span>
       <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">=</span> __new_finish<span class="token punctuation">;</span>
       <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_end_of_storage <span class="token operator">=</span> __new_start <span class="token operator">+</span> __len<span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/vector-insert.png">

<br/>

<br/>

<h3 id="vector-之-erase"><a href="#vector-之-erase" class="headerlink" title="vector 之 erase()"></a>vector 之 erase()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 清除某个位置的元素</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator
<span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_M_erase</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>__position <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token function">_GLIBCXX_MOVE3</span><span class="token punctuation">(</span>__position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __position<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token operator">--</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">;</span>
   _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">_GLIBCXX_ASAN_ANNOTATE_SHRINK</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> __position<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 清除 [first, last) 中的所有元素</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator
<span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_M_erase</span><span class="token punctuation">(</span>iterator __first<span class="token punctuation">,</span> iterator __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>__last <span class="token operator">!=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token function">_GLIBCXX_MOVE3</span><span class="token punctuation">(</span>__last<span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __first<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">_M_erase_at_end</span><span class="token punctuation">(</span>__first<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> __last<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">return</span> __first<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    <br/></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/vector-erase.png">

<br/>

<br/>

<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><h3 id="list-节点"><a href="#list-节点" class="headerlink" title="list 节点"></a>list 节点</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 双向链表</span>
<span class="token comment">/// Common part of a node in the %list.</span>
<span class="token keyword">struct</span> <span class="token class-name">_List_node_base</span> <span class="token punctuation">&#123;</span>
_List_node_base<span class="token operator">*</span> _M_next<span class="token punctuation">;</span>
_List_node_base<span class="token operator">*</span> _M_prev<span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span>
 <span class="token function">swap</span><span class="token punctuation">(</span>_List_node_base<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> _List_node_base<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT<span class="token punctuation">;</span>

<span class="token keyword">void</span>
 <span class="token function">_M_transfer</span><span class="token punctuation">(</span>_List_node_base<span class="token operator">*</span> <span class="token keyword">const</span> __first<span class="token punctuation">,</span>
             _List_node_base<span class="token operator">*</span> <span class="token keyword">const</span> __last<span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT<span class="token punctuation">;</span>

<span class="token keyword">void</span>
 <span class="token function">_M_reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT<span class="token punctuation">;</span>

<span class="token keyword">void</span>
 <span class="token function">_M_hook</span><span class="token punctuation">(</span>_List_node_base<span class="token operator">*</span> <span class="token keyword">const</span> __position<span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT<span class="token punctuation">;</span>

<span class="token keyword">void</span>
 <span class="token function">_M_unhook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h3 id="list-迭代器"><a href="#list-迭代器" class="headerlink" title="list 迭代器"></a>list 迭代器</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">_List_iterator</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">typedef</span> _List_iterator<span class="token operator">&lt;</span>_Tp<span class="token operator">></span>        _Self<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _List_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span>            _Node<span class="token punctuation">;</span>

 <span class="token keyword">typedef</span> ptrdiff_t                difference_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>bidirectional_iterator_tag    iterator_category<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp                value_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp<span class="token operator">*</span>                pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp<span class="token operator">&amp;</span>                reference<span class="token punctuation">;</span>

<span class="token function">_List_iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT
<span class="token operator">:</span> <span class="token function">_M_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">explicit</span>
<span class="token function">_List_iterator</span><span class="token punctuation">(</span>__detail<span class="token double-colon punctuation">::</span>_List_node_base<span class="token operator">*</span> __x<span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT
<span class="token operator">:</span> <span class="token function">_M_node</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>

 _Self <span class="token function">_M_const_cast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

 <span class="token comment">// Must downcast from _List_node_base to _List_node to get to value.</span>
 reference <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Node<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>_M_node<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">_M_valptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

 pointer <span class="token keyword">operator</span><span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Node<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>_M_node<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">_M_valptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

 _Self<span class="token operator">&amp;</span>  <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
    _M_node <span class="token operator">=</span> _M_node<span class="token operator">-></span>_M_next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 _Self <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
    _Self __tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    _M_node <span class="token operator">=</span> _M_node<span class="token operator">-></span>_M_next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 _Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
    _M_node <span class="token operator">=</span> _M_node<span class="token operator">-></span>_M_prev<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 _Self <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
    _Self __tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    _M_node <span class="token operator">=</span> _M_node<span class="token operator">-></span>_M_prev<span class="token punctuation">;</span>
    <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">friend</span> <span class="token keyword">bool</span>
  <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Self<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Self<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> __x<span class="token punctuation">.</span>_M_node <span class="token operator">==</span> __y<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">friend</span> <span class="token keyword">bool</span>
  <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Self<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Self<span class="token operator">&amp;</span> __y<span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> __x<span class="token punctuation">.</span>_M_node <span class="token operator">!=</span> __y<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

 <span class="token comment">// The only member points to the %list element.</span>
 __detail<span class="token double-colon punctuation">::</span>_List_node_base<span class="token operator">*</span> _M_node<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="list-数据结构"><a href="#list-数据结构" class="headerlink" title="list 数据结构"></a>list 数据结构</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> <span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">list</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">protected</span> <span class="token class-name">_List_base</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token class-name">_Alloc</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_GLIBCXX_CONCEPT_CHECKS</span></span>
  <span class="token comment">// concept requirements</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token double-colon punctuation">::</span>value_type        _Alloc_value_type<span class="token punctuation">;</span>
 <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">&lt;</span> <span class="token number">201103L</span></span></span>
  <span class="token function">__glibcxx_class_requires</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _SGIAssignableConcept<span class="token punctuation">)</span>
 <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">endif</span></span>
    <span class="token function">__glibcxx_class_requires2</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">,</span> _Alloc_value_type<span class="token punctuation">,</span> _SameTypeConcept<span class="token punctuation">)</span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">201103L</span></span></span>
    <span class="token keyword">static_assert</span><span class="token punctuation">(</span>is_same<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">remove_cv</span><span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token double-colon punctuation">::</span>type<span class="token punctuation">,</span> _Tp<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span>
                  <span class="token string">"std::list must have a non-const, non-volatile value_type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">ifdef</span> <span class="token expression">__STRICT_ANSI__</span></span>
  <span class="token keyword">static_assert</span><span class="token punctuation">(</span>is_same<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span> _Tp<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span>
                <span class="token string">"std::list must have the same value_type as its allocator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">endif</span></span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

  <span class="token keyword">typedef</span> _List_base<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span>            _Base<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Base</span><span class="token double-colon punctuation">::</span>_Tp_alloc_type        _Tp_alloc_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Base</span><span class="token double-colon punctuation">::</span>_Tp_alloc_traits        _Tp_alloc_traits<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Base</span><span class="token double-colon punctuation">::</span>_Node_alloc_type        _Node_alloc_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Base</span><span class="token double-colon punctuation">::</span>_Node_alloc_traits    _Node_alloc_traits<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">typedef</span> _Tp                     value_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp_alloc_traits</span><span class="token double-colon punctuation">::</span>pointer     pointer<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp_alloc_traits</span><span class="token double-colon punctuation">::</span>const_pointer     const_pointer<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp_alloc_traits</span><span class="token double-colon punctuation">::</span>reference     reference<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp_alloc_traits</span><span class="token double-colon punctuation">::</span>const_reference const_reference<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> _List_iterator<span class="token operator">&lt;</span>_Tp<span class="token operator">></span>             iterator<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> _List_const_iterator<span class="token operator">&lt;</span>_Tp<span class="token operator">></span>             const_iterator<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>reverse_iterator<span class="token operator">&lt;</span>const_iterator<span class="token operator">></span>     const_reverse_iterator<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>reverse_iterator<span class="token operator">&lt;</span>iterator<span class="token operator">></span>         reverse_iterator<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> size_t                     size_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> ptrdiff_t                     difference_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> _Alloc                     allocator_type<span class="token punctuation">;</span>

<span class="token keyword">protected</span><span class="token operator">:</span>
  <span class="token comment">// Note that pointers-to-_Node's can be ctor-converted to</span>
  <span class="token comment">// iterator types.</span>
  <span class="token comment">// 环形双向链表，只需要一个指针便可以表示整个链表</span>
  <span class="token keyword">typedef</span> _List_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span>                 _Node<span class="token punctuation">;</span>
 <span class="token comment">// ...</span>

 iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_node<span class="token punctuation">.</span>_M_next<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

 _GLIBCXX_NODISCARD <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_node<span class="token punctuation">.</span>_M_next <span class="token operator">==</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

 const_reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

 reference <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
    iterator __tmp <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">--</span>__tmp<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span>__tmp<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token comment">// 配置一个节点并传回</span>
 <span class="token keyword">typename</span> <span class="token class-name">_Node_alloc_traits</span><span class="token double-colon punctuation">::</span>pointer <span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> _Node_alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>_M_impl<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>
 <span class="token comment">// 产生一个节点，带元素值</span>
 <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span>
_Node<span class="token operator">*</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span>_Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">auto</span> __p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">auto</span><span class="token operator">&amp;</span> __alloc <span class="token operator">=</span> <span class="token function">_M_get_Node_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 __allocated_ptr<span class="token operator">&lt;</span>_Node_alloc_type<span class="token operator">></span> __guard<span class="token punctuation">&#123;</span>__alloc<span class="token punctuation">,</span> __p<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 _Node_alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span>__alloc<span class="token punctuation">,</span> __p<span class="token operator">-></span><span class="token function">_M_valptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                               std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 __guard <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> __p<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<p><strong>list 示意图</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/list%E7%A4%BA%E6%84%8F%E5%9B%BE.png">

<br/>

<br/>

<h3 id="list-之-unique"><a href="#list-之-unique" class="headerlink" title="list 之 unique()"></a>list 之 unique()</h3><p><strong>list 移除 value 相同元素</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">list</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>__remove_return_type
<span class="token class-name">list</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  iterator __first <span class="token operator">=</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  iterator __l

ast <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 空链表 直接返回</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span> 
    <span class="token keyword">return</span> <span class="token function">_GLIBCXX20_ONLY</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_type __removed <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__unused__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  iterator __next <span class="token operator">=</span> __first<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>__next <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first <span class="token operator">==</span> <span class="token operator">*</span>__next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">_M_erase</span><span class="token punctuation">(</span>__next<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">_GLIBCXX20_ONLY</span><span class="token punctuation">(</span> __removed<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
      __first <span class="token operator">=</span> __next<span class="token punctuation">;</span>
    __next <span class="token operator">=</span> __first<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token function">_GLIBCXX20_ONLY</span><span class="token punctuation">(</span> __removed <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h3 id="list-之-erase"><a href="#list-之-erase" class="headerlink" title="list 之 erase()"></a>list 之 erase()</h3><blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">erase</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       _List_node_base<span class="token operator">*</span> __next_node <span class="token operator">=</span> __position<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_next<span class="token punctuation">;</span>
       _List_node_base<span class="token operator">*</span> __prev_node <span class="token operator">=</span> __position<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev<span class="token punctuation">;</span>
       _Node<span class="token operator">*</span> __n <span class="token operator">=</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> __position<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span>
       __prev_node<span class="token operator">-></span>_M_next <span class="token operator">=</span> __next_node<span class="token punctuation">;</span>
       __next_node<span class="token operator">-></span>_M_prev <span class="token operator">=</span> __prev_node<span class="token punctuation">;</span>
       <span class="token function">_Destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__n<span class="token operator">-></span>_M_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">_M_put_node</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> __next_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/list-erase.png">

<br/>

<br/>

<h3 id="transfer"><a href="#transfer" class="headerlink" title="transfer()"></a>transfer()</h3><p><strong>将 [first, last) 内的所有元素移动到 position 之前</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// SGI STL 版本</span>
<span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> iterator __first<span class="token punctuation">,</span> iterator __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__position <span class="token operator">!=</span> __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// Remove [first, last) from its old position.</span>
   __last<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev<span class="token operator">-></span>_M_next     <span class="token operator">=</span> __position<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span>  <span class="token comment">// 1</span>
   __first<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev<span class="token operator">-></span>_M_next    <span class="token operator">=</span> __last<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span>          <span class="token comment">// 2</span>
   __position<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev<span class="token operator">-></span>_M_next <span class="token operator">=</span> __first<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span>     <span class="token comment">// 3</span>

   <span class="token comment">// Splice [first, last) into its new position.</span>
   _List_node_base<span class="token operator">*</span> __tmp      <span class="token operator">=</span> __position<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev<span class="token punctuation">;</span>  <span class="token comment">// 4</span>
   __position<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev <span class="token operator">=</span> __last<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev<span class="token punctuation">;</span>      <span class="token comment">// 5</span>
   __last<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev     <span class="token operator">=</span> __first<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev<span class="token punctuation">;</span>     <span class="token comment">// 6</span>
   __first<span class="token punctuation">.</span>_M_node<span class="token operator">-></span>_M_prev    <span class="token operator">=</span> __tmp<span class="token punctuation">;</span>                                              <span class="token comment">// 7</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/list-transfer.png">

<br/>

<h3 id="list-之-splice"><a href="#list-之-splice" class="headerlink" title="list 之 splice()"></a>list 之 splice()</h3><p><strong>transfer() 是非公开接口，STL 为 list 提供了splice()。</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">splice</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> list<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__x<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">transfer</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> __x<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">splice</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> list<span class="token operator">&amp;</span><span class="token punctuation">,</span> iterator __i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  iterator __j <span class="token operator">=</span> __i<span class="token punctuation">;</span>
  <span class="token operator">++</span>__j<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__position <span class="token operator">==</span> __i <span class="token operator">||</span> __position <span class="token operator">==</span> __j<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">transfer</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> __i<span class="token punctuation">,</span> __j<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">splice</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">,</span> list<span class="token operator">&amp;</span><span class="token punctuation">,</span> iterator __first<span class="token punctuation">,</span> iterator __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> __last<span class="token punctuation">)</span> 
    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">transfer</span><span class="token punctuation">(</span>__position<span class="token punctuation">,</span> __first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> list1 <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
   std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> list2 <span class="token punctuation">&#123;</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

   <span class="token keyword">auto</span> iter <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   list1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1, 2, 3, 4, [5, 6, 7, 8, 9] 100</span>
   list1<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//100, 9, 8, 7, 6, 5, 4, 3, 2, 1</span>
   list1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 1, 2, 3, 4, 5, 6, 7, 8, 9, 100</span>

   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/list-splice.png">

<p><br/><br/></p>
<h3 id="list-之-merge"><a href="#list-之-merge" class="headerlink" title="list 之 merge()"></a>list 之 merge()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">list</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">merge</span><span class="token punctuation">(</span>list<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   iterator __first1 <span class="token operator">=</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   iterator __last1 <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   iterator __first2 <span class="token operator">=</span> __x<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   iterator __last2 <span class="token operator">=</span> __x<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 两个 list 都已经递增排序</span>
   <span class="token keyword">while</span> <span class="token punctuation">(</span>__first1 <span class="token operator">!=</span> __last1 <span class="token operator">&amp;&amp;</span> __first2 <span class="token operator">!=</span> __last2<span class="token punctuation">)</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>__first2 <span class="token operator">&lt;</span> <span class="token operator">*</span>__first1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       iterator __next <span class="token operator">=</span> __first2<span class="token punctuation">;</span>
       <span class="token function">transfer</span><span class="token punctuation">(</span>__first1<span class="token punctuation">,</span> __first2<span class="token punctuation">,</span> <span class="token operator">++</span>__next<span class="token punctuation">)</span><span class="token punctuation">;</span>
       __first2 <span class="token operator">=</span> __next<span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
     <span class="token keyword">else</span>
      <span class="token operator">++</span>__first1<span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>__first2 <span class="token operator">!=</span> __last2<span class="token punctuation">)</span> <span class="token function">transfer</span><span class="token punctuation">(</span>__last1<span class="token punctuation">,</span> __first2<span class="token punctuation">,</span> __last2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="list-之-reverse"><a href="#list-之-reverse" class="headerlink" title="list 之 reverse()"></a>list 之 reverse()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__List_base_reverse</span><span class="token punctuation">(</span>_List_node_base<span class="token operator">*</span> __p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
_List_node_base<span class="token operator">*</span> __tmp <span class="token operator">=</span> __p<span class="token punctuation">;</span>
   <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
     __STD<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>__tmp<span class="token operator">-></span>_M_next<span class="token punctuation">,</span> __tmp<span class="token operator">-></span>_M_prev<span class="token punctuation">)</span><span class="token punctuation">;</span>
     __tmp <span class="token operator">=</span> __tmp<span class="token operator">-></span>_M_prev<span class="token punctuation">;</span>     <span class="token comment">// Old next node is now prev.</span>
   <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>__tmp <span class="token operator">!=</span> __p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token class-name">list</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token function">__List_base_reverse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="list-之-sort"><a href="#list-之-sort" class="headerlink" title="list 之 sort()"></a>list 之 sort()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">list</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// Do nothing if the list has length 0 or 1.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>_M_node<span class="token operator">-></span>_M_next <span class="token operator">!=</span> _M_node <span class="token operator">&amp;&amp;</span> _M_node<span class="token operator">-></span>_M_next<span class="token operator">-></span>_M_next <span class="token operator">!=</span> _M_node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  list<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span> __carry<span class="token punctuation">;</span>
  list<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span> __counter<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> __fill <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    __carry<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>__carry<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> __i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>__i <span class="token operator">&lt;</span> __fill <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>__counter<span class="token punctuation">[</span>__i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      __counter<span class="token punctuation">[</span>__i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>__carry<span class="token punctuation">)</span><span class="token punctuation">;</span>
      __carry<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>__counter<span class="token punctuation">[</span>__i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    __carry<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>__counter<span class="token punctuation">[</span>__i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__i <span class="token operator">==</span> __fill<span class="token punctuation">)</span> <span class="token operator">++</span>__fill<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> 

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> __i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> __i <span class="token operator">&lt;</span> __fill<span class="token punctuation">;</span> <span class="token operator">++</span>__i<span class="token punctuation">)</span>
    __counter<span class="token punctuation">[</span>__i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>__counter<span class="token punctuation">[</span>__i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">swap</span><span class="token punctuation">(</span>__counter<span class="token punctuation">[</span>__fill<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<p><strong>list 使用注意事项</strong></p>
<p><code>由于 list 的迭代器类型是 Bidirectional Iterators, 而 std::sort() 要求的是 RandomAccessIterator, 必须使用自身的 sort() 函数排序，否则会报错：</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/include/c++/9/bits/stl_algo.h: In instantiation of ‘void std::__sort<span class="token punctuation">(</span>_RandomAccessIterator, _RandomAccessIterator, _Compare<span class="token punctuation">)</span> <span class="token punctuation">[</span>with _RandomAccessIterator <span class="token operator">=</span> std::_List_iterator<span class="token operator">&lt;</span>int<span class="token operator">></span><span class="token punctuation">;</span> _Compare <span class="token operator">=</span> __gnu_cxx::__ops::_Iter_less_iter<span class="token punctuation">]</span>’:
/usr/include/c++/9/bits/stl_algo.h:4867:18:   required from ‘void std::sort<span class="token punctuation">(</span>_RAIter, _RAIter<span class="token punctuation">)</span> <span class="token punctuation">[</span>with _RAIter <span class="token operator">=</span> std::_List_iterator<span class="token operator">&lt;</span>int<span class="token operator">></span><span class="token punctuation">]</span>’
required from here
/usr/include/c++/9/bits/stl_algo.h:1968:22: error: no match <span class="token keyword">for</span> ‘operator-’ <span class="token punctuation">(</span>operand types are ‘std::_List_iterator<span class="token operator">&lt;</span>int<span class="token operator">></span>’ and ‘std::_List_iterator<span class="token operator">&lt;</span>int<span class="token operator">></span>’<span class="token punctuation">)</span>
<span class="token number">1968</span> <span class="token operator">|</span>     std::__lg<span class="token punctuation">(</span>__last - __first<span class="token punctuation">)</span> * <span class="token number">2</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/deque.png">

<table>
<thead>
<tr>
<th align="center">deque</th>
<th align="center">vector</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>（支持头尾两端插入删除）双向</strong>、开口</td>
<td align="center"><strong>（头部操作效率极差）单向</strong>、开口</td>
</tr>
<tr>
<td align="center">允许<strong>常数时间</strong>内对起头端进行元素的插入&#x2F;移出</td>
<td align="center">尾端成长</td>
</tr>
<tr>
<td align="center"><strong>没有capacity()</strong> 概念</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">动态地以分段连续空间组合而成、随时增加一段新空间并链接起来</td>
<td align="center">空间不足时，存在 <strong>reallocate()</strong> 新空间，<strong>destroy()</strong> 旧空间</td>
</tr>
<tr>
<td align="center"><strong>没必要提供 reserve()</strong> 功能</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Ramdon Access Iterator 复杂度比 vector 高</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">对 deque 排序，可以先复制到 vector 排序后再 copy 回来</td>
<td align="center"></td>
</tr>
</tbody></table>
<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// map 是一个 T**</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">_Deque_base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator</span><span class="token double-colon punctuation">::</span>_Map_pointer _Map_pointer<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">_Deque_impl</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_Tp_alloc_type</span></span> <span class="token punctuation">&#123;</span>
_Map_pointer _M_map<span class="token punctuation">;</span>        <span class="token comment">// 指向 map, 存储 T** 类型的连续空间</span>
size_t _M_map_size<span class="token punctuation">;</span>         <span class="token comment">// buffer 块数</span>
iterator _M_start<span class="token punctuation">;</span>            <span class="token comment">// 指向第一个 buffer</span>
iterator _M_finish<span class="token punctuation">;</span>            <span class="token comment">// 指向最后一个 buffer</span>
<span class="token function">_Deque_impl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
  <span class="token operator">:</span> <span class="token function">_Tp_alloc_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
  <span class="token function">_M_map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
  <span class="token function">_M_map_size</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">_M_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
  <span class="token function">_M_finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
_Deque_impl _M_impl<span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/deque-map-node-buffer.png">

<br/>

<h3 id="deque-迭代器"><a href="#deque-迭代器" class="headerlink" title="deque 迭代器"></a>deque 迭代器</h3><ul>
<li>能够指出分段连续空间（buffer）的位置</li>
<li>能够判断当前所处的 buffer 的边缘</li>
<li>能够控制 map 跳跃到上一个&#x2F;下一个buffer</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Ref</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Ptr</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">_Deque_iterator</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 未继承 std::iterator</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">&lt;</span> <span class="token number">201103L</span></span></span>
<span class="token keyword">typedef</span> _Deque_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token operator">></span>         iterator<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Deque_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span><span class="token operator">></span> const_iterator<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Tp<span class="token operator">*</span>                     _Elt_pointer<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Tp<span class="token operator">*</span><span class="token operator">*</span>                    _Map_pointer<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token keyword">private</span><span class="token operator">:</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Up</span><span class="token operator">></span>
<span class="token keyword">using</span> __ptr_to <span class="token operator">=</span> <span class="token keyword">typename</span> <span class="token class-name">pointer_traits</span><span class="token operator">&lt;</span>_Ptr<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token keyword">template</span> rebind<span class="token operator">&lt;</span>_Up<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_CvTp</span><span class="token operator">></span>
<span class="token keyword">using</span> __iter <span class="token operator">=</span> _Deque_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _CvTp<span class="token operator">&amp;</span><span class="token punctuation">,</span> __ptr_to<span class="token operator">&lt;</span>_CvTp<span class="token operator">>></span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token keyword">typedef</span> __iter<span class="token operator">&lt;</span>_Tp<span class="token operator">></span>        iterator<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> __iter<span class="token operator">&lt;</span><span class="token keyword">const</span> _Tp<span class="token operator">></span>        const_iterator<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> __ptr_to<span class="token operator">&lt;</span>_Tp<span class="token operator">></span>        _Elt_pointer<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> __ptr_to<span class="token operator">&lt;</span>_Elt_pointer<span class="token operator">></span>    _Map_pointer<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">/**
   *  @brief This function controls the size of memory nodes.
   *  @param  __size  The size of an element.
   *  @return   The number (not byte size) of elements per node.
   */</span>
  <span class="token comment">// 决定 buffer 大小的函数</span>
  <span class="token comment">// buffer size 默认值 _GLIBCXX_DEQUE_BUF_SIZE 512</span>
  <span class="token comment">// 如果元素大小 __size &lt; 512 传回 512/__size; 否则传回 1</span>
  _GLIBCXX_CONSTEXPR <span class="token keyword">inline</span> size_t <span class="token function">__deque_buf_size</span><span class="token punctuation">(</span>size_t __size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token punctuation">(</span>__size <span class="token operator">&lt;</span> _GLIBCXX_DEQUE_BUF_SIZE
        <span class="token operator">?</span> <span class="token function">size_t</span><span class="token punctuation">(</span>_GLIBCXX_DEQUE_BUF_SIZE <span class="token operator">/</span> __size<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">size_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">static</span> size_t <span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token function">__deque_buf_size</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 未继承 std::iterator 所以必须自行撰写5个必要的迭代器相应类型</span>
  <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>random_access_iterator_tag    iterator_category<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> _Tp                value_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> _Ptr                pointer<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> _Ref                reference<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> size_t                size_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> ptrdiff_t                difference_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> _Deque_iterator            _Self<span class="token punctuation">;</span>

  _Elt_pointer _M_cur<span class="token punctuation">;</span>    <span class="token comment">// 指向某个 buffer 的当前元素</span>
  _Elt_pointer _M_first<span class="token punctuation">;</span>  <span class="token comment">// 指向某个 buffer 的头</span>
  _Elt_pointer _M_last<span class="token punctuation">;</span>   <span class="token comment">// 指向某个 buffer 的尾（含备用空间）</span>
  _Map_pointer _M_node<span class="token punctuation">;</span>   <span class="token comment">// 指向管控中心</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><strong>deque 迭代器关键行为</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 一旦遇到 buffer 边缘，就要调用 _M_set_node</span>
<span class="token comment">// 跳一个 buffer</span>
<span class="token keyword">void</span> <span class="token function">_M_set_node</span><span class="token punctuation">(</span>_Map_pointer __new_node<span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
_M_node <span class="token operator">=</span> __new_node<span class="token punctuation">;</span>
_M_first <span class="token operator">=</span> <span class="token operator">*</span>__new_node<span class="token punctuation">;</span>
_M_last <span class="token operator">=</span> _M_first <span class="token operator">+</span> <span class="token function">difference_type</span><span class="token punctuation">(</span><span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

_Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
<span class="token operator">++</span>_M_cur<span class="token punctuation">;</span>                                      <span class="token comment">// 切到下一个元素</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>_M_cur <span class="token operator">==</span> _M_last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果到达 buffer 尾端</span>
 <span class="token function">_M_set_node</span><span class="token punctuation">(</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 切到下一个节点（即下一块 buffer）</span>
 _M_cur <span class="token operator">=</span> _M_first<span class="token punctuation">;</span>                <span class="token comment">// 的第一个元素</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


_Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>_M_cur <span class="token operator">==</span> _M_first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果到达 buffer 头端</span>
 <span class="token function">_M_set_node</span><span class="token punctuation">(</span>_M_node <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 切到上一个节点（即上一块 buffer）</span>
 _M_cur <span class="token operator">=</span> _M_last<span class="token punctuation">;</span>                    <span class="token comment">// 的最后一个元素</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">--</span>_M_cur<span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 随机存取 迭代器可以直接跳跃 n 个距离</span>
_Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span>difference_type __n<span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
<span class="token keyword">const</span> difference_type __offset <span class="token operator">=</span> __n <span class="token operator">+</span> <span class="token punctuation">(</span>_M_cur <span class="token operator">-</span> _M_first<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 目标位置在 同一个 buffer 内</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>__offset <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> __offset <span class="token operator">&lt;</span> <span class="token function">difference_type</span><span class="token punctuation">(</span><span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 _M_cur <span class="token operator">+=</span> __n<span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 目标位置不在 同一个 buffer 内</span>
 <span class="token keyword">const</span> difference_type __node_offset <span class="token operator">=</span>
   __offset <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> __offset <span class="token operator">/</span> <span class="token function">difference_type</span><span class="token punctuation">(</span><span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token operator">:</span> <span class="token operator">-</span><span class="token function">difference_type</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>__offset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
                      <span class="token operator">/</span> <span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token comment">// 切换到正确的 buffer</span>
 <span class="token function">_M_set_node</span><span class="token punctuation">(</span>_M_node <span class="token operator">+</span> __node_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 切换正确的元素</span>
 _M_cur <span class="token operator">=</span> _M_first <span class="token operator">+</span> <span class="token punctuation">(</span>__offset <span class="token operator">-</span> __node_offset
                         <span class="token operator">*</span> <span class="token function">difference_type</span><span class="token punctuation">(</span><span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 利用 operator+=</span>
_Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">-=</span><span class="token punctuation">(</span>difference_type __n<span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
  <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">+=</span> <span class="token operator">-</span>__n<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img title="deque 中控器、缓存区、迭代器的关系" src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/deque-map-buffer-iterator.png">

<br/>

<h3 id="deque-创建"><a href="#deque-创建" class="headerlink" title="deque 创建"></a>deque 创建</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
*  @brief  Creates a %deque with copies of an exemplar element.
*  @param  __n  The number of elements to initially create.
*  @param  __value  An element to copy.
*  @param  __a  An allocator.
*
*  This constructor fills the %deque with @a __n copies of @a __value.
*/</span>
<span class="token function">deque</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __value<span class="token punctuation">,</span>
      <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">:</span> <span class="token function">_Base</span><span class="token punctuation">(</span>__a<span class="token punctuation">,</span> <span class="token function">_S_check_init_len</span><span class="token punctuation">(</span>__n<span class="token punctuation">,</span> __a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token function">_M_fill_initialize</span><span class="token punctuation">(</span>__value<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token function">_Deque_base</span><span class="token punctuation">(</span><span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a<span class="token punctuation">,</span> size_t __num_elements<span class="token punctuation">)</span>
  <span class="token operator">:</span> <span class="token function">_M_impl</span><span class="token punctuation">(</span>__a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token function">_M_initialize_map</span><span class="token punctuation">(</span>__num_elements<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span> <span class="token function">_M_fill_initialize</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
_Map_pointer __cur<span class="token punctuation">;</span>
__try <span class="token punctuation">&#123;</span>
 <span class="token comment">// 为每个节点的 buffer 设定初值</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span>__cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span>
      __cur <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span>
      <span class="token operator">++</span>__cur<span class="token punctuation">)</span>
   std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_fill_a</span><span class="token punctuation">(</span><span class="token operator">*</span>__cur<span class="token punctuation">,</span> <span class="token operator">*</span>__cur <span class="token operator">+</span> <span class="token function">_S_buffer_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                               __value<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 最后节点的设定稍有不同，考虑尾端可能有备用空间，不必设初值</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">__uninitialized_fill_a</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_first<span class="token punctuation">,</span>
                             <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">,</span>
                             __value<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><strong>_M_create_nodes()</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span>
<span class="token class-name">_Deque_base</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">_M_create_nodes</span><span class="token punctuation">(</span>_Map_pointer __nstart<span class="token punctuation">,</span> _Map_pointer __nfinish<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
_Map_pointer __cur<span class="token punctuation">;</span>
__try <span class="token punctuation">&#123;</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span>__cur <span class="token operator">=</span> __nstart<span class="token punctuation">;</span> __cur <span class="token operator">&lt;</span> __nfinish<span class="token punctuation">;</span> <span class="token operator">++</span>__cur<span class="token punctuation">)</span>
   <span class="token operator">*</span>__cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

_Ptr <span class="token function">_M_allocate_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> __gnu_cxx<span class="token double-colon punctuation">::</span>__alloc_traits<span class="token operator">&lt;</span>_Tp_alloc_type<span class="token operator">></span> _Traits<span class="token punctuation">;</span>
<span class="token keyword">return</span> _Traits<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>_M_impl<span class="token punctuation">,</span> <span class="token function">__deque_buf_size</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 决定 buffer 大小的函数</span>
<span class="token comment">// buffer size 默认值 _GLIBCXX_DEQUE_BUF_SIZE 512</span>
<span class="token comment">// 如果元素大小 __size &lt; 512 传回 512/__size; 否则传回 1</span>
_GLIBCXX_CONSTEXPR <span class="token keyword">inline</span> size_t <span class="token function">__deque_buf_size</span><span class="token punctuation">(</span>size_t __size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
<span class="token keyword">return</span> <span class="token punctuation">(</span>__size <span class="token operator">&lt;</span> _GLIBCXX_DEQUE_BUF_SIZE
       <span class="token operator">?</span> <span class="token function">size_t</span><span class="token punctuation">(</span>_GLIBCXX_DEQUE_BUF_SIZE <span class="token operator">/</span> __size<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">size_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><strong>_M_initialize_map()</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
*  @brief Layout storage.
*  @param  __num_elements  The count of T's for which to allocate space
*                          at first.
*  @return   Nothing.
*  The initial underlying memory layout is a bit complicated...
*/</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">_Deque_base</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span> <span class="token function">_M_initialize_map</span><span class="token punctuation">(</span>size_t __num_elements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 需要 map_pointer 节点数 = （元素个数 / 每个缓冲区可容纳的元素个数）+ 1</span>
  <span class="token comment">// 因为 deque::end() 返回的是 finish 迭代器，所以分配多一个节点</span>
  <span class="token keyword">const</span> size_t __num_nodes <span class="token operator">=</span> <span class="token punctuation">(</span>__num_elements <span class="token operator">/</span> <span class="token function">__deque_buf_size</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span>
                              <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 一个中控器需要管理几个节点，</span>
  <span class="token comment">// 至少： _S_initial_map_size = 8 个</span>
  <span class="token comment">// 最多： 所需 map_pointer 节点数 + 2（前后各自预备一个，方便扩充）</span>
  <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> _S_initial_map_size<span class="token punctuation">,</span>
                                       <span class="token function">size_t</span><span class="token punctuation">(</span>__num_nodes <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map <span class="token operator">=</span> <span class="token function">_M_allocate_map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 以上就配置出了 一个 具有 _M_map_size 个节点的中控器</span>


  <span class="token comment">// 令 nstart 和 nfinish 指向 map 所拥有全部节点的最中央区段</span>
  <span class="token comment">// 保持最中央可以保证 deque 两端生长的能力一样大</span>
  _Map_pointer __nstart <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map
                           <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size <span class="token operator">-</span> __num_nodes<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  _Map_pointer __nfinish <span class="token operator">=</span> __nstart <span class="token operator">+</span> __num_nodes<span class="token punctuation">;</span>

  __try <span class="token punctuation">&#123;</span>
    <span class="token function">_M_create_nodes</span><span class="token punctuation">(</span>__nstart<span class="token punctuation">,</span> __nfinish<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
  <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 为 deque 内的两个迭代器 start 和 finish 设定正确的内容</span>
  <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span>__nstart<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span>__nfinish <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> _M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_first<span class="token punctuation">;</span>
  <span class="token comment">// 因为刚好整除会多配置一个节点，</span>
  <span class="token comment">// 此时，cur 指向这个多配置的一个节点</span>
  <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_first
                                    <span class="token operator">+</span> __num_elements
                                    <span class="token operator">%</span> <span class="token function">__deque_buf_size</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><strong>std::deque<int> ideq(512, 1)</strong></p>
<p><code>int 类型的 deque 决定了 __deque_buf_size（一块 buffer 的大小）为 512 / sizeof(int) = 128</code>。</p>
<p><code>512 个元素决定了中控器需要 __num_nodes（buffer 块数）为 (512 / 128) + 1) = 5</code>。</p>
<p><code>中控器大小 _M_map_size 为 std::max(8, (buffer 个数 + 2)) = 8</code>。</p>
<br/>

<img title="deque 构造示例" src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/deque-construct.png">

<br/>

<h3 id="deque-之-push-back"><a href="#deque-之-push-back" class="headerlink" title="deque 之 push_back()"></a>deque 之 push_back()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 最后 buffer 还有2个及以上的元素备用空间</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span>
                          <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token operator">++</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span>
 <span class="token function">_M_push_back_aux</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最后 buffer 只剩1个元素备用空间</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">_M_push_back_aux</span><span class="token punctuation">(</span>_Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token function">__throw_length_error</span><span class="token punctuation">(</span>
 <span class="token function">__N</span><span class="token punctuation">(</span><span class="token string">"cannot create std::deque larger than max_size()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">_M_reserve_map_at_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 如果中控器后端节点不足，必须重换一个 map</span>
<span class="token comment">// 配置一个新的节点（新 buffer 块）</span>
<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
__try <span class="token punctuation">&#123;</span>
 <span class="token comment">// 针对标的元素设值</span>
 _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span>
                          <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">,</span>
                          std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 改变 finish，指向新节点（新 buffer 块）</span>
 <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 设定 finish 状态</span>
 <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_first<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 中控器后端节点不足，重新分配中控器空间</span>
<span class="token keyword">void</span> <span class="token function">_M_reserve_map_at_back</span><span class="token punctuation">(</span>size_type __nodes_to_add <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>__nodes_to_add <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size
      <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">_M_reallocate_map</span><span class="token punctuation">(</span>__nodes_to_add<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img title="push_back" src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/deque-push-back.png">

<br/>

<h3 id="deque-之-pop-back"><a href="#deque-之-pop-back" class="headerlink" title="deque 之 pop_back()"></a>deque 之 pop_back()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
<span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 最后一个 buffer 有一个或者更多的元素</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur
   <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token operator">--</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">;</span>				<span class="token comment">// 调整 finish.cur 指针</span>
 <span class="token comment">// 析构最后一个元素</span>
 _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span>
                        <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 最后一个 buffer 没有任何元素</span>
<span class="token keyword">else</span>
 <span class="token function">_M_pop_back_aux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放 buffer 操作</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 当 finish 指向的 buffer 没有任何一个元素时调用</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">_M_pop_back_aux</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 释放最后一个 buffer</span>
<span class="token function">_M_deallocate_node</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_first<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调整 finish 指向上一个 buffer</span>
<span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 找到 buffer（原来倒数第二个 buffer 块） 的最后一个元素</span>
<span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 析构元素</span>
_Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="deque-之-push-front"><a href="#deque-之-push-front" class="headerlink" title="deque 之 push_front()"></a>deque 之 push_front()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">push_front</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 第一个 buffer 有元素备用空间</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
_Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span>
                       <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
                       __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">--</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">;</span>	<span class="token comment">// 调整 第一块 buffer 使用状态</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span>
<span class="token function">_M_push_front_aux</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 第一个 buffer 已无元素备用空间</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_M_push_front_aux</span><span class="token punctuation">(</span>_Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">__throw_length_error</span><span class="token punctuation">(</span>
<span class="token function">__N</span><span class="token punctuation">(</span><span class="token string">"cannot create std::deque larger than max_size()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">_M_reserve_map_at_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果中控器前端节点不足，重新分配中控器空间</span>
<span class="token comment">// 配置一个新的节点（新 buffer 块）</span>
<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
__try <span class="token punctuation">&#123;</span>
<span class="token comment">// 改变 start 指向新的 buffer 块</span>
<span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node
                                       <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// start 的 cur 指向 新插入元素</span>
    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token comment">// 设定新插入元素的值</span>
    _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span>
                             <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">,</span>
                             std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 中控器前端节点不足，重新分配中控器空间</span>
<span class="token keyword">void</span> <span class="token function">_M_reserve_map_at_front</span><span class="token punctuation">(</span>size_type __nodes_to_add <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__nodes_to_add <span class="token operator">></span> <span class="token function">size_type</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node
                                 <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">_M_reallocate_map</span><span class="token punctuation">(</span>__nodes_to_add<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img title="push_front" src ="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/deque-push-front.png">

<br/>

<h3 id="deque-之-pop-front"><a href="#deque-之-pop-front" class="headerlink" title="deque 之 pop_front()"></a>deque 之 pop_front()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span>
<span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第一个 buffer 有超过1个元素</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur
   <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 _Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">,</span>
                        <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token operator">++</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 第一个 buffer 仅有一个元素，涉及 buffer 释放 </span>
<span class="token keyword">else</span>
 <span class="token function">_M_pop_front_aux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 当第一个 buffer 仅有一个元素时，会调用</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">_M_pop_front_aux</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 将第一个 buffer 仅剩的唯一一个元素析构</span>
_Alloc_traits<span class="token double-colon punctuation">::</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 释放第一个 buffer</span>
<span class="token function">_M_deallocate_node</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_first<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调整 迭代器 start 的状态指向原来第2个 buffer 块</span>
<span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//</span>
<span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_first<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="重新配置中控器"><a href="#重新配置中控器" class="headerlink" title="重新配置中控器"></a>重新配置中控器</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">void</span>
<span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">_M_reallocate_map</span><span class="token punctuation">(</span>size_type __nodes_to_add<span class="token punctuation">,</span> <span class="token keyword">bool</span> __add_at_front<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">const</span> size_type __old_num_nodes
 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> size_type __new_num_nodes <span class="token operator">=</span> __old_num_nodes <span class="token operator">+</span> __nodes_to_add<span class="token punctuation">;</span>

_Map_pointer __new_nstart<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">*</span> __new_num_nodes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 __new_nstart <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size
                                           <span class="token operator">-</span> __new_num_nodes<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
      <span class="token operator">+</span> <span class="token punctuation">(</span>__add_at_front <span class="token operator">?</span> __nodes_to_add <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__new_nstart <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span>
      std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">,</span>
                <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                __new_nstart<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      std<span class="token double-colon punctuation">::</span><span class="token function">copy_backward</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">,</span>
                         <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                         __new_nstart <span class="token operator">+</span> __old_num_nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    size_type __new_map_size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size
      <span class="token operator">+</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size<span class="token punctuation">,</span>
                 __nodes_to_add<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token comment">// 配置一块新的空间， 准备给新的 map （中控器）使用</span>
    _Map_pointer __new_map <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_allocate_map</span><span class="token punctuation">(</span>__new_map_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __new_nstart <span class="token operator">=</span> __new_map <span class="token operator">+</span> <span class="token punctuation">(</span>__new_map_size <span class="token operator">-</span> __new_num_nodes<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
      <span class="token operator">+</span> <span class="token punctuation">(</span>__add_at_front <span class="token operator">?</span> __nodes_to_add <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 拷贝原 中控器 内容</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">,</span>
              <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
              __new_nstart<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 释放原 map（中控器）</span>
    <span class="token function">_M_deallocate_map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 新 map （中控器）的起始地址和大小</span>
    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map <span class="token operator">=</span> __new_map<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_map_size <span class="token operator">=</span> __new_map_size<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
	<span class="token comment">// 重新设置 start、finish 迭代器</span>
  <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span>__new_nstart<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span><span class="token function">_M_set_node</span><span class="token punctuation">(</span>__new_nstart <span class="token operator">+</span> __old_num_nodes <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="deque-之-insert"><a href="#deque-之-insert" class="headerlink" title="deque 之 insert()"></a>deque 之 insert()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator
<span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">insert</span><span class="token punctuation">(</span>const_iterator __position<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 如果插入点是 deque 的最前端</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>__position<span class="token punctuation">.</span>_M_cur <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 交给 push_front() 做</span>
 <span class="token function">push_front</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 如果插入点是 deque 的最尾端</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__position<span class="token punctuation">.</span>_M_cur <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 交给 push_back() 做</span>
 <span class="token function">push_back</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span>
 iterator __tmp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">;</span>
 <span class="token operator">--</span>__tmp<span class="token punctuation">;</span>
 <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span>
 <span class="token keyword">return</span> <span class="token function">_M_insert_aux</span><span class="token punctuation">(</span>__position<span class="token punctuation">.</span><span class="token function">_M_const_cast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator
<span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_M_insert_aux</span><span class="token punctuation">(</span>iterator __pos<span class="token punctuation">,</span> _Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 value_type <span class="token function">__x_copy</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 插入点之前的元素个数</span>
 difference_type __index <span class="token operator">=</span> __pos <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">;</span>
 <span class="token comment">//如果插入点之前的元素较少</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>size_type<span class="token operator">></span></span></span><span class="token punctuation">(</span>__index<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">//  push_front 进行一个前端元素的添加</span>
   <span class="token function">push_front</span><span class="token punctuation">(</span><span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   iterator __front1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">;</span>
   <span class="token operator">++</span>__front1<span class="token punctuation">;</span>
   iterator __front2 <span class="token operator">=</span> __front1<span class="token punctuation">;</span>
   <span class="token operator">++</span>__front2<span class="token punctuation">;</span>
   __pos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">+</span> __index<span class="token punctuation">;</span>
   iterator __pos1 <span class="token operator">=</span> __pos<span class="token punctuation">;</span>
   <span class="token operator">++</span>__pos1<span class="token punctuation">;</span>
   <span class="token comment">// 将插入点之前的元素前移，腾出1个元素空间</span>
   <span class="token function">_GLIBCXX_MOVE3</span><span class="token punctuation">(</span>__front2<span class="token punctuation">,</span> __pos1<span class="token punctuation">,</span> __front1<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">//  push_back 进行一个后端元素的添加</span>
   <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   iterator __back1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">;</span>
   <span class="token operator">--</span>__back1<span class="token punctuation">;</span>
   iterator __back2 <span class="token operator">=</span> __back1<span class="token punctuation">;</span>
   <span class="token operator">--</span>__back2<span class="token punctuation">;</span>
   __pos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">+</span> __index<span class="token punctuation">;</span>
   <span class="token comment">// 将插入点后面的元素再往后移，腾出1个元素空间</span>
   <span class="token function">_GLIBCXX_MOVE_BACKWARD3</span><span class="token punctuation">(</span>__pos<span class="token punctuation">,</span> __back2<span class="token punctuation">,</span> __back1<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token comment">// 插入点设置新值</span>
 <span class="token operator">*</span>__pos <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__x_copy<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> __pos<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="deque-之-erase"><a href="#deque-之-erase" class="headerlink" title="deque 之 erase()"></a>deque 之 erase()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 按个擦除</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator
<span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">_M_erase</span><span class="token punctuation">(</span>iterator __position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
iterator __next <span class="token operator">=</span> __position<span class="token punctuation">;</span>
<span class="token operator">++</span>__next<span class="token punctuation">;</span>
<span class="token comment">// 擦除点之前的元素个数</span>
<span class="token keyword">const</span> difference_type __index <span class="token operator">=</span> __position <span class="token operator">-</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如果擦除点之前的元素个数较少</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>size_type<span class="token operator">></span></span></span><span class="token punctuation">(</span>__index<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 前移擦除点之前的元素，只有调用 pop_front()</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__position <span class="token operator">!=</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token function">_GLIBCXX_MOVE_BACKWARD3</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __position<span class="token punctuation">,</span> __next<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 擦除点之后的元素个数较少</span>
 <span class="token comment">// 前移擦除点之后的元素，只有调用 pop_back()</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__next <span class="token operator">!=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token function">_GLIBCXX_MOVE3</span><span class="token punctuation">(</span>__next<span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __position<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">return</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __index<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 按区间擦除</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator
<span class="token class-name">deque</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">_M_erase</span><span class="token punctuation">(</span>iterator __first<span class="token punctuation">,</span> iterator __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span>
 <span class="token keyword">return</span> __first<span class="token punctuation">;</span>
<span class="token comment">// 擦除区间是真个 deque</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> __last <span class="token operator">==</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 计算擦除区间长度</span>
 <span class="token keyword">const</span> difference_type __n <span class="token operator">=</span> __last <span class="token operator">-</span> __first<span class="token punctuation">;</span>
 <span class="token keyword">const</span> difference_type __elems_before <span class="token operator">=</span> __first <span class="token operator">-</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 如果要擦除区间前面的元素较少</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>size_type<span class="token operator">></span></span></span><span class="token punctuation">(</span>__elems_before<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> __n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// 后移前方的元素</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">!=</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token function">_GLIBCXX_MOVE_BACKWARD3</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 析构 冗余的元素</span>
   <span class="token function">_M_erase_at_begin</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// 前移后方的元素</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>__last <span class="token operator">!=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token function">_GLIBCXX_MOVE3</span><span class="token punctuation">(</span>__last<span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __first<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 析构 冗余的元素</span>
   <span class="token function">_M_erase_at_end</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">return</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> __elems_before<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 将冗余的 buffer 释放</span>
<span class="token keyword">void</span> <span class="token function">_M_erase_at_begin</span><span class="token punctuation">(</span>iterator __pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">_M_destroy_data</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __pos<span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">_M_destroy_nodes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start<span class="token punctuation">.</span>_M_node<span class="token punctuation">,</span> __pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_start <span class="token operator">=</span> __pos<span class="token punctuation">;</span> <span class="token comment">// 设置 deque 新起点</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 将冗余的 buffer 释放</span>
<span class="token keyword">void</span> <span class="token function">_M_erase_at_end</span><span class="token punctuation">(</span>iterator __pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">_M_destroy_data</span><span class="token punctuation">(</span>__pos<span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_get_Tp_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">_M_destroy_nodes</span><span class="token punctuation">(</span>__pos<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish<span class="token punctuation">.</span>_M_node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token operator">-></span>_M_impl<span class="token punctuation">.</span>_M_finish <span class="token operator">=</span> __pos<span class="token punctuation">;</span> <span class="token comment">// 设置 deque 新尾点</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="deque-之-clear"><a href="#deque-之-clear" class="headerlink" title="deque 之 clear()"></a>deque 之 clear()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_NOEXCEPT <span class="token punctuation">&#123;</span> 
<span class="token function">_M_erase_at_end</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br/>

<h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p><code>属于 container adaptor，可以指定其他支持 back()、push_back()、pop_back() 接口的容器作为 stack 的内部结构，如：std::stack&lt;int, std::list&lt;int&gt;&gt; linkedStack 。</code></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/stack.png">

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*   
*  This is not a true container, but an @e adaptor.  It holds
   *  another container, and provides a wrapper interface to that
   *  container.  The wrapper is what enforces strict
   *  first-in-last-out %stack behavior.
   *
   *  The second template parameter defines the type of the underlying
   *  sequence/container.  It defaults to std::deque, but it can be
   *  any type that supports @c back, @c push_back, and @c pop_back,
   *  such as std::list, std::vector, or an appropriate user-defined
   *  type.
*/</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span> <span class="token operator">=</span> deque<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> <span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">stack</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>value_type		value_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>reference		reference<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>const_reference	const_reference<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>size_type		size_type<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span>	       _Sequence			container_type<span class="token punctuation">;</span>
  _GLIBCXX_NODISCARD <span class="token keyword">bool</span>
    <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
  <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
  <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  reference <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  const_reference <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    <span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span>
  <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token punctuation">)</span> <span class="token function">emplace</span><span class="token punctuation">(</span>_Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Seq</span><span class="token operator">></span>
  <span class="token keyword">inline</span> <span class="token keyword">bool</span>
  <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> stack<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Seq<span class="token operator">></span><span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> stack<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Seq<span class="token operator">></span><span class="token operator">&amp;</span> __y<span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> __x<span class="token punctuation">.</span>c <span class="token operator">==</span> __y<span class="token punctuation">.</span>c<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Seq</span><span class="token operator">></span>
  <span class="token keyword">inline</span> <span class="token keyword">bool</span>
  <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> stack<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Seq<span class="token operator">></span><span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> stack<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Seq<span class="token operator">></span><span class="token operator">&amp;</span> __y<span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> __x<span class="token punctuation">.</span>c <span class="token operator">&lt;</span> __y<span class="token punctuation">.</span>c<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">// ...</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
  <span class="token comment">//  See queue::c for notes on this name.</span>
  _Sequence c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p><code>同理，属于 container adaptor，可以指定其他支持 back()、push_back()、pop_back() 接口的容器作为 queue 的内部结构，如：std::queue&lt;int, std::list&lt;int&gt;&gt; linkedQueue 。</code></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/queue.png">

<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span> <span class="token operator">=</span> deque<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> <span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">queue</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span>	<span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>value_type		value_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span>	<span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>reference		reference<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span>	<span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>const_reference	const_reference<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span>	<span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>size_type		size_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span>		_Sequence			container_type<span class="token punctuation">;</span>

 _GLIBCXX_NODISCARD <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
 <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

 size_type  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
 <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

 reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 reference <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span>
 <span class="token punctuation">&#123;</span> c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

 <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   c<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Seq</span><span class="token operator">></span>
 <span class="token keyword">inline</span> <span class="token keyword">bool</span>
 <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> queue<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Seq<span class="token operator">></span><span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> queue<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Seq<span class="token operator">></span><span class="token operator">&amp;</span> __y<span class="token punctuation">)</span>
 <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> __x<span class="token punctuation">.</span>c <span class="token operator">==</span> __y<span class="token punctuation">.</span>c<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

 <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Seq</span><span class="token operator">></span>
 <span class="token keyword">inline</span> <span class="token keyword">bool</span>
 <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> queue<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Seq<span class="token operator">></span><span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> queue<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Seq<span class="token operator">></span><span class="token operator">&amp;</span> __y<span class="token punctuation">)</span>
 <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> __x<span class="token punctuation">.</span>c <span class="token operator">&lt;</span> __y<span class="token punctuation">.</span>c<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">protected</span><span class="token operator">:</span>
 _Sequence c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h2 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h2><p><code>非 STL 容器组件，作为 priority_queue 的底层机制。</code></p>
<p><code>binary heap 是 complete binary tree（完全二叉树）的数组实现。</code></p>
<p><code>一个数组 + 一组 heap 算法（插入元素、删除元素、取极值、排列成 heap）。</code></p>
<p><code>对于整个堆，以及子堆， 最大堆（最小堆）的最大（最小值）在（子）堆的根节点。</code></p>
<p><br/><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/binary-heap.png"></p>
<br/>

<h3 id="push-heap"><a href="#push-heap" class="headerlink" title="push_heap()"></a>push_heap()</h3><p><code>为了满足完全二叉树的条件：</code></p>
<p><code>首先，新加入元素置于尾部。</code></p>
<p><code>其次，为了满足 max-heap 或者 min-heap 等的条件，需要做 percolate up(上溯) 调整。</code></p>
<p><code>令当前洞号为添加的新尾部节点，和其父节点的键值对比，如果符合对比策略，就让父节点和子节点对换位置，更新洞号，一直上溯，直到不需要对换或到根节点为止。</code></p>
<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span>
<span class="token function">push_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _RandomAccessIterator __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_RandomAccessIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type
	  _DistanceType<span class="token punctuation">;</span>
<span class="token comment">//...</span>
<span class="token comment">// 调用如下函数时，新元素已经置于底部容器最尾端</span>
__gnu_cxx<span class="token double-colon punctuation">::</span>__ops<span class="token double-colon punctuation">::</span>_Iter_less_val __comp<span class="token punctuation">;</span>
_ValueType __value <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>__last <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span><span class="token function">__push_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> <span class="token function">_DistanceType</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__last <span class="token operator">-</span> __first<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             <span class="token function">_DistanceType</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__value<span class="token punctuation">)</span><span class="token punctuation">,</span> __comp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 允许指定比较策略</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Distance</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Compare</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">__push_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span>
        _Distance __holeIndex<span class="token punctuation">,</span> _Distance __topIndex<span class="token punctuation">,</span> _Tp __value<span class="token punctuation">,</span>
        _Compare<span class="token operator">&amp;</span> __comp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 找到压入的尾端节点的父节点位置</span>
 _Distance __parent <span class="token operator">=</span> <span class="token punctuation">(</span>__holeIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
 <span class="token comment">// 当尚未到达顶端，且父节点在 __comp 比较策略下符合 value 值 </span>
 <span class="token keyword">while</span> <span class="token punctuation">(</span>__holeIndex <span class="token operator">></span> __topIndex <span class="token operator">&amp;&amp;</span> <span class="token function">__comp</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __parent<span class="token punctuation">,</span> __value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 洞值（当前子节点）为父节点值</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __holeIndex<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调整洞号，继续 percolateUp(上溯)</span>
    __holeIndex <span class="token operator">=</span> __parent<span class="token punctuation">;</span>
    __parent <span class="token operator">=</span> <span class="token punctuation">(</span>__holeIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span> <span class="token comment">// 持续到满足 heap 次序特性或者顶端为止</span>
 <span class="token comment">// 更新终止处的值</span>
 <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __holeIndex<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img title="push_heap" src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/push-heap.png">

<p><br/><br/>### pop_heap()</p>
<p><code>要保持完全二叉树的条件：</code></p>
<p><code>首先，记录最后一个叶子节点（即尾节点）的值备用。</code></p>
<p><code>其次，将根节点的值替换到尾节点，不会被立即弹出。如果需要，可后续调用 back()、pop_back() 访取。</code></p>
<p><code>为了满足 max-heap 或者 min-heap 等的条件，需要做 percolate down(下溯) 调整。</code></p>
<p><code>令洞号为根节点，和其孩子节点（包括左孩子和右孩子）做对比，如果符合某种比较策略，就互换值，更新洞号，继续下溯，直到子堆叶子节点为止，然后将整个堆的最后一个叶子节点（最下层，最右边）的值，设给这个“已经到达子堆叶层的洞号节点”，再对这个洞号节点进行 percolate up （上溯）。</code></p>
<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Compare</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pop_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span>
						 _RandomAccessIterator __last<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>__last <span class="token operator">-</span> __first <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 自定义 compare 规则</span>
 <span class="token keyword">typedef</span> <span class="token function">__decltype</span><span class="token punctuation">(</span>__comp<span class="token punctuation">)</span> _Cmp<span class="token punctuation">;</span>
 __gnu_cxx<span class="token double-colon punctuation">::</span>__ops<span class="token double-colon punctuation">::</span>_Iter_comp_iter<span class="token operator">&lt;</span>_Cmp<span class="token operator">></span> <span class="token function">__cmp</span><span class="token punctuation">(</span><span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__comp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token operator">--</span>__last<span class="token punctuation">;</span> <span class="token comment">// 调整 last 指向最后一个叶子节点</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">__pop_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Compare</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__pop_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _RandomAccessIterator __last<span class="token punctuation">,</span>
  									 _RandomAccessIterator __result<span class="token punctuation">,</span> _Compare<span class="token operator">&amp;</span> __comp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_RandomAccessIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>value_type
 _ValueType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_RandomAccessIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type
 _DistanceType<span class="token punctuation">;</span>
<span class="token comment">// 先记录尾节点（最后一个叶子节点值）</span>
_ValueType __value <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token operator">*</span>__result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将要 pop 的元素（即容器的第一个元素）赋值到 尾节点</span>
<span class="token operator">*</span>__result <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// _DistanceType(0) 代表以根节点为洞号，进行下溯，重新调整 heap</span>
std<span class="token double-colon punctuation">::</span><span class="token function">__adjust_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> <span class="token function">_DistanceType</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  <span class="token function">_DistanceType</span><span class="token punctuation">(</span>__last <span class="token operator">-</span> __first<span class="token punctuation">)</span><span class="token punctuation">,</span>
                  <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__value<span class="token punctuation">)</span><span class="token punctuation">,</span> __comp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Distance</span><span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Compare</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">__adjust_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _Distance __holeIndex<span class="token punctuation">,</span>
       				 _Distance __len<span class="token punctuation">,</span> _Tp __value<span class="token punctuation">,</span> _Compare __comp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">const</span> _Distance __topIndex <span class="token operator">=</span> __holeIndex<span class="token punctuation">;</span>
_Distance __secondChild <span class="token operator">=</span> __holeIndex<span class="token punctuation">;</span>

<span class="token comment">// (__len - 1) / 2 指向的是最后一个非叶子节点的节点</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>__secondChild <span class="token operator">&lt;</span> <span class="token punctuation">(</span>__len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 首先，定位到右孩子节点</span>
 __secondChild <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>__secondChild <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 如果左孩子节点比右孩子节点更符合 comp 策略（大），则定位到左孩子节点</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__comp</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __secondChild<span class="token punctuation">,</span> __first <span class="token operator">+</span> <span class="token punctuation">(</span>__secondChild <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   __secondChild<span class="token operator">--</span><span class="token punctuation">;</span>
 <span class="token comment">// 让当前洞号的孩子节点覆盖当前洞号值</span>
 <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __holeIndex<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __secondChild<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 更新当前洞号指向孩子节点，继续下溯</span>
 __holeIndex <span class="token operator">=</span> __secondChild<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// 如果当前洞号的孩子节点大于尾节点的父节点停止下溯</span>

<span class="token comment">// 特殊处理</span>
<span class="token comment">// __len &amp; 1 == 0 表示 __len 为偶数， </span>
<span class="token comment">// 即尾端结点属于左孩子节点类型,</span>
<span class="token comment">// 并且当前 __secondChild 指向尾节点的父节点</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__len <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> __secondChild <span class="token operator">==</span> <span class="token punctuation">(</span>__len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 将 __secondChild 定位到最尾端节点（左孩子节点类型）</span>
 __secondChild <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>__secondChild <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __holeIndex<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> <span class="token punctuation">(</span>__secondChild <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 __holeIndex <span class="token operator">=</span> __secondChild <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">__decltype</span><span class="token punctuation">(</span>__gnu_cxx<span class="token double-colon punctuation">::</span>__ops<span class="token double-colon punctuation">::</span><span class="token function">__iter_comp_val</span><span class="token punctuation">(</span><span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__comp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token function">__cmp</span><span class="token punctuation">(</span><span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__comp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span><span class="token function">__push_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __holeIndex<span class="token punctuation">,</span> __topIndex<span class="token punctuation">,</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__value<span class="token punctuation">)</span><span class="token punctuation">,</span> __cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/pop-heap.png">

<br/>

<p><strong>__adjust_heap() 中 最后一步 __push_heap() 的重要性</strong></p>
<br/>

<h3 id="sort-heap"><a href="#sort-heap" class="headerlink" title="sort_heap()"></a>sort_heap()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Compare</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">__sort_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _RandomAccessIterator __last<span class="token punctuation">,</span>
              _Compare<span class="token operator">&amp;</span> __comp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 执行一次 __pop_heap()，（根据__comp比较策略）极值放在尾端</span>
 <span class="token comment">// 再执行一次 __pop_heap()，次极值放在新的尾端，</span>
 <span class="token comment">// 如此下去，最后得到的便是排好序的区间 [first, last)</span>
 <span class="token keyword">while</span> <span class="token punctuation">(</span>__last <span class="token operator">-</span> __first <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">--</span>__last<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">__pop_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __comp<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/sort-heap.png">

<br/>

<h3 id="make-heap"><a href="#make-heap" class="headerlink" title="make_heap()"></a>make_heap()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Compare</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">__make_heap</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _RandomAccessIterator __last<span class="token punctuation">,</span>
      _Compare<span class="token operator">&amp;</span> __comp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_RandomAccessIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>value_type _ValueType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_RandomAccessIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type _DistanceType<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>__last <span class="token operator">-</span> __first <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> _DistanceType __len <span class="token operator">=</span> __last <span class="token operator">-</span> __first<span class="token punctuation">;</span>
	<span class="token comment">// 由于任何叶节点都不需要执行 percolate down，所以指定 __parent = (__len - 2) / 2</span>
<span class="token comment">// parent 对应的是 之前提及的 holeIndex</span>
_DistanceType __parent <span class="token operator">=</span> <span class="token punctuation">(</span>__len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 重排以 parent 为首的子树。</span>
 _ValueType __value <span class="token operator">=</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>__first <span class="token operator">+</span> __parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">__adjust_heap</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __parent<span class="token punctuation">,</span> __len<span class="token punctuation">,</span> <span class="token function">_GLIBCXX_MOVE</span><span class="token punctuation">(</span>__value<span class="token punctuation">)</span><span class="token punctuation">,</span> __comp<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__parent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span><span class="token punctuation">;</span>
 __parent<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/priority_queue.png">

<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span> <span class="token operator">=</span> vector<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Compare</span>  <span class="token operator">=</span> less<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>value_type<span class="token operator">></span> <span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">priority_queue</span> <span class="token punctuation">&#123;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">201103L</span></span></span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">using</span> _Uses <span class="token operator">=</span> <span class="token keyword">typename</span>
<span class="token class-name">enable_if</span><span class="token operator">&lt;</span>uses_allocator<span class="token operator">&lt;</span>_Sequence<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token operator">></span><span class="token double-colon punctuation">::</span>type<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">201703L</span></span></span>
<span class="token keyword">static_assert</span><span class="token punctuation">(</span>is_same<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>value_type<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span>
             <span class="token string">"value_type must be the same as the underlying container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// C++17</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// C++11</span></span>

<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span>	<span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>value_type		value_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span>	<span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>reference		reference<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span>	<span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>const_reference	const_reference<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span>	<span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>size_type		size_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span>		_Sequence			container_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span>	   _Compare				value_compare<span class="token punctuation">;</span>

<span class="token keyword">protected</span><span class="token operator">:</span>
_Sequence  c<span class="token punctuation">;</span>
_Compare   comp<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token keyword">explicit</span> <span class="token function">priority_queue</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Compare<span class="token operator">&amp;</span> __x<span class="token punctuation">,</span> <span class="token keyword">const</span> _Sequence<span class="token operator">&amp;</span> __s<span class="token punctuation">)</span>
 <span class="token operator">:</span> <span class="token function">c</span><span class="token punctuation">(</span>__s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">comp</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
   std<span class="token double-colon punctuation">::</span><span class="token function">make_heap</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> comp<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>

_GLIBCXX_NODISCARD <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

const_reference <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
 <span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">push_heap</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> comp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token function">__glibcxx_requires_nonempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 取出极值放在尾端，重排 heap</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">pop_heap</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> comp<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 真正意义的取出元素</span>
 c<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">emplace</span><span class="token punctuation">(</span>_Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 c<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">push_heap</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> comp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="slist"><a href="#slist" class="headerlink" title="slist"></a>slist</h2><br/>

<table>
<thead>
<tr>
<th align="center">slist</th>
<th align="center">list</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>singly</strong> linked list</td>
<td align="center"><strong>double</strong> linked list</td>
</tr>
<tr>
<td align="center">Forward Iterator</td>
<td align="center">Bidirectional Iterator</td>
</tr>
<tr>
<td align="center">头插法插入新元素，只提供 <strong>push_front()</strong></td>
<td align="center"></td>
</tr>
</tbody></table>
<br/>

<h3 id="slist-的节点和迭代器数据结构"><a href="#slist-的节点和迭代器数据结构" class="headerlink" title="slist 的节点和迭代器数据结构"></a>slist 的节点和迭代器数据结构</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">_Slist_node_base</span> <span class="token punctuation">&#123;</span>
	_Slist_node_base<span class="token operator">*</span> _M_next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">_Slist_node</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_Slist_node_base</span></span> <span class="token punctuation">&#123;</span>
	_Tp _M_data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">_Slist_iterator_base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> size_t                    size_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> ptrdiff_t                 difference_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>forward_iterator_tag iterator_category<span class="token punctuation">;</span> <span class="token comment">// 单向</span>

_Slist_node_base<span class="token operator">*</span> _M_node<span class="token punctuation">;</span>

<span class="token function">_Slist_iterator_base</span><span class="token punctuation">(</span>_Slist_node_base<span class="token operator">*</span> __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_M_node</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">_M_incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
_M_node <span class="token operator">=</span> _M_node<span class="token operator">-></span>_M_next<span class="token punctuation">;</span> 	<span class="token comment">// 前进一个节点</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Slist_iterator_base<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
<span class="token keyword">return</span> _M_node <span class="token operator">==</span> __x<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Slist_iterator_base<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
<span class="token keyword">return</span> _M_node <span class="token operator">!=</span> __x<span class="token punctuation">.</span>_M_node<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 迭代器结构</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Ref</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Ptr</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">_Slist_iterator</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">_Slist_iterator_base</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> _Slist_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token operator">></span>             iterator<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Slist_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span><span class="token operator">></span> const_iterator<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Slist_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Ref<span class="token punctuation">,</span> _Ptr<span class="token operator">></span>             _Self<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> _Tp              value_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Ptr             pointer<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Ref             reference<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> _Node<span class="token punctuation">;</span>

<span class="token keyword">explicit</span> <span class="token function">_Slist_iterator</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span> __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_Slist_iterator_base</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token comment">// 因为       iterator end()  &#123; return iterator(0); &#125;</span>
<span class="token function">_Slist_iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_Slist_iterator_base</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token function">_Slist_iterator</span><span class="token punctuation">(</span><span class="token keyword">const</span> iterator<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_Slist_iterator_base</span><span class="token punctuation">(</span>__x<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

reference <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> _M_node<span class="token punctuation">)</span><span class="token operator">-></span>_M_data<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

pointer <span class="token keyword">operator</span><span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
<span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

_Self<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">_M_incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 前进一个节点</span>
<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

_Self <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  _Self __tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token function">_M_incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 前进一个节点</span>
  <span class="token keyword">return</span> __tmp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/slist-node-and-iterator.png">



<br/>

<br/>

<h3 id="slist-之-新节点创建"><a href="#slist-之-新节点创建" class="headerlink" title="slist 之 新节点创建"></a>slist 之 新节点创建</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> _Slist_node_base<span class="token operator">*</span>
 <span class="token function">__slist_make_link</span><span class="token punctuation">(</span>_Slist_node_base<span class="token operator">*</span> __prev_node<span class="token punctuation">,</span> _Slist_node_base<span class="token operator">*</span> __new_node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 __new_node<span class="token operator">-></span>_M_next <span class="token operator">=</span> __prev_node<span class="token operator">-></span>_M_next<span class="token punctuation">;</span>
 __prev_node<span class="token operator">-></span>_M_next <span class="token operator">=</span> __new_node<span class="token punctuation">;</span>
 <span class="token keyword">return</span> __new_node<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// _Slist_base</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">_Slist_base</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> _Alloc<span class="token double-colon punctuation">::</span><span class="token keyword">template</span> <span class="token class-name">rebind</span><span class="token operator">&lt;</span><span class="token class-name">_Slist_node</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token operator">></span> <span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token class-name">other</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token double-colon punctuation">::</span><span class="token keyword">template</span> rebind<span class="token operator">&lt;</span>_Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> <span class="token operator">></span><span class="token double-colon punctuation">::</span>other
 _Node_alloc<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Alloc allocator_type<span class="token punctuation">;</span>

allocator_type <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> <span class="token operator">*</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> _Node_alloc<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token function">_Slist_base</span><span class="token punctuation">(</span><span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> __a<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_Node_alloc</span><span class="token punctuation">(</span>__a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">.</span>_M_next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token operator">~</span><span class="token function">_Slist_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 <span class="token function">_M_erase_after</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">protected</span><span class="token operator">:</span>
_Slist_node_base _M_head<span class="token punctuation">;</span> <span class="token comment">// 头部，非指针类型</span>

_Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">*</span> <span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> _Node_alloc<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">_M_put_node</span><span class="token punctuation">(</span>_Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">*</span> __p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 _Node_alloc<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">protected</span><span class="token operator">:</span>
_Slist_node_base<span class="token operator">*</span> <span class="token function">_M_erase_after</span><span class="token punctuation">(</span>_Slist_node_base<span class="token operator">*</span> __pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 _Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">*</span> __next <span class="token operator">=</span> <span class="token punctuation">(</span>_Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>__pos<span class="token operator">-></span>_M_next<span class="token punctuation">)</span><span class="token punctuation">;</span>
 _Slist_node_base<span class="token operator">*</span> __next_next <span class="token operator">=</span> __next<span class="token operator">-></span>_M_next<span class="token punctuation">;</span>
 __pos<span class="token operator">-></span>_M_next <span class="token operator">=</span> __next_next<span class="token punctuation">;</span>
 <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__next<span class="token operator">-></span>_M_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">_M_put_node</span><span class="token punctuation">(</span>__next<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> __next_next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
_Slist_node_base<span class="token operator">*</span> <span class="token function">_M_erase_after</span><span class="token punctuation">(</span>_Slist_node_base<span class="token operator">*</span><span class="token punctuation">,</span> _Slist_node_base<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// slist</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Alloc</span> <span class="token operator">=</span> allocator<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> <span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">slist</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">private</span> <span class="token class-name">_Slist_base</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span><span class="token class-name">_Alloc</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
<span class="token keyword">typedef</span> _Slist_base<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span>_Alloc<span class="token operator">></span> _Base<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token keyword">typedef</span> _Tp               value_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> value_type<span class="token operator">*</span>       pointer<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">const</span> value_type<span class="token operator">*</span> const_pointer<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> value_type<span class="token operator">&amp;</span>       reference<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> const_reference<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> size_t            size_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> ptrdiff_t         difference_type<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> _Slist_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> _Tp<span class="token operator">*</span><span class="token operator">></span>             iterator<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Slist_iterator<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span><span class="token operator">></span> const_iterator<span class="token punctuation">;</span>

	<span class="token comment">// 构造元素 </span>
_Node<span class="token operator">*</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 _Node<span class="token operator">*</span> __node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_get_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 __try <span class="token punctuation">&#123;</span>
   <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__node<span class="token operator">-></span>_M_data<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
   __node<span class="token operator">-></span>_M_next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_put_node</span><span class="token punctuation">(</span>__node<span class="token punctuation">)</span><span class="token punctuation">;</span>
   __throw_exception_again<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">return</span> __node<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 析构元素</span>
<span class="token keyword">void</span> <span class="token function">_M_put_node</span><span class="token punctuation">(</span>_Slist_node<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">*</span> __p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 _Node_alloc<span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

const_iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> <span class="token function">const_iterator</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token comment">// 互换 slist</span>
	<span class="token keyword">void</span>  <span class="token function">swap</span><span class="token punctuation">(</span>slist<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">,</span> __x<span class="token punctuation">.</span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

const_reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">)</span><span class="token operator">-></span>_M_data<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
	<span class="token comment">// 头插法插入一个元素</span>
<span class="token keyword">void</span> <span class="token function">push_front</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 <span class="token function">__slist_make_link</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">,</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token comment">// 弹出并删除头部元素</span>
<span class="token keyword">void</span> <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 _Node<span class="token operator">*</span> __node <span class="token operator">=</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">.</span>_M_next<span class="token punctuation">;</span>
 <span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">.</span>_M_next <span class="token operator">=</span> __node<span class="token operator">-></span>_M_next<span class="token punctuation">;</span>
 <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__node<span class="token operator">-></span>_M_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_put_node</span><span class="token punctuation">(</span>__node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 擦除元素</span>
iterator <span class="token function">erase</span><span class="token punctuation">(</span>iterator __pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">_M_erase_after</span>
                 <span class="token punctuation">(</span><span class="token function">__slist_previous</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">,</span> __pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="slist-其他方法"><a href="#slist-其他方法" class="headerlink" title="slist 其他方法"></a>slist 其他方法</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> _Slist_node_base<span class="token operator">*</span>
<span class="token function">__slist_previous</span><span class="token punctuation">(</span>_Slist_node_base<span class="token operator">*</span> __head<span class="token punctuation">,</span> <span class="token keyword">const</span> _Slist_node_base<span class="token operator">*</span> __node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>__head <span class="token operator">&amp;&amp;</span> __head<span class="token operator">-></span>_M_next <span class="token operator">!=</span> __node<span class="token punctuation">)</span>
 __head <span class="token operator">=</span> __head<span class="token operator">-></span>_M_next<span class="token punctuation">;</span>
<span class="token keyword">return</span> __head<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

const_iterator <span class="token function">previous</span><span class="token punctuation">(</span>const_iterator __pos<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
<span class="token keyword">return</span> consß<span class="token function">t_iterator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">__slist_previous</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">,</span> __pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

_Node<span class="token operator">*</span> <span class="token function">_M_insert_after</span><span class="token punctuation">(</span>_Node_base<span class="token operator">*</span> __pos<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
<span class="token keyword">return</span> <span class="token punctuation">(</span>_Node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">__slist_make_link</span><span class="token punctuation">(</span>__pos<span class="token punctuation">,</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

iterator <span class="token function">insert</span><span class="token punctuation">(</span>iterator __pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
<span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token function">_M_insert_after</span><span class="token punctuation">(</span><span class="token function">__slist_previous</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">,</span> __pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">,</span>
                               <span class="token function">value_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>iterator __pos<span class="token punctuation">,</span> size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">_M_insert_after_fill</span><span class="token punctuation">(</span><span class="token function">__slist_previous</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>_M_head<span class="token punctuation">,</span> __pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">,</span>  __n<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/slist-insert-erase.png">
]]></content>
      <categories>
        <category>C++ STL</category>
      </categories>
      <tags>
        <tag>拆书系列</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《STL源码剖析》关联式容器（associative containers）</title>
    <url>/2021/06/19/STL/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8%EF%BC%88associative%20containers%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《STL源码剖析》序列式容器（sequence-containers）"><a href="#《STL源码剖析》序列式容器（sequence-containers）" class="headerlink" title="《STL源码剖析》序列式容器（sequence containers）"></a>《STL源码剖析》序列式容器（sequence containers）</h1><p><code>参考自《STL 源码剖析》-侯捷著。</code></p>
<br/>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8.png">



<h2 id="RB-Tree"><a href="#RB-Tree" class="headerlink" title="RB-Tree"></a>RB-Tree</h2><p><code>RB-Tree 性质</code></p>
<p><code>1、每个节点不是红色就是黑色。</code></p>
<p><code>2、根节点为黑色。</code></p>
<p><code>3、如果节点为红色，其子节点必须为黑色。</code></p>
<p><code>4、任一节点到 NULL（树尾端）的任何路径所含黑色节点必须相同。</code></p>
<p><code>5、根据上诉规则，新增节点必须为红色，新增节点的父节点必须为黑色。</code></p>
<p><code>ps：为了方便处理，视 NULL 节点为黑色节点。</code></p>
<br/>

<br/>

<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><br/>

<br/>

<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><br/>

<br/> 

<h2 id="hashtable"><a href="#hashtable" class="headerlink" title="hashtable"></a>hashtable</h2><br/>

<br/>

<h2 id="unordered-set（hash-set）"><a href="#unordered-set（hash-set）" class="headerlink" title="unordered_set（hash_set）"></a>unordered_set（hash_set）</h2><br/>

<br/>

<h2 id="unordered-map（hash-map）"><a href="#unordered-map（hash-map）" class="headerlink" title="unordered_map（hash_map）"></a>unordered_map（hash_map）</h2><br/>

<br/>

<h2 id="unordered-multiset（hash-multiset）"><a href="#unordered-multiset（hash-multiset）" class="headerlink" title="unordered_multiset（hash_multiset）"></a>unordered_multiset（hash_multiset）</h2><br/>

<br/>

<h2 id="unordered-multimap（hash-multimap）"><a href="#unordered-multimap（hash-multimap）" class="headerlink" title="unordered_multimap（hash_multimap）"></a>unordered_multimap（hash_multimap）</h2><br/>

<br/>]]></content>
      <categories>
        <category>C++ STL</category>
      </categories>
      <tags>
        <tag>拆书系列</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《STL 源码剖析》概述</title>
    <url>/2021/06/08/STL/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="拆书系列之《STL源码剖析》概述"><a href="#拆书系列之《STL源码剖析》概述" class="headerlink" title="拆书系列之《STL源码剖析》概述"></a>拆书系列之《STL源码剖析》概述</h1><p><code>参考自《STL 源码剖析》-侯捷著。</code></p>
<br/>

<h2 id="1、容器（container）"><a href="#1、容器（container）" class="headerlink" title="1、容器（container）"></a>1、容器（container）</h2><p>各种数据结构，如 <code>vector， list，deque，set，map</code>等。</p>
<p>从实现角度看，<strong>STL容器是一种 class template</strong>。</p>
<br/>

<h2 id="2、算法（algorithms）"><a href="#2、算法（algorithms）" class="headerlink" title="2、算法（algorithms）"></a>2、算法（algorithms）</h2><p>如<code> sort，search，copy，erase</code>等。</p>
<p>从实现角度看，<strong>STL 算法是一种 function template</strong>。</p>
<h2 id="3、迭代器（iterators）"><a href="#3、迭代器（iterators）" class="headerlink" title="3、迭代器（iterators）"></a>3、迭代器（iterators）</h2><p>容器域算法之间的胶水，所谓的“泛型指针”。</p>
<p>从实现角度看，<strong>是一种将 <code>operator*，operator-&gt;，operator++， operator-- </code>等指针操作给予重载的 calss template</strong>。</p>
<br/>

<h2 id="4、仿函数（functors）"><a href="#4、仿函数（functors）" class="headerlink" title="4、仿函数（functors）"></a>4、仿函数（functors）</h2><p>行为类似函数，可以作为算法的<code>某种策略（policy）</code>。</p>
<p>从实现角度来看，<strong>仿函数是一种重载了 <code>operator()</code> 的 class 或者 class template</strong>。</p>
<br/>

<h2 id="5、配接器（adapters）"><a href="#5、配接器（adapters）" class="headerlink" title="5、配接器（adapters）"></a>5、配接器（adapters）</h2><p>一种用来修饰容器（containers）或者仿函数（functors）或者迭代器（iterators）接口的东西。</p>
<br/>

<h2 id="6、配置器（allocators）"><a href="#6、配置器（allocators）" class="headerlink" title="6、配置器（allocators）"></a>6、配置器（allocators）</h2><p>负责空间配置与管理。</p>
<p>从实现角度来看，<strong>配置器是一个实现了动态空间配置，空间管理、空间释放的 class template</strong>。</p>
<br/>

<h2 id="STL六大组件的交互关系"><a href="#STL六大组件的交互关系" class="headerlink" title="STL六大组件的交互关系"></a>STL六大组件的交互关系</h2><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/STL%E5%85%AD%E5%A4%A7%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BA%A4%E4%BA%92%E5%85%B3%E7%B3%BB.png">

<br/>

<h2 id="STL-各种容器"><a href="#STL-各种容器" class="headerlink" title="STL 各种容器"></a>STL 各种容器</h2><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/%E5%90%84%E7%A7%8D%E5%AE%B9%E5%99%A8%E6%A6%82%E8%A7%88.png">
]]></content>
      <categories>
        <category>C++ STL</category>
      </categories>
      <tags>
        <tag>拆书系列</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《STL 源码剖析》空间配置器（allocator）</title>
    <url>/2021/06/19/STL/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%EF%BC%88allocator%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《STL-源码剖析》空间配置器（allocator）"><a href="#《STL-源码剖析》空间配置器（allocator）" class="headerlink" title="《STL 源码剖析》空间配置器（allocator）"></a>《STL 源码剖析》空间配置器（allocator）</h1><p><code>参考自《STL 源码剖析》-侯捷著。</code></p>
<br/>

<h2 id="STL-中，allocator-的必要接口"><a href="#STL-中，allocator-的必要接口" class="headerlink" title="STL 中，allocator 的必要接口"></a>STL 中，allocator 的必要接口</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// /usr/include/c++/9/bits/allocator.h</span>



<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">using</span> __allocator_base <span class="token operator">=</span> __gnu_cxx<span class="token double-colon punctuation">::</span>new_allocator<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">new_allocator</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token keyword">typedef</span> size_t     size_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> ptrdiff_t  difference_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp<span class="token operator">*</span>       pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span> const_pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp<span class="token operator">&amp;</span>       reference<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> const_reference<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp        value_type<span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp1</span><span class="token operator">></span>
 <span class="token keyword">struct</span> <span class="token class-name">rebind</span> <span class="token punctuation">&#123;</span> <span class="token keyword">typedef</span> new_allocator<span class="token operator">&lt;</span>_Tp1<span class="token operator">></span> other<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 <span class="token comment">// ...</span>

<span class="token comment">// 默认构造</span>
_GLIBCXX20_CONSTEXPR
 <span class="token function">new_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// 拷贝构造</span>
_GLIBCXX20_CONSTEXPR
 <span class="token function">new_allocator</span><span class="token punctuation">(</span><span class="token keyword">const</span> new_allocator<span class="token operator">&amp;</span><span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// 泛化的拷贝构造</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp1</span><span class="token operator">></span>
_GLIBCXX20_CONSTEXPR
<span class="token function">new_allocator</span><span class="token punctuation">(</span><span class="token keyword">const</span> new_allocator<span class="token operator">&lt;</span>_Tp1<span class="token operator">></span><span class="token operator">&amp;</span><span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>
<span class="token comment">//析构</span>
<span class="token operator">~</span><span class="token function">new_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _GLIBCXX_USE_NOEXCEPT <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// 返回某个对象的地址</span>
pointer
 <span class="token function">address</span><span class="token punctuation">(</span>reference __x<span class="token punctuation">)</span> <span class="token keyword">const</span> _GLIBCXX_NOEXCEPT
<span class="token punctuation">&#123;</span> <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">__addressof</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

const_pointer
 <span class="token function">address</span><span class="token punctuation">(</span>const_reference __x<span class="token punctuation">)</span> <span class="token keyword">const</span> _GLIBCXX_NOEXCEPT
<span class="token punctuation">&#123;</span> <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">__addressof</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// 配置空间 足以存储 n 个 T 对象</span>
_GLIBCXX_NODISCARD pointer
<span class="token function">allocate</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__n <span class="token operator">></span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   std<span class="token double-colon punctuation">::</span><span class="token function">__throw_bad_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cpp_aligned_new</span></span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">></span> __STDCPP_DEFAULT_NEW_ALIGNMENT__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   std<span class="token double-colon punctuation">::</span>align_val_t __al <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">align_val_t</span><span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>__n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">,</span> __al<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
 <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>__n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 归还先前配置空间</span>
<span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span>pointer __p<span class="token punctuation">,</span> size_type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cpp_aligned_new</span></span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">></span> __STDCPP_DEFAULT_NEW_ALIGNMENT__<span class="token punctuation">)</span>
 <span class="token punctuation">&#123;</span>
   <span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">align_val_t</span><span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
 <span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span>__p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Up</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">construct</span><span class="token punctuation">(</span>_Up<span class="token operator">*</span> __p<span class="token punctuation">,</span> _Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span>
 <span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token double-colon punctuation">::</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>__p<span class="token punctuation">)</span>
             <span class="token function">_Up</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#123;</span> <span class="token double-colon punctuation">::</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>__p<span class="token punctuation">)</span> <span class="token function">_Up</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Up</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span>_Up<span class="token operator">*</span> __p<span class="token punctuation">)</span>
 <span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token keyword">noexcept</span><span class="token punctuation">(</span> __p<span class="token operator">-></span><span class="token operator">~</span><span class="token function">_Up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#123;</span> __p<span class="token operator">-></span><span class="token operator">~</span><span class="token function">_Up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// class new_allocator  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="SGI-的空间配置器-std-alloc（GCC版本-malloc-allocator-pool-allocator）"><a href="#SGI-的空间配置器-std-alloc（GCC版本-malloc-allocator-pool-allocator）" class="headerlink" title="SGI 的空间配置器 std::alloc（GCC版本 malloc_allocator pool_allocator）"></a>SGI 的空间配置器 std::alloc（GCC版本 malloc_allocator pool_allocator）</h2><h3 id="对于-我们习惯的-C-内存配置和释放操作"><a href="#对于-我们习惯的-C-内存配置和释放操作" class="headerlink" title="对于 我们习惯的 C++ 内存配置和释放操作"></a>对于 我们习惯的 C++ 内存配置和释放操作</h3><img src ="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/NewDelete%E5%AF%B9%E8%B1%A1%E6%97%B6.png">

<br/>

<br/>

<p>内存空间的配置&#x2F;释放与对象内容的构造和析构，分别在 <code>stl_construct.h</code> 和<code>allcator.h [stl_alloc.h(SGI版本)]</code>。</p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/STLConstructAllocator.png">

<h3 id="对于-SGI-版本的设计哲学"><a href="#对于-SGI-版本的设计哲学" class="headerlink" title="对于 SGI 版本的设计哲学"></a>对于 SGI 版本的设计哲学</h3><ol>
<li>向 system heap 要求空间。</li>
<li>考虑多线程的状态。</li>
<li>考虑内存不足时的应变措施。</li>
<li>考虑过多“小型区块”可能造成的内存碎片（fragment）问题。</li>
</ol>
<br/>

<br/>

<h3 id="解决小型区块可能造成的内存破碎问题（双层级配置器）"><a href="#解决小型区块可能造成的内存破碎问题（双层级配置器）" class="headerlink" title="解决小型区块可能造成的内存破碎问题（双层级配置器）"></a>解决小型区块可能造成的内存破碎问题（双层级配置器）</h3><p><code>配置区块 &gt; 128bytes 时，视为足够大，调用</code><strong>第一级配置器</strong>。</p>
<p><code>配置区块 &lt;= 128bytes 时，视为过小，为了降低额外负担，采用复杂的 memory pool 的整理方式，开放</code><strong>第二级配置器</strong>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 一级配置器</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">malloc_allocator</span> <span class="token punctuation">&#123;</span>
 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token function">allocate</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__n <span class="token operator">></span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     std<span class="token double-colon punctuation">::</span><span class="token function">__throw_bad_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 pointer __ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cpp_aligned_new</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">></span> <span class="token number">201402L</span> <span class="token operator">&amp;&amp;</span> _GLIBCXX_HAVE_ALIGNED_ALLOC</span></span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">alignof</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>max_align_t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   __ret <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token double-colon punctuation">::</span><span class="token function">aligned_alloc</span><span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                             __n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">_GLIBCXX_CHECK_MALLOC_RESULT</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
 <span class="token comment">// 直接使用 malloc()</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__ret<span class="token punctuation">)</span>
   __ret <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">malloc</span><span class="token punctuation">(</span>__n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__ret<span class="token punctuation">)</span>
   std<span class="token double-colon punctuation">::</span><span class="token function">__throw_bad_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_GLIBCXX_CHECK_MALLOC_RESULT</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">_GLIBCXX_CHECK_MALLOC_RESULT</span></span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t<span class="token operator">></span></span></span><span class="token punctuation">(</span>__ret<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// Memory returned by malloc is not suitably aligned for _Tp.</span>
   <span class="token function">deallocate</span><span class="token punctuation">(</span>__ret<span class="token punctuation">,</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span>
   std<span class="token double-colon punctuation">::</span><span class="token function">__throw_bad_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token keyword">return</span> __ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 直接调用 free()</span>
<span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span>pointer __p<span class="token punctuation">,</span> size_type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 std<span class="token double-colon punctuation">::</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>__p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>；<span class="token comment">// class malloc_allocator</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 二级配置器</span>
<span class="token keyword">class</span> <span class="token class-name">__pool_alloc_base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
 <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> _S_align <span class="token operator">=</span> <span class="token number">8</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> _S_max_bytes <span class="token operator">=</span> <span class="token number">128</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> _S_free_list_size <span class="token operator">=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>_S_max_bytes <span class="token operator">/</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>_S_align <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 <span class="token keyword">union</span> _Obj <span class="token punctuation">&#123;</span>
   <span class="token keyword">union</span> _Obj<span class="token operator">*</span> _M_free_list_link<span class="token punctuation">;</span>
   <span class="token keyword">char</span>        _M_client_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// The client sees this.</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 <span class="token keyword">static</span> _Obj<span class="token operator">*</span> <span class="token keyword">volatile</span>         _S_free_list<span class="token punctuation">[</span>_S_free_list_size<span class="token punctuation">]</span><span class="token punctuation">;</span>

 <span class="token comment">// Chunk allocation state.</span>
 <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token operator">*</span>                  _S_start_free<span class="token punctuation">;</span>
 <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token operator">*</span>                  _S_end_free<span class="token punctuation">;</span>
 <span class="token keyword">static</span> size_t                 _S_heap_size<span class="token punctuation">;</span>   
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/%E4%B8%80%E7%BA%A7%E4%BA%8C%E7%BA%A7%E9%85%8D%E7%BD%AE%E5%99%A8%E5%85%B3%E7%B3%BB.png">

<p>无论是第一级还是第二级配置器，STL 没有直接调用，而是封装了多层。在 GCC9 版本中，提供了 <code>polymorphic_allocator</code>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// vector</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">polymorphic_allocator</span><span class="token punctuation">;</span>
<span class="token comment">// 使用复杂的 polymorphic_allocator</span>
<span class="token keyword">using</span> vector <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> polymorphic_allocator<span class="token operator">&lt;</span>_Tp<span class="token operator">>></span><span class="token punctuation">;</span>

<span class="token comment">// std::vector 默认用的简单的 std::allocator</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>_Tp<span class="token operator">></span> <span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">vector</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">protected</span> <span class="token class-name">_Vector_base</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token class-name">_Alloc</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//...</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">polymorphic_allocator</span> <span class="token punctuation">&#123;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span> <span class="token comment">// used here</span>
<span class="token keyword">void</span> <span class="token function">construct</span><span class="token punctuation">(</span>_Tp1<span class="token operator">*</span> __p<span class="token punctuation">,</span> _Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">__uses_allocator_construct</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __p<span class="token punctuation">,</span>
                                 std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span>_Tp<span class="token operator">*</span> __p<span class="token punctuation">,</span> size_t __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
 _M_resource<span class="token operator">-></span><span class="token function">deallocate</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> __n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// polymorphic_allocator</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>参考 <a href="http://cs.brown.edu/~jwicks/libstdc++/html/20_util/allocator.html">http://cs.brown.edu/~jwicks/libstdc++/html/20_util/allocator.html</a> 可知在 GCC 中，</p>
<p><code>For GCC releases, defining </code>__USE_MALLOC<code> on the gcc command line would change the default allocation strategy to instead use malloc and free</code>.</p>
<table>
<thead>
<tr>
<th align="left">Allocator</th>
<th>Header</th>
<th align="left">Allocator</th>
</tr>
</thead>
<tbody><tr>
<td align="left">__gnu_cxx::new_allocator<T></td>
<td>&lt;ext&#x2F;new_allocator.h&gt;</td>
<td align="left">std::__new_alloc</td>
</tr>
<tr>
<td align="left">__gnu_cxx::malloc_allocator<T></td>
<td>&lt;ext&#x2F;malloc_allocator.h&gt;</td>
<td align="left">std::__malloc_alloc_template<int></td>
</tr>
<tr>
<td align="left">__gnu_cxx::debug_allocator<T></td>
<td>&lt;ext&#x2F;debug_allocator.h&gt;</td>
<td align="left">std::debug_alloc<T></td>
</tr>
<tr>
<td align="left">__gnu_cxx::__pool_alloc&lt;bool, int&gt;</td>
<td>&lt;ext&#x2F;pool_allocator.h&gt;</td>
<td align="left">std::__default_alloc_template&lt;bool,int&gt;</td>
</tr>
<tr>
<td align="left">__gnu_cxx::__mt_alloc<T></td>
<td>&lt;ext&#x2F;mt_allocator.h&gt;</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">__gnu_cxx::bitmap_allocator<T></td>
<td>&lt;ext&#x2F;bitmap_allocator.h&gt;</td>
<td align="left"></td>
</tr>
</tbody></table>
<ul>
<li><p><strong>new_allocator</strong></p>
<p>  Simply wraps <code>::operator new</code> and <code>::operator delete</code>.</p>
</li>
<li><p><strong>malloc_allocator</strong></p>
<p>  Simply wraps <code>malloc</code> and <code>free</code>. There is also a hook for an out-of-memory handler (for new&#x2F;delete this is taken care of elsewhere).</p>
</li>
<li><p><strong>debug_allocator</strong></p>
<p>  A wrapper around an arbitrary allocator A. It passes on slightly increased size requests to A, and uses the extra memory to store size information. When a pointer is passed to <code>deallocate()</code>, the stored size is checked, and assert() is used to guarantee they match.</p>
</li>
<li><p><strong>__pool_alloc</strong></p>
<p>  A high-performance, single pool allocator. The reusable memory is shared among identical instantiations of this type. It calls through <code>::operator new</code> to obtain new memory when its lists run out. If a client container requests a block larger than a certain threshold size, then the pool is bypassed, and the allocate&#x2F;deallocate request is passed to <code>::operator new</code> directly.</p>
<p>  This class take a boolean template parameter, called <code>thr</code>, and an integer template parameter, called <code>inst</code>.</p>
<p>  The <code>inst</code> number is used to track additional memory pools. The point of the number is to allow multiple instantiations of the classes without changing the semantics at all. All three of</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span>  __pool_alloc<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">></span>    normal<span class="token punctuation">;</span>
<span class="token keyword">typedef</span>  __pool_alloc<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">></span>    <span class="token keyword">private</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span>  __pool_alloc<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token operator">></span>   also_private<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>  behave exactly the same way. However, the memory pool for each type (and remember that different instantiations result in different types) remains separate.</p>
<p>  The library uses <strong>0</strong> in all its instantiations. If you wish to keep separate free lists for a particular purpose, use a different number.</p>
<p>  The <code>thr</code> boolean determines whether the pool should be manipulated atomically or not. When thr&#x3D;true, the allocator is is threadsafe, while thr&#x3D;false, and is slightly faster but unsafe for multiple threads.</p>
<p>  (Note that the GCC thread abstraction layer allows us to provide safe zero-overhead stubs for the threading routines, if threads were disabled at configuration time.)</p>
</li>
<li><p><strong>__mt_alloc</strong></p>
<p>  A high-performance fixed-size allocator. It has its own documentation, found <a href="http://cs.brown.edu/~jwicks/libstdc++/html/ext/mt_allocator.html">here</a>.</p>
</li>
<li><p><strong>bitmap_allocator</strong></p>
<p>  A high-performance allocator that uses a bit-map to keep track of the used and unused memory locations. It has its own documentation, found <a href="http://cs.brown.edu/~jwicks/libstdc++/html/ext/ballocator_doc.txt">here</a>.</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// specify that only malloc/free should be used instead of the default node allocator</span>
std<span class="token double-colon punctuation">::</span>list <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> __gnu_cxx<span class="token double-colon punctuation">::</span>malloc_allocator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span>  malloc_list<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<p>如果想自行实现 allocator，可参照 <code>new_allocator</code>。</p>
<p><strong>剖析第一级配置器</strong> </p>
<p><code>SGI 版本和目前 GCC 版本差别较大，可对比新版代码和下面整理的 SGI 版本。 </code></p>
<p>代码参考： <a href="https://github.com/steveLauwh/SGI-STL">https://github.com/steveLauwh/SGI-STL</a></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">int</span> __inst<span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">__malloc_alloc_template</span> <span class="token punctuation">&#123;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
 <span class="token comment">// oom: out of memory</span>
 <span class="token comment">// 以下函数用来处理内存不足的情况</span>
 <span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">_S_oom_malloc</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">_S_oom_realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span> size_t<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__STL_STATIC_TEMPLATE_MEMBER_BUG</span></span>
 <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> __malloc_alloc_oom_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">allocate</span><span class="token punctuation">(</span>size_t __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">void</span><span class="token operator">*</span> __result <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 无法满足需求时， 改用_S_oom_malloc()</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> __result<span class="token punctuation">)</span> __result <span class="token operator">=</span> <span class="token function">_S_oom_malloc</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> __result<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> __p<span class="token punctuation">,</span> size_t <span class="token comment">/* __n */</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token function">free</span><span class="token punctuation">(</span>__p<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">reallocate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> __p<span class="token punctuation">,</span> size_t <span class="token comment">/* old_sz */</span><span class="token punctuation">,</span> size_t __new_sz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">void</span><span class="token operator">*</span> __result <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> __new_sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 无法满足需求时， _S_oom_realloc()</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> __result<span class="token punctuation">)</span> __result <span class="token operator">=</span> <span class="token function">_S_oom_realloc</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> __new_sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> __result<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> <span class="token function">__set_malloc_handler</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>__f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> __old<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> __malloc_alloc_oom_handler<span class="token punctuation">;</span>
   __malloc_alloc_oom_handler <span class="token operator">=</span> __f<span class="token punctuation">;</span>
   <span class="token keyword">return</span><span class="token punctuation">(</span>__old<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// class __malloc_alloc_template</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">int</span> __inst<span class="token operator">></span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token class-name">__malloc_alloc_template</span><span class="token operator">&lt;</span>__inst<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_S_oom_malloc</span><span class="token punctuation">(</span>size_t __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> __my_malloc_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span><span class="token operator">*</span> __result<span class="token punctuation">;</span>

  <span class="token comment">// 不断尝试释放、配置</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    __my_malloc_handler <span class="token operator">=</span> __malloc_alloc_oom_handler<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> __my_malloc_handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> __THROW_BAD_ALLOC<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>__my_malloc_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用处理例程，企图释放内存</span>
    __result <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 再次尝试配置内存</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__result<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">(</span>__result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">int</span> __inst<span class="token operator">></span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token class-name">__malloc_alloc_template</span><span class="token operator">&lt;</span>__inst<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_S_oom_realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> __p<span class="token punctuation">,</span> size_t __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> __my_malloc_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span><span class="token operator">*</span> __result<span class="token punctuation">;</span>

  <span class="token comment">//  给一个已经分配了地址的指针重新分配空间，参数 __p 为原有的空间地址，__n 是重新申请的地址长度</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 当 "内存不足处理例程" 并未被客户设定，便调用 __THROW_BAD_ALLOC，丢出 bad_alloc 异常信息</span>
    __my_malloc_handler <span class="token operator">=</span> __malloc_alloc_oom_handler<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> __my_malloc_handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> __THROW_BAD_ALLOC<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>__my_malloc_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 调用处理例程，企图释放内存</span>
    __result <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> __n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 再次尝试配置内存，扩大内存大小</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__result<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">(</span>__result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<p><strong>剖析第二级配置器</strong></p>
<p><code>为了避免结点需要额外的指针造成额外的开销，设计结点类型为 union 类型。</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 一物二用，避免了为了维护链表所必须的指针而造成内存的浪费</span>
<span class="token keyword">union</span> _Obj <span class="token punctuation">&#123;</span>
 <span class="token keyword">union</span> _Obj<span class="token operator">*</span> _M_free_list_link<span class="token punctuation">;</span>    <span class="token comment">// 指向同一形式的 obj 结点</span>
 <span class="token keyword">char</span>        _M_client_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 可视为一个指针，指向实际区块</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<p><strong>自由链表（free list）实现技巧</strong></p>
<p><img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/freelist%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7.png"><br/></p>
<br/>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*  Important implementation properties:
   *  0. If globally mandated, then allocate objects from new
   *  1. If the clients request an object of size > _S_max_bytes, the resulting
   *     object will be obtained directly from new
   *  2. In all other cases, we allocate an object of size exactly
   *     _S_round_up(requested_size).  Thus the client has enough size
   *     information that we can return the object to the proper free list
   *     without permanently losing part of the object.
   */</span>
<span class="token keyword">class</span> <span class="token class-name">__pool_alloc_base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
  <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> _S_align <span class="token operator">=</span> <span class="token number">8</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 小型区块的上调边界</span>
  <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> _S_max_bytes <span class="token operator">=</span> <span class="token number">128</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 小区块的上限</span>
  <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> _S_free_list_size <span class="token operator">=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>_S_max_bytes <span class="token operator">/</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>_S_align <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">union</span> _Obj <span class="token punctuation">&#123;</span> 
    <span class="token comment">//... </span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token comment">// 将bytes 上调至 8 的倍数，方便管理</span>
  <span class="token comment">// 16个free-list分别为 8,16,24,32,40,48,56,64,72,80,88,96,104,112,120,128 bytes</span>
  size_t <span class="token function">_M_round_up</span><span class="token punctuation">(</span>size_t __bytes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__bytes <span class="token operator">+</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>_S_align <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>_S_align <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// Returns an object of size __n, and optionally adds to size __n</span>
  <span class="token comment">// free list.</span>
  <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">_M_refill</span><span class="token punctuation">(</span>size_t __n<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Allocates a chunk for nobjs of size size.  nobjs may be reduced</span>
  <span class="token comment">// if it is inconvenient to allocate the requested number.</span>
  <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">_M_allocate_chunk</span><span class="token punctuation">(</span>size_t __n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> __nobjs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// __pool_alloc_base</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">__pool_alloc</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">private</span> <span class="token class-name">__pool_alloc_base</span></span> <span class="token punctuation">&#123;</span>
<span class="token comment">//...</span>

<span class="token comment">// 空间配置函数 allocate()</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
_GLIBCXX_NODISCARD _Tp<span class="token operator">*</span> <span class="token class-name">__pool_alloc</span><span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>size_type __n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
pointer __ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span><span class="token punctuation">(</span>__n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__n <span class="token operator">></span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   std<span class="token double-colon punctuation">::</span><span class="token function">__throw_bad_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">const</span> size_t __bytes <span class="token operator">=</span> __n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cpp_aligned_new</span></span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">></span> __STDCPP_DEFAULT_NEW_ALIGNMENT__<span class="token punctuation">)</span>
 <span class="token punctuation">&#123;</span>
   std<span class="token double-colon punctuation">::</span>align_val_t __al <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">align_val_t</span><span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>__bytes<span class="token punctuation">,</span> __al<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

 <span class="token comment">// If there is a race through here, assume answer from getenv</span>
 <span class="token comment">// will resolve in same direction.  Inspired by techniques</span>
 <span class="token comment">// to efficiently support threading found in basic_string.h.</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>_S_force_new <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"GLIBCXX_FORCE_NEW"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token function">__atomic_add_dispatch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_S_force_new<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">else</span>
     <span class="token function">__atomic_add_dispatch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_S_force_new<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
     <span class="token comment">// > 128bytes 的情况</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__bytes <span class="token operator">></span> <span class="token function">size_t</span><span class="token punctuation">(</span>_S_max_bytes<span class="token punctuation">)</span> <span class="token operator">||</span> _S_force_new <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
   __ret <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>__bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 寻找16个 free lists中适当的一个</span>
   _Obj<span class="token operator">*</span> <span class="token keyword">volatile</span><span class="token operator">*</span> __free_list <span class="token operator">=</span> <span class="token function">_M_get_free_list</span><span class="token punctuation">(</span>__bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

   __scoped_lock <span class="token function">sentry</span><span class="token punctuation">(</span><span class="token function">_M_get_mutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   _Obj<span class="token operator">*</span> __restrict__ __result <span class="token operator">=</span> <span class="token operator">*</span>__free_list<span class="token punctuation">;</span>
   <span class="token comment">// 没有找到可用的 free list，准备重新填充free list</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span><span class="token punctuation">(</span>__result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     __ret <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">_M_refill</span><span class="token punctuation">(</span><span class="token function">_M_round_up</span><span class="token punctuation">(</span>__bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// 调整 free list</span>
     <span class="token operator">*</span>__free_list <span class="token operator">=</span> __result<span class="token operator">-></span>_M_free_list_link<span class="token punctuation">;</span>
     __ret <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>__result<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>__ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
     std<span class="token double-colon punctuation">::</span><span class="token function">__throw_bad_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">return</span> __ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">// 空间释放函数 deallocate()</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">__pool_alloc</span><span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">deallocate</span><span class="token punctuation">(</span>pointer __p<span class="token punctuation">,</span> size_type __n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span><span class="token punctuation">(</span>__n <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> __p <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cpp_aligned_new</span></span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span> <span class="token operator">></span> __STDCPP_DEFAULT_NEW_ALIGNMENT__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span>__p<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">align_val_t</span><span class="token punctuation">(</span><span class="token keyword">alignof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
 <span class="token keyword">const</span> size_t __bytes <span class="token operator">=</span> __n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Tp<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// > 128bytes 的情况</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>__bytes <span class="token operator">></span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>size_t<span class="token operator">></span></span></span><span class="token punctuation">(</span>_S_max_bytes<span class="token punctuation">)</span> <span class="token operator">||</span> _S_force_new <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
   <span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span>__p<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 寻找对应的 free list</span>
   _Obj<span class="token operator">*</span> <span class="token keyword">volatile</span><span class="token operator">*</span> __free_list <span class="token operator">=</span> <span class="token function">_M_get_free_list</span><span class="token punctuation">(</span>__bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
   _Obj<span class="token operator">*</span> __q <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Obj<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>__p<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// 调整 free list 回收区块</span>
   __scoped_lock <span class="token function">sentry</span><span class="token punctuation">(</span><span class="token function">_M_get_mutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   __q <span class="token operator">-></span>_M_free_list_link <span class="token operator">=</span> <span class="token operator">*</span>__free_list<span class="token punctuation">;</span>
   <span class="token operator">*</span>__free_list <span class="token operator">=</span> __q<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>；<span class="token comment">// class __pool_alloc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<p><strong>区块拔出</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/free-list%E6%8B%94%E5%87%BA%E5%8C%BA%E5%9D%97.png">

<br/>

<br/>

<p>​            <strong>区块回收</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/free-list%E5%8C%BA%E5%9D%97%E5%9B%9E%E6%94%B6.png">

<p>​                </p>
<p><strong>基于SGI版本分析内存池（memory pool）</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 从内存池中取空间</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">bool</span> __threads<span class="token punctuation">,</span> <span class="token keyword">int</span> __inst<span class="token operator">></span>
<span class="token keyword">char</span><span class="token operator">*</span>
<span class="token class-name">__default_alloc_template</span><span class="token operator">&lt;</span>__threads<span class="token punctuation">,</span> __inst<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">_S_chunk_alloc</span><span class="token punctuation">(</span>size_t __size<span class="token punctuation">,</span> 
                                                         <span class="token keyword">int</span><span class="token operator">&amp;</span> __nobjs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">char</span><span class="token operator">*</span> __result<span class="token punctuation">;</span>
 size_t __total_bytes <span class="token operator">=</span> __size <span class="token operator">*</span> __nobjs<span class="token punctuation">;</span>  <span class="token comment">// 需要申请空间的大小 </span>
 size_t __bytes_left <span class="token operator">=</span> _S_end_free <span class="token operator">-</span> _S_start_free<span class="token punctuation">;</span>  <span class="token comment">// 计算内存池剩余空间</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>__bytes_left <span class="token operator">>=</span> __total_bytes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 内存池剩余空间完全满足申请</span>
     __result <span class="token operator">=</span> _S_start_free<span class="token punctuation">;</span>
     _S_start_free <span class="token operator">+=</span> __total_bytes<span class="token punctuation">;</span>
     <span class="token keyword">return</span><span class="token punctuation">(</span>__result<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__bytes_left <span class="token operator">>=</span> __size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 内存池剩余空间不能满足申请，提供一个以上的区块</span>
     __nobjs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__bytes_left<span class="token operator">/</span>__size<span class="token punctuation">)</span><span class="token punctuation">;</span>
     __total_bytes <span class="token operator">=</span> __size <span class="token operator">*</span> __nobjs<span class="token punctuation">;</span>
     __result <span class="token operator">=</span> _S_start_free<span class="token punctuation">;</span>
     _S_start_free <span class="token operator">+=</span> __total_bytes<span class="token punctuation">;</span>
     <span class="token keyword">return</span><span class="token punctuation">(</span>__result<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                             <span class="token comment">// 内存池剩余空间连一个区块的大小都无法提供                      </span>
     size_t __bytes_to_get <span class="token operator">=</span> 
      <span class="token number">2</span> <span class="token operator">*</span> __total_bytes <span class="token operator">+</span> <span class="token function">_S_round_up</span><span class="token punctuation">(</span>_S_heap_size <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Try to make use of the left-over piece.</span>
    <span class="token comment">// 内存池的剩余空间分给合适的空闲链表</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__bytes_left <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         _Obj<span class="token operator">*</span> __STL_VOLATILE<span class="token operator">*</span> __my_free_list <span class="token operator">=</span>
                     _S_free_list <span class="token operator">+</span> <span class="token function">_S_freelist_index</span><span class="token punctuation">(</span>__bytes_left<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token punctuation">(</span><span class="token punctuation">(</span>_Obj<span class="token operator">*</span><span class="token punctuation">)</span>_S_start_free<span class="token punctuation">)</span> <span class="token operator">-></span> _M_free_list_link <span class="token operator">=</span> <span class="token operator">*</span>__my_free_list<span class="token punctuation">;</span>
         <span class="token operator">*</span>__my_free_list <span class="token operator">=</span> <span class="token punctuation">(</span>_Obj<span class="token operator">*</span><span class="token punctuation">)</span>_S_start_free<span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
     _S_start_free <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>__bytes_to_get<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 配置 heap 空间，用来补充内存池</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> _S_start_free<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// heap 空间不足，malloc() 失败</span>
         size_t __i<span class="token punctuation">;</span>
         _Obj<span class="token operator">*</span> __STL_VOLATILE<span class="token operator">*</span> __my_free_list<span class="token punctuation">;</span>
        _Obj<span class="token operator">*</span> __p<span class="token punctuation">;</span>
      <span class="token comment">// Try to make do with what we have.  That can't</span>
         <span class="token comment">// hurt.  We do not try smaller requests, since that tends</span>
         <span class="token comment">// to result in disaster on multi-process machines.</span>
         <span class="token keyword">for</span> <span class="token punctuation">(</span>__i <span class="token operator">=</span> __size<span class="token punctuation">;</span>
              __i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> _MAX_BYTES<span class="token punctuation">;</span>
              __i <span class="token operator">+=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> _ALIGN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
             __my_free_list <span class="token operator">=</span> _S_free_list <span class="token operator">+</span> <span class="token function">_S_freelist_index</span><span class="token punctuation">(</span>__i<span class="token punctuation">)</span><span class="token punctuation">;</span>
             __p <span class="token operator">=</span> <span class="token operator">*</span>__my_free_list<span class="token punctuation">;</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> __p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                 <span class="token operator">*</span>__my_free_list <span class="token operator">=</span> __p <span class="token operator">-></span> _M_free_list_link<span class="token punctuation">;</span>
                 _S_start_free <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>__p<span class="token punctuation">;</span>
                 _S_end_free <span class="token operator">=</span> _S_start_free <span class="token operator">+</span> __i<span class="token punctuation">;</span>
                 <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">_S_chunk_alloc</span><span class="token punctuation">(</span>__size<span class="token punctuation">,</span> __nobjs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token comment">// Any leftover piece will eventually make it to the</span>
                 <span class="token comment">// right free list.</span>
             <span class="token punctuation">&#125;</span>
         <span class="token punctuation">&#125;</span>
        _S_end_free <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// In case of exception.</span>
      _S_start_free <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>malloc_alloc<span class="token double-colon punctuation">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>__bytes_to_get<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用第一级配置器</span>
         <span class="token comment">// This should either throw an</span>
         <span class="token comment">// exception or remedy the situation.  Thus we assume it</span>
         <span class="token comment">// succeeded.</span>
     <span class="token punctuation">&#125;</span>
     _S_heap_size <span class="token operator">+=</span> __bytes_to_get<span class="token punctuation">;</span>
     _S_end_free <span class="token operator">=</span> _S_start_free <span class="token operator">+</span> __bytes_to_get<span class="token punctuation">;</span>
     <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">_S_chunk_alloc</span><span class="token punctuation">(</span>__size<span class="token punctuation">,</span> __nobjs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 递归调用自己</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>    

<p><strong>内存池实际操练结果</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/%E5%86%85%E5%AD%98%E6%B1%A0%E5%AE%9E%E9%99%85%E6%93%8D%E7%BB%83%E7%BB%93%E6%9E%9C.png">

<br/>

<br/>

<h2 id="对于-lt-stl-construct-h-gt-中的-construct-和-destroy"><a href="#对于-lt-stl-construct-h-gt-中的-construct-和-destroy" class="headerlink" title="对于  &lt;stl_construct.h&gt; 中的 construct() 和 destroy()"></a>对于  &lt;stl_construct.h&gt; 中的 construct() 和 destroy()</h2><h3 id="construct"><a href="#construct" class="headerlink" title="construct()"></a>construct()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// construct() </span>
<span class="token comment">// 调用 _T1::_T1(__args)</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_T1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">_Construct</span><span class="token punctuation">(</span>_T1<span class="token operator">*</span> __p<span class="token punctuation">,</span> _Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span> <span class="token double-colon punctuation">::</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>__p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">_T1</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="destroy"><a href="#destroy" class="headerlink" title="destroy()"></a>destroy()</h3><p>（1）直接调用对象的析构。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 版本一</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">_Destroy</span><span class="token punctuation">(</span>_Tp<span class="token operator">*</span> __pointer<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span> __pointer<span class="token operator">-></span><span class="token operator">~</span><span class="token function">_Tp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>（2）接受迭代器 first 和 last，为了解决迭代范围很大的情况，如果都直接调用对象析构，影响效率，所以要根据元素value type 来感知是否为 trivival destructor。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 版本二</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">_Destroy</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _ForwardIterator __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_ForwardIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>value_type _Value_type<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">201103L</span></span></span>
<span class="token comment">// A deleted destructor is trivial, this ensures we reject such types:</span>
<span class="token keyword">static_assert</span><span class="token punctuation">(</span>is_destructible<span class="token operator">&lt;</span>_Value_type<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span> <span class="token string">"value type is destructible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
std<span class="token double-colon punctuation">::</span><span class="token class-name">_Destroy_aux</span><span class="token operator">&lt;</span><span class="token function">__has_trivial_destructor</span><span class="token punctuation">(</span>_Value_type<span class="token punctuation">)</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>
<span class="token function">__destroy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// std::_Destroy_aux</span>

<span class="token comment">// 元素的 value type，有 non-trivival destructor</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">_Destroy_aux</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token operator">></span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__destroy</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _ForwardIterator __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">)</span>
   std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">__addressof</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 元素的 value type，有 trivival destructor</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">_Destroy_aux</span><span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token operator">></span>
   <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__destroy</span><span class="token punctuation">(</span>_ForwardIterator<span class="token punctuation">,</span> _ForwardIterator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br/><br/></p>
<h2 id="内存基本处理工具"><a href="#内存基本处理工具" class="headerlink" title="内存基本处理工具"></a>内存基本处理工具</h2><p>STL 定义了5个全局函数作用于未初始化空间上，除了上面提及的construct()、destroy()，还有：</p>
<h3 id="uninitialized-copy"><a href="#uninitialized-copy" class="headerlink" title="uninitialized_copy()"></a>uninitialized_copy()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// POD 类型</span>
<span class="token comment">// POD 类型必然有 trivival ctor/dtor/copy/assignment 函数</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__uninitialized_copy</span><span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token operator">></span>
 <span class="token keyword">static</span> _ForwardIterator
 <span class="token function">__uninit_copy</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span>
               _ForwardIterator __result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
   <span class="token comment">// 调用 STL 算法 copy()</span>
   <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __result<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// non-POD 类型</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">bool</span> _TrivialValueTypes<span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__uninitialized_copy</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token operator">></span>
 <span class="token keyword">static</span> _ForwardIterator
 <span class="token function">__uninit_copy</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span>
               _ForwardIterator __result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   _ForwardIterator __cur <span class="token operator">=</span> __result<span class="token punctuation">;</span>
   __try <span class="token punctuation">&#123;</span>
     <span class="token comment">// 必须一个一个元素地构造，无法批量进行</span>
     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">++</span>__cur<span class="token punctuation">)</span>
       std<span class="token double-colon punctuation">::</span><span class="token function">_Construct</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">__addressof</span><span class="token punctuation">(</span><span class="token operator">*</span>__cur<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> __cur<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__result<span class="token punctuation">,</span> __cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
     __throw_exception_again<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="uninitialized-fill"><a href="#uninitialized-fill" class="headerlink" title="uninitialized_fill()"></a>uninitialized_fill()</h3><blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// POD 类型</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__uninitialized_fill</span><span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
    <span class="token keyword">static</span> <span class="token keyword">void</span>
    <span class="token function">__uninit_fill</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _ForwardIterator __last<span class="token punctuation">,</span>
                  <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
      <span class="token comment">// 调用 STL 算法 fill()</span>
      std<span class="token double-colon punctuation">::</span><span class="token function">fill</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// non-POD 类型</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">bool</span> _TrivialValueType<span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__uninitialized_fill</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
     <span class="token keyword">static</span> <span class="token keyword">void</span>
     <span class="token function">__uninit_fill</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _ForwardIterator __last<span class="token punctuation">,</span>
                   <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       _ForwardIterator __cur <span class="token operator">=</span> __first<span class="token punctuation">;</span>
       __try <span class="token punctuation">&#123;</span>
         <span class="token comment">// 必须一个个构造，无法批量进行</span>
         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> __cur <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__cur<span class="token punctuation">)</span>
           std<span class="token double-colon punctuation">::</span><span class="token function">_Construct</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">__addressof</span><span class="token punctuation">(</span><span class="token operator">*</span>__cur<span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
       <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
         __throw_exception_again<span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
     <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<br/>

<h3 id="uninitialized-fill-n"><a href="#uninitialized-fill-n" class="headerlink" title="uninitialized_fill_n()"></a>uninitialized_fill_n()</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// POD 类型</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__uninitialized_fill_n</span><span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Size</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
 <span class="token keyword">static</span> _ForwardIterator
 <span class="token function">__uninit_fill_n</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _Size __n<span class="token punctuation">,</span>
                 <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
   <span class="token comment">// 调用 STL 算法 fill_n()</span>
   <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">fill_n</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __n<span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// non-POD 类型</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">bool</span> _TrivialValueType<span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__uninitialized_fill_n</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_ForwardIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Size</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
 <span class="token keyword">static</span> _ForwardIterator
 <span class="token function">__uninit_fill_n</span><span class="token punctuation">(</span>_ForwardIterator __first<span class="token punctuation">,</span> _Size __n<span class="token punctuation">,</span>
                 <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   _ForwardIterator __cur <span class="token operator">=</span> __first<span class="token punctuation">;</span>
   __try <span class="token punctuation">&#123;</span>
     <span class="token comment">// 必须一个一个元素地构造，无法批量进行</span>
     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> __n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>__n<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">++</span>__cur<span class="token punctuation">)</span>
       std<span class="token double-colon punctuation">::</span><span class="token function">_Construct</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">__addressof</span><span class="token punctuation">(</span><span class="token operator">*</span>__cur<span class="token punctuation">)</span><span class="token punctuation">,</span> __x<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> __cur<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     std<span class="token double-colon punctuation">::</span><span class="token function">_Destroy</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
     __throw_exception_again<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><strong>SGI介绍的三个内存基本函数的泛型与特化版本</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/%E4%B8%89%E4%B8%AA%E5%86%85%E5%AD%98%E5%9F%BA%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7.png">
]]></content>
      <categories>
        <category>C++ STL</category>
      </categories>
      <tags>
        <tag>拆书系列</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《STL源码剖析》配接器（adapters）</title>
    <url>/2021/06/20/STL/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E9%85%8D%E6%8E%A5%E5%99%A8%20%EF%BC%88adapters%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《STL源码剖析》配接器（adapters）"><a href="#《STL源码剖析》配接器（adapters）" class="headerlink" title="《STL源码剖析》配接器（adapters）"></a>《STL源码剖析》配接器（adapters）</h1><p><code>参考自《STL 源码剖析》-侯捷著。</code></p>
<br/>]]></content>
      <categories>
        <category>C++ STL</category>
      </categories>
      <tags>
        <tag>拆书系列</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《STL 源码剖析》迭代器（iterators）</title>
    <url>/2021/06/23/STL/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%88iterators%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《STL-源码剖析》迭代器（iterators）与-traits-编程技法"><a href="#《STL-源码剖析》迭代器（iterators）与-traits-编程技法" class="headerlink" title="《STL 源码剖析》迭代器（iterators）与 traits 编程技法"></a>《STL 源码剖析》迭代器（iterators）与 traits 编程技法</h1><p><code>参考自《STL 源码剖析》-侯捷著。</code></p>
<br/>

<p><strong>在《Design Patterns》中，定义 iterator 模式为：提供一种方法，使之能够依次巡防某个聚合物（容器）所含的各个元素，而又无需暴露该聚合物的内部表述方式。</strong></p>
<p><em><em>迭代器是一种行为类似指针的对象，而指针的各种行为中最常见也最重要的便是内容提领（dereference）和成员访问（member access），因此迭代器最重要的工作就是对 operator</em> 和operator-&gt; 进行重载工作。</em>*</p>
<hr>
<p>STL 的中心思想在于：将数据容器（containers）和算法（algorithms）分开，彼此独立设计，最后再以粘胶剂将他们撮合在一起。而这个粘胶剂就是 <strong>iterator</strong>。</p>
<p><strong>以 std:find() 为例</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
   *  @brief Find the first occurrence of a value in a sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __val    The value to find.
   *  @return   The first iterator @c i in the range @p [__first,__last)
   *  such that @c *i == @p __val, or @p __last if no such iterator exists.
  */</span>
  <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
    <span class="token keyword">inline</span> _InputIterator
    <span class="token function">find</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">__find_if</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span>
                __gnu_cxx<span class="token double-colon punctuation">::</span>__ops<span class="token double-colon punctuation">::</span><span class="token function">__iter_equals_val</span><span class="token punctuation">(</span>__val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator iter <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>iter <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"find it"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以实现一个如下类似的迭代器类：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span>

<span class="token keyword">class</span> <span class="token class-name">ListItem</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
 T <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _value<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>      
ListItem<span class="token operator">*</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _next<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
T _value<span class="token punctuation">;</span>
ListItem<span class="token operator">*</span> _next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">void</span> <span class="token function">insert_front</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">void</span> <span class="token function">insert_end</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token comment">//...</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  ListItem<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> _end<span class="token punctuation">;</span>
  ListItem<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> _front<span class="token punctuation">;</span>
  <span class="token keyword">long</span> _size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 自定义 List 迭代器类</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">ListIter</span> <span class="token punctuation">&#123;</span>

 Item<span class="token operator">*</span> ptr<span class="token punctuation">;</span>

<span class="token comment">//...</span>
 Item<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
 Item<span class="token operator">*</span> <span class="token keyword">operator</span><span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
 ListIter<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ptr <span class="token operator">=</span> ptr<span class="token operator">-></span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> mylist <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  ListIter<span class="token operator">&lt;</span>ListItem<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">begin</span><span class="token punctuation">(</span>mylist<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ListIter<span class="token operator">&lt;</span>ListItem<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">end</span><span class="token punctuation">(</span>mylist<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> iter <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>上面的做法为了实现一个针对 List 的迭代器，暴露了太多关于 List 的实现细节。STL 为了避免这种问题，将迭代器交给了各个容器去实现，这就是为什么 STL 容器都有自己专属的迭代器。</strong></p>
<h2 id="Traits-编程技法"><a href="#Traits-编程技法" class="headerlink" title="Traits 编程技法"></a>Traits 编程技法</h2><p>为了让迭代器和算法更好的结合，算法要用到迭代器的相应特性（traits），包括<code> value type、difference type、reference type、pointer type、iterator_category</code>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// _GLIBCXX_RESOLVE_LIB_DEFECTS</span>
<span class="token comment">// 2408. SFINAE-friendly common_type/iterator_traits is missing in C++14</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token operator">=</span> __void_t<span class="token operator">&lt;</span><span class="token operator">>></span>
<span class="token keyword">struct</span> <span class="token class-name">__iterator_traits</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__iterator_traits</span><span class="token operator">&lt;</span>_Iterator<span class="token punctuation">,</span>
__void_t<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>iterator_category<span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>value_type<span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>difference_type<span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>pointer<span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>reference<span class="token operator">>></span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>iterator_category iterator_category<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>value_type        value_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>difference_type   difference_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>pointer           pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>reference         reference<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 针对原生指针而设计的偏特化版本</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">typedef</span> random_access_iterator_tag iterator_category<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp                         value_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> ptrdiff_t                   difference_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp<span class="token operator">*</span>                        pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp<span class="token operator">&amp;</span>                        reference<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 针对原生（pointer-to-const）指针而设计的偏特化版本</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span><span class="token keyword">const</span> _Tp<span class="token operator">*</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">typedef</span> random_access_iterator_tag iterator_category<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _Tp                         value_type<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> ptrdiff_t                   difference_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span>                  pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span>                  reference<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><strong>traits 特性萃取机</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/traits.png">

<p><br/><br/></p>
<h3 id="value-type"><a href="#value-type" class="headerlink" title="value type"></a>value type</h3><p>指的是迭代器所指对象的类别。</p>
<br/>

<h3 id="difference-type"><a href="#difference-type" class="headerlink" title="difference type"></a>difference type</h3><p>用来表示两个迭代器的距离，因此他也可以用来表示一个容器的容量。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
   *  @brief Count the number of copies of a value in a sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __value  The value to be counted.
   *  @return   The number of iterators @c i in the range @p [__first,__last)
   *  for which @c *i == @p __value
  */</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type
  <span class="token function">count</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">,</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span> __value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">__count_if</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span>
                         __gnu_cxx<span class="token double-colon punctuation">::</span>__ops<span class="token double-colon punctuation">::</span><span class="token function">__iter_equals_val</span><span class="token punctuation">(</span>__value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当我们需要迭代器 I 的 difference type 时，可以这么写：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>I<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>

<h3 id="reference-type"><a href="#reference-type" class="headerlink" title="reference type"></a>reference type</h3><p>从迭代器所指对象是否允许的角度观之，迭代器分两种，<code>const iterators（不允许改变）</code>和 <code>mutable iterators（允许改变）</code>。</p>
<table>
<thead>
<tr>
<th>iterator 类型</th>
<th>value type</th>
<th>reference type</th>
</tr>
</thead>
<tbody><tr>
<td>const iterators（记为 p）</td>
<td>T</td>
<td>const T&amp;</td>
</tr>
<tr>
<td>mutable iterators（记为 p）</td>
<td>T</td>
<td>T&amp;</td>
</tr>
</tbody></table>
<br/>

<h3 id="pointer-type"><a href="#pointer-type" class="headerlink" title="pointer type"></a>pointer type</h3><p>形如 <strong>T</strong>* 便是 pointer type。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__iterator_traits</span><span class="token operator">&lt;</span>
<span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>pointer<span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>reference<span class="token operator">>></span> <span class="token punctuation">&#123;</span>
<span class="token comment">//...</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>pointer           pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">_Iterator</span><span class="token double-colon punctuation">::</span>reference         reference<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 针对原生指针而设计的偏特化版本</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_Tp<span class="token operator">*</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
<span class="token comment">//...</span>
 <span class="token keyword">typedef</span> ptrdiff_t                   difference_type<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> _Tp<span class="token operator">*</span>                        pointer<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 针对原生（pointer-to-const）指针而设计的偏特化版本</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span><span class="token keyword">const</span> _Tp<span class="token operator">*</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
<span class="token comment">//...</span>
 <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">*</span>                  pointer<span class="token punctuation">;</span>
 <span class="token keyword">typedef</span> <span class="token keyword">const</span> _Tp<span class="token operator">&amp;</span>                  reference<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="iterator-category"><a href="#iterator-category" class="headerlink" title="iterator_category"></a>iterator_category</h3><table>
<thead>
<tr>
<th>迭代器类别</th>
<th>说明</th>
<th>提供给</th>
</tr>
</thead>
<tbody><tr>
<td>Input Iterator</td>
<td>只读</td>
<td>istream</td>
</tr>
<tr>
<td>Output Iterator</td>
<td>只写</td>
<td>ostream, inserter</td>
</tr>
<tr>
<td>Forward Iterator</td>
<td>允许“写入型”算法如 （repalce()）在迭代区间进行读写操作</td>
<td>forward list, unordered containers</td>
</tr>
<tr>
<td>Bidirectional Iterator</td>
<td>可以双向移动，逆向访问迭代区间</td>
<td>list, set, multiset, map</td>
</tr>
<tr>
<td>Random Access Iterator</td>
<td>涵盖所有指针算术能力，包括 p+n, p-n, p[n], p1-p2, p1 &lt; p2.</td>
<td>array, vector, deque, string, C-style array</td>
</tr>
</tbody></table>
<br/>

<p><strong>迭代器的分类与从属关系</strong></p>
<img src="https://github.com/JoyChenNo1/JoyChenNo1.github.io/raw/master/BlogImages/STL/%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB%E4%B8%8E%E4%BB%8E%E5%B1%9E%E5%85%B3%E7%B3%BB.png">

<br/>

<p><code>箭头代表的是 concept 与 refinement 的关系</code></p>
<table>
<thead>
<tr>
<th>继承</th>
<th>强化</th>
</tr>
</thead>
<tbody><tr>
<td>所谓继承，是is-a的关系，但是它有个很重要的隐式约定：它表示的是一种具体类型与另一种具体类型的关系。所谓具体类型，是一个包括属性和给用户的方法的集合。</td>
<td>所谓强化，代表的是：一个集合与另一个集合的关系。所谓集合：是指满足一组相同条件的集合，或者说是拥有一组相同操作行为的集合。因而如果说B是A的强化，那么B也拥有集合A的该组操作能力，并且可能还拥有其他的能力。因而它强调的是接口能力的继承，而不是将属性和行为都继承下来。</td>
</tr>
</tbody></table>
<br/>

<p>STL 为了提高效率，针对不同的迭代器类型提供不同的版本，例如 <code>distance()</code>:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
   *  @brief A generalization of pointer arithmetic.
   *  @param  __first  An input iterator.
   *  @param  __last  An input iterator.
   *  @return  The distance between them.
   *
   *  Returns @c n such that __first + n == __last.  This requires
   *  that @p __last must be reachable from @p __first.  Note that @c
   *  n may be negative.
   *
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_InputIterator</span><span class="token operator">></span>
<span class="token keyword">inline</span> _GLIBCXX17_CONSTEXPR
<span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>_InputIterator<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type
  <span class="token function">distance</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">__distance</span><span class="token punctuation">(</span>__first<span class="token punctuation">,</span> __last<span class="token punctuation">,</span>
                         std<span class="token double-colon punctuation">::</span><span class="token function">__iterator_category</span><span class="token punctuation">(</span>__first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 逐一累计距离</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_InputIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Distance</span><span class="token operator">></span>
<span class="token keyword">inline</span> _GLIBCXX14_CONSTEXPR <span class="token keyword">void</span>
<span class="token function">__advance</span><span class="token punctuation">(</span>_InputIterator<span class="token operator">&amp;</span> __i<span class="token punctuation">,</span> _Distance __n<span class="token punctuation">,</span> input_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>__n<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token operator">++</span>__i<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 逐一累计距离 （可逆向）</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_BidirectionalIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Distance</span><span class="token operator">></span>
<span class="token keyword">inline</span> _GLIBCXX14_CONSTEXPR <span class="token keyword">void</span>
<span class="token function">__advance</span><span class="token punctuation">(</span>_BidirectionalIterator<span class="token operator">&amp;</span> __i<span class="token punctuation">,</span> _Distance __n<span class="token punctuation">,</span>
          bidirectional_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>__n<span class="token operator">--</span><span class="token punctuation">)</span>
      <span class="token operator">++</span>__i<span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>__n<span class="token operator">++</span><span class="token punctuation">)</span>
      <span class="token operator">--</span>__i<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 直接计算差距</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Distance</span><span class="token operator">></span>
<span class="token keyword">inline</span> _GLIBCXX14_CONSTEXPR <span class="token keyword">void</span>
<span class="token function">__advance</span><span class="token punctuation">(</span>_RandomAccessIterator<span class="token operator">&amp;</span> __i<span class="token punctuation">,</span> _Distance __n<span class="token punctuation">,</span>
          random_access_iterator_tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_constant_p</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> __n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token operator">++</span>__i<span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_constant_p</span><span class="token punctuation">(</span>__n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> __n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token operator">--</span>__i<span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    __i <span class="token operator">+=</span> __n<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<h3 id="std-iterator"><a href="#std-iterator" class="headerlink" title="std::iterator"></a>std::iterator</h3><p>为了方便我们自定义迭代器类型，保证设计的迭代器符合 STL规范，提供了：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
   *  @brief  Common %iterator class.
   *
   *  This class does nothing but define nested typedefs.  %Iterator classes
   *  can inherit from this class to save some work.  The typedefs are then
   *  used in specializations and overloading.
   *
   *  In particular, there are no default implementations of requirements
   *  such as @c operator++ and the like.  (How could there be?)
  */</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Category</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Distance</span> <span class="token operator">=</span> ptrdiff_t<span class="token punctuation">,</span>
<span class="token keyword">typename</span> <span class="token class-name">_Pointer</span> <span class="token operator">=</span> _Tp<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Reference</span> <span class="token operator">=</span> _Tp<span class="token operator">&amp;</span><span class="token operator">></span>
  <span class="token keyword">struct</span> <span class="token class-name">iterator</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/// One of the @link iterator_tags tag types@endlink.</span>
    <span class="token keyword">typedef</span> _Category  iterator_category<span class="token punctuation">;</span>
    <span class="token comment">/// The type "pointed to" by the iterator.</span>
    <span class="token keyword">typedef</span> _Tp        value_type<span class="token punctuation">;</span>
    <span class="token comment">/// Distance between iterators is represented as this type.</span>
    <span class="token keyword">typedef</span> _Distance  difference_type<span class="token punctuation">;</span>
    <span class="token comment">/// This type represents a pointer-to-value_type.</span>
    <span class="token keyword">typedef</span> _Pointer   pointer<span class="token punctuation">;</span>
    <span class="token comment">/// This type represents a reference-to-value_type.</span>
    <span class="token keyword">typedef</span> _Reference reference<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<br/>

<h2 id="type-traits"><a href="#type-traits" class="headerlink" title="__type_traits"></a>__type_traits</h2><p><strong>iterator_traits</strong> 负责的是萃取<strong>迭代器的特性</strong>，为了进一步扩大到迭代器以外的世界，提供了**__type_traits**负责萃取 <strong>type的特性</strong>。 </p>
<p><strong>SGI 版本</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">__type_traits</span> <span class="token punctuation">&#123;</span> 
  <span class="token keyword">typedef</span> __true_type     this_dummy_member_must_be_first<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __false_type    has_trivial_default_constructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __false_type    has_trivial_copy_constructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __false_type    has_trivial_assignment_operator<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __false_type    has_trivial_destructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __false_type    is_POD_type<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 针对 C++ 基本类别提供的特化版本</span>
<span class="token comment">// 每个成员的值都是 __true_type，表示这些类型可以</span>
<span class="token comment">// 采用最快速的方式（如 memcpy）进行拷贝和赋值</span>
__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

__STL_TEMPLATE_NULL <span class="token keyword">struct</span> <span class="token class-name">__type_traits</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">typedef</span> __true_type    has_trivial_default_constructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __true_type    has_trivial_copy_constructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __true_type    has_trivial_assignment_operator<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __true_type    has_trivial_destructor<span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> __true_type    is_POD_type<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br/>

<p><strong>GCC 版本</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// include/c++/9/type_traits</span>

<span class="token comment">/// is_trivial</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">is_trivial</span>
<span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">integral_constant</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">,</span> <span class="token function">__is_trivial</span><span class="token punctuation">(</span><span class="token class-name">_Tp</span><span class="token punctuation">)</span><span class="token operator">></span></span>
<span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// is_trivially_copyable</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">is_trivially_copyable</span>
<span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">integral_constant</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">,</span> <span class="token function">__is_trivially_copyable</span><span class="token punctuation">(</span><span class="token class-name">_Tp</span><span class="token punctuation">)</span><span class="token operator">></span></span>
<span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/// is_pod</span>
<span class="token comment">// Could use is_standard_layout &amp;&amp; is_trivial instead of the builtin.</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">is_pod</span>
<span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">integral_constant</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">,</span> <span class="token function">__is_pod</span><span class="token punctuation">(</span><span class="token class-name">_Tp</span><span class="token punctuation">)</span><span class="token operator">></span></span>
<span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">is_trivially_move_assignable</span>
<span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">__is_trivially_move_assignable_impl</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token operator">></span></span>
<span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/// is_trivially_destructible</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">is_trivially_destructible</span>
<span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">__and_</span><span class="token operator">&lt;</span><span class="token class-name">is_destructible</span><span class="token operator">&lt;</span><span class="token class-name">_Tp</span><span class="token operator">></span><span class="token punctuation">,</span>
<span class="token class-name">__bool_constant</span><span class="token operator">&lt;</span><span class="token function">__has_trivial_destructor</span><span class="token punctuation">(</span><span class="token class-name">_Tp</span><span class="token punctuation">)</span><span class="token operator">>></span></span>
<span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token comment">/// has_virtual_destructor</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">has_virtual_destructor</span>
<span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">integral_constant</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">,</span> <span class="token function">__has_virtual_destructor</span><span class="token punctuation">(</span><span class="token class-name">_Tp</span><span class="token punctuation">)</span><span class="token operator">></span></span>
<span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>__type_trait</code> 在 STL 中应用，如之前提到的<code>uninitialized_fill_n()</code>，会根据是否为 POD类别，选择调用高阶函数<code>std::fill_n()</code> 还是 <code>逐一调用对象的construct()</code>。</p>
]]></content>
      <categories>
        <category>C++ STL</category>
      </categories>
      <tags>
        <tag>拆书系列</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>拆书系列之《STL源码剖析》算法（Algorithm）</title>
    <url>/2021/06/19/STL/%E6%8B%86%E4%B9%A6%E7%B3%BB%E5%88%97%E4%B9%8B%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E7%AE%97%E6%B3%95%EF%BC%88algorithms%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《STL源码剖析》算法（Algorithm）"><a href="#《STL源码剖析》算法（Algorithm）" class="headerlink" title="《STL源码剖析》算法（Algorithm）"></a>《STL源码剖析》算法（Algorithm）</h1><p><code>参考自《STL 源码剖析》-侯捷著。</code></p>
<br/>]]></content>
      <categories>
        <category>C++ STL</category>
      </categories>
      <tags>
        <tag>拆书系列</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>常见设计模式</title>
    <url>/2020/07/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/design%20patterns/</url>
    <content><![CDATA[<h2 id="1、单例模式"><a href="#1、单例模式" class="headerlink" title="1、单例模式"></a>1、单例模式</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 线程安全的单例模式</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
 
<span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> Singleton<span class="token operator">&amp;</span> <span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>  
    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span> src<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
    Singleton<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>once_flag once_flag_<span class="token punctuation">;</span>
    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Singleton<span class="token operator">></span> instance_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>once_flag Singleton<span class="token double-colon punctuation">::</span>once_flag_<span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Singleton<span class="token operator">></span> Singleton<span class="token double-colon punctuation">::</span>instance_<span class="token punctuation">;</span>
 
Singleton<span class="token operator">&amp;</span> <span class="token class-name">Singleton</span><span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">call_once</span><span class="token punctuation">(</span>once_flag_<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
      instance_<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">new</span> Singleton<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span>instance_<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="2、工厂模式"><a href="#2、工厂模式" class="headerlink" title="2、工厂模式"></a>2、工厂模式</h2><h2 id="3、观察者模式"><a href="#3、观察者模式" class="headerlink" title="3、观察者模式"></a>3、观察者模式</h2>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式原则概要</title>
    <url>/2020/07/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99%E6%A6%82%E8%A6%81/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
</search>
